CCS PCH C Compiler, Version 5.008, 5967               31-janv.-19 15:04

               Filename:   N:\Should be on the desktop\_PFE\Firmware\PGM Firmware\main.lst

               ROM used:   10126 bytes (31%)
                           Largest free fragment is 22642
               RAM used:   783 (38%) at main() level
                           836 (41%) worst case
               Stack used: 15 locations (6 in main + 9 for interrupts)
               Stack size: 31

*
0000:  GOTO   2700
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FA0.5
004A:  GOTO   0054
004E:  BTFSC  FA1.5
0050:  GOTO   0F40
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <main.h> 
.................... #IFNDEF MAIN_H 
.................... #DEFINE MAIN_H 
....................  
....................  
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
0096:  CLRF   FF7
0098:  ADDLW  A6
009A:  MOVWF  FF6
009C:  MOVLW  00
009E:  ADDWFC FF7,F
00A0:  TBLRD*+
00A2:  MOVF   FF5,W
00A4:  RETURN 0
00A6:  DATA 00,03
00A8:  DATA FF,FF
00AA:  DATA FF,FF
00AC:  DATA FF,FF
00AE:  DATA FF,FF
00B0:  DATA FF,FF
00B2:  DATA FF,FF
00B4:  DATA FF,FF
00B6:  BTFSS  07.7
00B8:  BRA    00C0
00BA:  MOVFF  FF2,0D
00BE:  BCF    FF2.7
00C0:  CLRF   FF7
00C2:  ADDLW  D8
00C4:  MOVWF  FF6
00C6:  MOVLW  00
00C8:  ADDWFC FF7,F
00CA:  TBLRD*+
00CC:  MOVF   FF5,W
00CE:  BTFSS  07.7
00D0:  BRA    00D6
00D2:  BTFSC  0D.7
00D4:  BSF    FF2.7
00D6:  RETURN 0
00D8:  DATA 40,00
00DA:  DATA 40,00
00DC:  DATA 00,00
00DE:  DATA 00,00
00E0:  DATA 00,00
00E2:  DATA 00,00
00E4:  DATA 00,00
00E6:  DATA 00,00
00E8:  DATA 00,00
00EA:  DATA 00,00
00EC:  DATA 00,00
00EE:  DATA 00,00
00F0:  DATA 00,00
00F2:  DATA 00,00
00F4:  DATA 00,00
00F6:  DATA 00,00
00F8:  CLRF   FF7
00FA:  ADDLW  08
00FC:  MOVWF  FF6
00FE:  MOVLW  01
0100:  ADDWFC FF7,F
0102:  TBLRD*+
0104:  MOVF   FF5,W
0106:  RETURN 0
0108:  DATA 06,00
010A:  DATA FF,09
010C:  DATA 01,A1
010E:  DATA 01,19
0110:  DATA 01,29
0112:  DATA 08,15
0114:  DATA 80,25
0116:  DATA 7F,75
0118:  DATA 08,95
011A:  DATA 40,81
011C:  DATA 02,19
011E:  DATA 01,29
0120:  DATA 08,75
0122:  DATA 08,95
0124:  DATA 40,91
0126:  DATA 02,C0
0128:  CLRF   FF7
012A:  ADDLW  38
012C:  MOVWF  FF6
012E:  MOVLW  01
0130:  ADDWFC FF7,F
0132:  TBLRD*+
0134:  MOVF   FF5,W
0136:  RETURN 0
0138:  DATA 00,00
013A:  CLRF   FF7
013C:  ADDLW  4A
013E:  MOVWF  FF6
0140:  MOVLW  01
0142:  ADDWFC FF7,F
0144:  TBLRD*+
0146:  MOVF   FF5,W
0148:  RETURN 0
014A:  DATA 20,00
014C:  CLRF   FF7
014E:  ADDLW  5C
0150:  MOVWF  FF6
0152:  MOVLW  01
0154:  ADDWFC FF7,F
0156:  TBLRD*+
0158:  MOVF   FF5,W
015A:  RETURN 0
015C:  DATA 09,02
015E:  DATA 29,00
0160:  DATA 01,01
0162:  DATA 02,80
0164:  DATA 32,09
0166:  DATA 04,00
0168:  DATA 00,02
016A:  DATA 03,00
016C:  DATA 00,00
016E:  DATA 09,21
0170:  DATA 00,01
0172:  DATA 00,01
0174:  DATA 22,20
0176:  DATA 00,07
0178:  DATA 05,81
017A:  DATA 03,40
017C:  DATA 00,01
017E:  DATA 07,05
0180:  DATA 01,03
0182:  DATA 40,00
0184:  DATA 01,00
0186:  CLRF   FF7
0188:  ADDLW  96
018A:  MOVWF  FF6
018C:  MOVLW  01
018E:  ADDWFC FF7,F
0190:  TBLRD*+
0192:  MOVF   FF5,W
0194:  RETURN 0
0196:  DATA 01,00
0198:  CLRF   FF7
019A:  ADDLW  A8
019C:  MOVWF  FF6
019E:  MOVLW  01
01A0:  ADDWFC FF7,F
01A2:  TBLRD*+
01A4:  MOVF   FF5,W
01A6:  RETURN 0
01A8:  DATA 12,00
01AA:  CLRF   FF7
01AC:  ADDLW  BA
01AE:  MOVWF  FF6
01B0:  MOVLW  01
01B2:  ADDWFC FF7,F
01B4:  TBLRD*+
01B6:  MOVF   FF5,W
01B8:  RETURN 0
01BA:  DATA 12,01
01BC:  DATA 02,00
01BE:  DATA 00,00
01C0:  DATA 00,40
01C2:  DATA 25,00
01C4:  DATA 01,00
01C6:  DATA 02,00
01C8:  DATA 01,02
01CA:  DATA 00,01
01CC:  CLRF   FF7
01CE:  ADDLW  DC
01D0:  MOVWF  FF6
01D2:  MOVLW  01
01D4:  ADDWFC FF7,F
01D6:  TBLRD*+
01D8:  MOVF   FF5,W
01DA:  RETURN 0
01DC:  DATA 04,03
01DE:  DATA 09,04
01E0:  DATA 08,03
01E2:  DATA 50,00
01E4:  DATA 47,00
01E6:  DATA 4D,00
01E8:  DATA 1C,03
01EA:  DATA 42,00
01EC:  DATA 65,00
01EE:  DATA 6C,00
01F0:  DATA 61,00
01F2:  DATA 72,00
01F4:  DATA 62,00
01F6:  DATA 69,00
01F8:  DATA 27,00
01FA:  DATA 73,00
01FC:  DATA 20,00
01FE:  DATA 50,00
0200:  DATA 49,00
0202:  DATA 43,00
*
02AC:  MOVLB  2
02AE:  MOVF   x2F,W
02B0:  MULWF  x31
02B2:  MOVFF  FF3,01
02B6:  MOVFF  FF4,00
02BA:  MULWF  x32
02BC:  MOVF   FF3,W
02BE:  ADDWF  00,F
02C0:  MOVF   x30,W
02C2:  MULWF  x31
02C4:  MOVF   FF3,W
02C6:  ADDWFC 00,W
02C8:  MOVWF  02
02CA:  MOVLB  0
02CC:  RETURN 0
*
0488:  ADDWF  FE8,W
048A:  CLRF   FF7
048C:  RLCF   FF7,F
048E:  ADDLW  A3
0490:  MOVWF  FF6
0492:  MOVLW  04
0494:  ADDWFC FF7,F
0496:  TBLRD*-
0498:  MOVF   FF5,W
049A:  MOVWF  FFA
049C:  TBLRD*
049E:  MOVF   FF5,W
04A0:  MOVWF  FF9
04A2:  DATA EA,03
04A4:  DATA 02,04
04A6:  DATA 1A,04
04A8:  DATA 32,04
*
1830:  MOVLB  2
1832:  MOVF   x0E,W
1834:  XORWF  x10,W
1836:  ANDLW  80
1838:  MOVWF  x12
183A:  BTFSS  x0E.7
183C:  BRA    1848
183E:  COMF   x0D,F
1840:  COMF   x0E,F
1842:  INCF   x0D,F
1844:  BTFSC  FD8.2
1846:  INCF   x0E,F
1848:  BTFSS  x10.7
184A:  BRA    1856
184C:  COMF   x0F,F
184E:  COMF   x10,F
1850:  INCF   x0F,F
1852:  BTFSC  FD8.2
1854:  INCF   x10,F
1856:  MOVF   x0D,W
1858:  MULWF  x0F
185A:  MOVFF  FF3,01
185E:  MOVFF  FF4,00
1862:  MULWF  x10
1864:  MOVF   FF3,W
1866:  ADDWF  00,F
1868:  MOVF   x0E,W
186A:  MULWF  x0F
186C:  MOVF   FF3,W
186E:  ADDWFC 00,W
1870:  MOVWF  02
1872:  BTFSS  x12.7
1874:  BRA    1880
1876:  COMF   01,F
1878:  COMF   02,F
187A:  INCF   01,F
187C:  BTFSC  FD8.2
187E:  INCF   02,F
1880:  MOVLB  0
1882:  GOTO   1908 (RETURN)
*
19BE:  MOVLB  2
19C0:  CLRF   x18
19C2:  CLRF   x19
19C4:  MOVLW  01
19C6:  MOVWF  x1A
19C8:  CLRF   FDA
19CA:  CLRF   FD9
19CC:  MOVLW  02
19CE:  MOVWF  x1D
19D0:  MOVLW  10
19D2:  MOVWF  x1C
19D4:  MOVLW  02
19D6:  MOVWF  FEA
19D8:  MOVLW  14
19DA:  MOVWF  FE9
19DC:  MOVFF  21D,FE2
19E0:  MOVFF  21C,FE1
19E4:  MOVFF  21A,21B
19E8:  BCF    FD8.0
19EA:  MOVF   FE5,W
19EC:  MULWF  FEE
19EE:  MOVF   FF3,W
19F0:  ADDWFC x18,F
19F2:  MOVF   FF4,W
19F4:  ADDWFC x19,F
19F6:  DECFSZ x1B,F
19F8:  BRA    19E8
19FA:  MOVFF  218,FDE
19FE:  MOVFF  219,218
1A02:  CLRF   x19
1A04:  BTFSC  FD8.0
1A06:  INCF   x19,F
1A08:  INCF   x1C,F
1A0A:  BTFSC  FD8.2
1A0C:  INCF   x1D,F
1A0E:  INCF   x1A,F
1A10:  MOVF   x1A,W
1A12:  SUBLW  05
1A14:  BNZ   19D4
1A16:  MOVLB  0
1A18:  GOTO   1A4A (RETURN)
*
1BE2:  MOVFF  208,01
1BE6:  MOVFF  207,00
1BEA:  TSTFSZ 00
1BEC:  INCF   01,F
1BEE:  TBLRD*+
1BF0:  MOVFF  FF5,FEE
1BF4:  DECFSZ 00,F
1BF6:  BRA    1BEE
1BF8:  DECFSZ 01,F
1BFA:  BRA    1BEE
1BFC:  CLRF   FF8
1BFE:  GOTO   26BC (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #fuses  HSPLL PLL5 CPUDIV2 USBDIV VREGEN NOMCLR 
.................... #use delay(clock=48000000) 
*
1068:  MOVLW  02
106A:  MOVWF  FEA
106C:  MOVLW  06
106E:  MOVWF  FE9
1070:  MOVF   FEF,W
1072:  BZ    1090
1074:  MOVLW  0F
1076:  MOVWF  01
1078:  CLRF   00
107A:  DECFSZ 00,F
107C:  BRA    107A
107E:  DECFSZ 01,F
1080:  BRA    1078
1082:  MOVLW  8F
1084:  MOVWF  00
1086:  DECFSZ 00,F
1088:  BRA    1086
108A:  NOP   
108C:  DECFSZ FEF,F
108E:  BRA    1074
1090:  RETURN 0
....................  
.................... //#USE fast_io(C) 
....................  
....................  
.................... #include "usb/pic18_usb.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////     PIC18FxxK50                                                 //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   1 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==0 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(unsigned int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(unsigned int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(unsigned int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(unsigned int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(unsigned int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(unsigned int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "usb/usb_desc_hid.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ///                          usb_desc_hid.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's HID Demo example (see ex_usb_hid.c)                         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////   PIC18Fxx5x initial release                                      //// 
.................... ////                                                                   //// 
.................... //// March 21st, 2005:                                                 //// 
.................... ////   EP 0x01 and EP 0x81 now use USB_EP1_TX_SIZE and USB_EP1_RX_SIZE //// 
.................... ////      to define max packet size, to make it easier for dynamically //// 
.................... ////      changed code.                                                //// 
.................... ////   EP 0x01 and EP 0x81 will now use 1ms polling interval if using  //// 
.................... ////      a full speed device.                                         //// 
.................... ////                                                                   //// 
.................... //// May 4th, 2004: Optimization and cleanup.                          //// 
.................... ////                Some definitions may have changed.                 //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed non-HID descriptors pointing to faulty       //// 
.................... ////                strings                                            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #ifndef USB_CONFIG_PID 
....................    #define USB_CONFIG_PID  0x0001 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_VID 
....................    #define  USB_CONFIG_VID 0x0025 
.................... #endif 
....................  
....................  
.................... #ifndef USB_CONFIG_VERSION 
....................    //version number that is stored into descriptor, in bcd. 
....................    //range is 00.00 to 99.99 
....................    #define  USB_CONFIG_VERSION   0x0002      //01.00 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_TX_SIZE 
....................    //valid range is 0-255 
....................    #define USB_CONFIG_HID_TX_SIZE   0x40     //compatible with hiddemo.exe 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_RX_SIZE 
....................    //valid range is 0-255 
....................    #define USB_CONFIG_HID_RX_SIZE   0x40     //compatible with hiddemo.exe 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_TX_POLL 
....................    // for full speed devices, valid range is 1-255 
....................    // for slow speed devices, valid range is 10-255 
....................    #define USB_CONFIG_HID_TX_POLL   1 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_RX_POLL 
....................    // for full speed devices, valid range is 1-255 
....................    // for slow speed devices, valid range is 10-255 
....................    #define USB_CONFIG_HID_RX_POLL   1 
.................... #endif 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #ifdef USB_HID_DEVICE 
.................... #undef USB_HID_DEVICE 
.................... #endif 
....................  
.................... #DEFINE USB_HID_DEVICE  TRUE 
....................  
.................... //the following defines needed for the CCS USB PIC driver to enable the TX endpoint 1 
.................... // and allocate buffer space on the peripheral 
.................... #ifdef USB_EP1_TX_ENABLE 
.................... #undef USB_EP1_TX_ENABLE 
.................... #endif 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT   //turn on EP1 for IN bulk/interrupt transfers 
....................  
.................... #ifndef USB_EP1_TX_SIZE 
....................  #if (USB_CONFIG_HID_TX_SIZE >= 64) 
....................    // interrupt endpoint max packet size is 64. 
....................    #define USB_EP1_TX_SIZE    64 
....................  #else 
....................    // by making EP packet size larger than message size, we can send message in one packet. 
....................    #define USB_EP1_TX_SIZE    (USB_CONFIG_HID_TX_SIZE+1) 
....................  #endif 
.................... #endif 
....................  
.................... #ifdef USB_EP1_RX_ENABLE 
.................... #undef USB_EP1_RX_ENABLE 
.................... #endif 
.................... #define USB_EP1_RX_ENABLE  USB_ENABLE_INTERRUPT   //turn on EP1 for OUT bulk/interrupt transfers 
....................  
.................... #ifndef USB_EP1_RX_SIZE 
....................  #if (USB_CONFIG_HID_RX_SIZE >= 64) 
....................    // interrupt endpoint max packet size is 64. 
....................    #define USB_EP1_RX_SIZE    64 
....................  #else 
....................    // by making EP packet size larger than message size, we can send message in one packet. 
....................    #define USB_EP1_RX_SIZE    (USB_CONFIG_HID_RX_SIZE+1) 
....................  #endif 
.................... #endif 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................    ////////////////////////////////////////////////////////////////// 
....................    /// 
....................    ///  HID Report.  Tells HID driver how to handle and deal with 
....................    ///  received data.  HID Reports can be extremely complex, 
....................    ///  see HID specifcation for help on writing your own. 
....................    /// 
....................    ///  CCS example uses a vendor specified usage, that sends and 
....................    ///  receives 2 absolute bytes ranging from 0 to 0xFF. 
....................    /// 
....................    ////////////////////////////////////////////////////////////////// 
....................  
.................... const char USB_CLASS_SPECIFIC_DESC[] =  
.................... { 
....................       6, 0, 255,        // Usage Page = Vendor Defined 
....................       9, 1,             // Usage = IO device 
....................       0xa1, 1,          // Collection = Application 
....................       0x19, 1,          // Usage minimum 
....................       0x29, 8,          // Usage maximum 
....................  
....................       0x15, 0x80,       // Logical minimum (-128) 
....................       0x25, 0x7F,       // Logical maximum (127) 
....................  
....................       0x75, 8,          // Report size = 8 (bits) 
....................       0x95, USB_CONFIG_HID_TX_SIZE,        // Report count = 16 bits (2 bytes) 
....................       0x81, 2,          // Input (Data, Var, Abs) 
....................       0x19, 1,          // Usage minimum 
....................       0x29, 8,          // Usage maximum 
....................       0x75, 8,          // Report size = 8 (bits) 
....................       0x95, USB_CONFIG_HID_RX_SIZE,        // Report count = 16 bits (2 bytes) 
....................       0x91, 2,          // Output (Data, Var, Abs) 
....................       0xc0              // End Collection 
.................... }; 
....................  
....................    //if a class has an extra descriptor not part of the config descriptor, 
....................    // this lookup table defines where to look for it in the const 
....................    // USB_CLASS_SPECIFIC_DESC[] array. 
....................    //first element is the config number (if your device has more than one config) 
....................    //second element is which interface number 
....................    //set element to 0xFFFF if this config/interface combo doesn't exist 
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          0 
....................    }; 
....................     
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          32 
....................    }; 
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN      41  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
.................... const char USB_CONFIG_DESC[] = { 
.................... //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................    //    config(s) 
....................    //    interface(s) 
....................    //    class(es) 
....................    //    endpoint(s) 
....................  
.................... //config_descriptor for config index 1 
....................       USB_DESC_CONFIG_LEN, //length of descriptor size          ==1 
....................       USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==2 
....................       USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==3,4 
....................       1, //number of interfaces this device supports       ==5 
....................       0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==6 
....................       0x02, //index of string descriptor for this configuration      ==7 
....................       0x80, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==8 
....................       50, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA) 
....................  
.................... //interface descriptor 1 
....................       USB_DESC_INTERFACE_LEN, //length of descriptor      =10 
....................       USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =11 
....................       0x00, //number defining this interface (IF we had more than one interface)    ==12 
....................       0x00, //alternate setting     ==13 
....................       2, //number of endpoins, except 0 (pic167xx has 3, but we dont have to use all).       ==14 
....................       0x03, //class code, 03 = HID     ==15 
....................       0x00, //subclass code //boot     ==16 
....................       0x00, //protocol code      ==17 
....................       0x00, //index of string descriptor for interface      ==18 
....................  
.................... //class descriptor 1  (HID) 
....................       USB_DESC_CLASS_LEN, //length of descriptor    ==19 
....................       0x21, //dscriptor type (0x21 == HID)      ==20 
....................       0x00,0x01, //hid class release number (1.0)      ==21,22 
....................       0x00, //localized country code (0 = none)       ==23 
....................       0x01, //number of hid class descrptors that follow (1)      ==24 
....................       0x22, //report descriptor type (0x22 == HID)                ==25 
....................       32, 0x00, //length of report descriptor            ==26,27 
....................  
.................... //endpoint descriptor 
....................       USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==28 
....................       USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==29 
....................       0x81, //endpoint number and direction (0x81 = EP1 IN)       ==30 
....................       USB_EP1_TX_ENABLE, //transfer type supported (0x03 is interrupt)         ==31 
....................       USB_EP1_TX_SIZE,0x00, //maximum packet size supported                  ==32,33 
....................       USB_CONFIG_HID_TX_POLL,  //polling interval, in ms.  (cant be smaller than 10 for slow speed)      ==34 
....................  
.................... //endpoint descriptor 
....................       USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==35 
....................       USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==36 
....................       0x01, //endpoint number and direction (0x01 = EP1 OUT)      ==37 
....................       USB_EP1_RX_ENABLE, //transfer type supported (0x03 is interrupt)         ==38 
....................       USB_EP1_RX_SIZE,0x00, //maximum packet size supported                  ==39,40 
....................       USB_CONFIG_HID_RX_POLL //polling interval, in ms.  (cant be smaller than 10 for slow speed)    ==41 
.................... }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
....................    //      FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
....................    #define USB_NUM_HID_INTERFACES   1 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   1 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][1][1]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1 
....................          18 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................    //starts of with device configuration. only one possible 
....................       USB_DESC_DEVICE_LEN, //the length of this report   ==1 
....................       0x01, //the constant DEVICE (DEVICE 0x01)  ==2 
....................       0x02,0x00, //usb version in bcd ==3,4 
....................       0x00, //class code ==5 
....................       0x00, //subclass code ==6 
....................       0x00, //protocol code ==7 
....................       USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==8 
....................       USB_CONFIG_VID & 0xFF, ((USB_CONFIG_VID >> 8) & 0xFF), //vendor id       ==9, 10 
....................       USB_CONFIG_PID & 0xFF, ((USB_CONFIG_PID >> 8) & 0xFF), //product id, don't use 0xffff       ==11, 12 
....................       USB_CONFIG_VERSION & 0xFF, ((USB_CONFIG_VERSION >> 8) & 0xFF), //device release number  ==13,14 
....................       0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==15 
....................       0x02, //index of string descriptor of the product  ==16 
....................       0x00, //index of string descriptor of serial number  ==17 
....................       USB_NUM_CONFIGURATIONS  //number of possible configurations  ==18 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
.................... // Here is where the "CCS" Manufacturer string and "CCS HID Demo" are stored. 
.................... // Strings are saved as unicode. 
.................... // These strings are mostly only displayed during the add hardware wizard. 
.................... // Once the operating system drivers have been installed it will usually display 
.................... // the name from the drivers .INF. 
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          8, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'P',0, 
....................          'G',0, 
....................          'M',0, 
....................    //string 2 
....................          28, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'B',0, 
....................          'e',0, 
....................          'l',0, 
....................          'a',0, 
....................          'r',0, 
....................          'b',0, 
....................          'i',0, 
....................          '\'',0, 
....................          's',0, 
....................          ' ',0, 
....................          'P',0, 
....................          'I',0, 
....................          'C',0, 
....................           
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include "usb/usb.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// June 8th, 2011:                                                   //// 
.................... ////  Problem with usb_gets() and usb_puts() and specifying timeout=0  //// 
.................... ////     (for no timeout) resolved.                                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #if defined(__DO_DEBUG_USB) 
....................    #define debug_usb printf 
....................    void debug_putc(char c) {uart_putc(c);} 
....................    void debug_display_ram(unsigned int8 len, unsigned int8 *ptr) { 
....................       unsigned int8 max=16; 
....................       debug_usb(debug_putc,"[%U - ",len); 
....................       //if (max>len) {max=len;} 
....................       max = len; 
....................       while(max--) { 
....................          debug_usb(debug_putc,"%02X",*ptr); 
....................          len--; 
....................          ptr++; 
....................       } 
....................       if (len) {debug_usb(debug_putc,"...");} 
....................       debug_usb(debug_putc,"] "); 
....................    } 
....................     
.................... #else 
....................    #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
....................    #define debug_putc(c) 
....................    #define debug_display_ram(x,y) 
.................... #endif 
....................  
.................... #include "usb.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16F_USB_H__) 
....................  #include <pic16f_usb.c> 
.................... #endif 
....................  
.................... //#if defined(__PIC18_USB_H__) 
....................  #include "pic18_usb.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// July 9th, 2012:                                                 //// 
.................... ////  Removed the clearing of the UOWN bit inside token done ISR     //// 
.................... ////     for non-setup packets on endpoint 0 or all other            //// 
.................... ////     endpoints.  This really only affects people using           //// 
.................... ////     usb_put_packet() or usb_get_packet() inside of other        //// 
.................... ////     interrupts.                                                 //// 
.................... ////                                                                 //// 
.................... //// Sep 22, 2011:                                                   //// 
.................... ////  Added USB_NO_ISR_PREPROCESSOR.  This is a rarely used option   //// 
.................... ////     primarily developed for users developing code where         //// 
.................... ////     usb_isr() is called by a #int_global instead of #int_usb.   //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// Oct 15th, 2010:                                                 //// 
.................... ////  Added initial 18F47J53 family support.                         //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts     //// 
.................... ////     will not be used.  usb_task() must be called periodically   //// 
.................... ////     in your main loop.  If it is not called faster than once    //// 
.................... ////     per millisecond, USB may not work.                          //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #bit USBIE=getenv("BIT:USBIE") 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F45K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F25K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F24K50")) 
....................  #define __USB_45K50__ 
....................  #define USB_TOTAL_RAM_SPACE  1024 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16  
....................  #define USB_PIC_NO_USB_GPIO  //D+ and D- are not shared with any GPIO 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || \ 
....................        (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................  #define __USB_K50__ //backwards compatability 
....................  #define __USB_14K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F26J53") || (getenv("DEVICE")=="PIC18F27J53") || \ 
....................        (getenv("DEVICE")=="PIC18F46J53") || (getenv("DEVICE")=="PIC18F47J53") \ 
....................        ) 
....................  #define __USB_18FJ53__ 
....................  #define USB_TOTAL_RAM_SPACE  (0xE00) //0x000:0xDFF.  save 0x00:0xFF for compiler use 
....................  #define USB_BDT_START  0xD00 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if !defined(USB_BDT_START) 
.................... #define USB_BDT_START   USB_RAM_START 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if defined(USB_RAM_START) 
....................    #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
.................... #else 
....................    #if (USB_DATA_BUFFER_NEEDED > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying to use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #if defined(USB_RAM_START) 
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
.................... #else 
.................... #define USB_DATA_BUFFER_LOCATION ((int8*)&g_USBRAM) 
.................... #endif 
....................  
.................... typedef struct 
.................... { 
....................    unsigned int8 stat; 
....................    unsigned int8 cnt; 
....................    unsigned int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... #if defined(USB_RAM_START) 
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
.................... #define g_USBBDT g_USBRAM.bd 
.................... #else 
.................... struct 
.................... { 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... struct 
.................... { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
.................... } g_USBBDT[USB_LAST_DEFINED_ENDPOINT+1]; 
.................... #locate g_USBBDT=USB_BDT_START 
.................... #endif 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    unsigned int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_14K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #elif defined(__USB_18FJ53__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #else 
....................    #byte UFRML = getenv("SFR:UFRML") 
....................    #byte UFRMH = getenv("SFR:UFRMH") 
....................    #byte UIR = getenv("SFR:UIR") 
....................    #byte UIE = getenv("SFR:UIE") 
....................    #byte UEIR = getenv("SFR:UEIR") 
....................    #byte UEIE = getenv("SFR:UEIE") 
....................    #byte U1STAT = getenv("SFR:USTAT") 
....................    #byte UCON = getenv("SFR:UCON") 
....................    #byte UADDR = getenv("SFR:UADDR") 
....................    #byte UCFG = getenv("SFR:UCFG") 
.................... #endif 
....................  
.................... unsigned int8 USTATCopy; 
....................  
.................... unsigned int8 g_UEP[USB_NUM_UEP]; 
.................... #if defined(UEP0_LOC) 
.................... #locate g_UEP=UEP0_LOC 
.................... #else 
.................... #locate g_UEP=getenv("SFR:UEP0") 
.................... #endif 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBBDT[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBBDT[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBBDT[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBBDT[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBBDT[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBBDT[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_14K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... unsigned int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... #if defined(USB_ISR_POLLING) 
.................... void usb_isr(void); 
.................... #endif 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
10E0:  CLRF   03
10E2:  MOVLB  1
10E4:  MOVF   xFE,W
10E6:  ADDLW  70
10E8:  MOVWF  FE9
10EA:  MOVLW  0F
10EC:  ADDWFC 03,W
10EE:  MOVWF  FEA
10F0:  MOVF   FEF,F
10F2:  BZ    1132
10F4:  CLRF   16
10F6:  BTFSC  FF2.7
10F8:  BSF    16.7
10FA:  BCF    FF2.7
10FC:  MOVLB  2
10FE:  CLRF   x30
1100:  MOVFF  1FE,22F
1104:  CLRF   x32
1106:  MOVLW  08
1108:  MOVWF  x31
110A:  MOVLB  0
110C:  CALL   02AC
1110:  BTFSC  16.7
1112:  BSF    FF2.7
1114:  MOVFF  02,201
1118:  MOVFF  01,200
111C:  MOVLB  2
111E:  MOVFF  01,FE9
1122:  MOVLW  04
1124:  ADDWF  02,W
1126:  MOVWF  FEA
1128:  MOVFF  FEF,202
112C:  BTFSS  x02.7
112E:  BRA    1136
1130:  MOVLB  1
1132:  MOVLW  00
1134:  BRA    113A
1136:  MOVLW  01
1138:  MOVLB  1
113A:  MOVWF  01
113C:  MOVLB  0
113E:  GOTO   2784 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
0C78:  CLRF   03
0C7A:  MOVLB  2
0C7C:  MOVF   x2A,W
0C7E:  ADDLW  70
0C80:  MOVWF  FE9
0C82:  MOVLW  0F
0C84:  ADDWFC 03,W
0C86:  MOVWF  FEA
0C88:  MOVF   FEF,F
0C8A:  BZ    0CC2
0C8C:  CLRF   x30
0C8E:  MOVFF  22A,22F
0C92:  CLRF   x32
0C94:  MOVLW  08
0C96:  MOVWF  x31
0C98:  MOVLB  0
0C9A:  CALL   02AC
0C9E:  MOVFF  02,22C
0CA2:  MOVFF  01,22B
0CA6:  MOVLW  04
0CA8:  MOVLB  2
0CAA:  ADDWF  x2B,F
0CAC:  MOVLW  00
0CAE:  ADDWFC x2C,F
0CB0:  MOVFF  22B,FE9
0CB4:  MOVLW  04
0CB6:  ADDWF  x2C,W
0CB8:  MOVWF  FEA
0CBA:  MOVFF  FEF,22D
0CBE:  BTFSS  x2D.7
0CC0:  BRA    0CC6
0CC2:  MOVLW  00
0CC4:  BRA    0CC8
0CC6:  MOVLW  01
0CC8:  MOVWF  01
0CCA:  MOVLB  0
0CCC:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
0FBE:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
0FC0:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0FC2:  MOVLW  08
0FC4:  MOVWF  F6F
....................  
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_14K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #elif !defined(USB_PIC_NO_USB_GPIO) 
....................    set_tris_c(get_tris_c() | 0x30); //pin_c4 and pin_c5 
0FC6:  MOVF   F94,W
0FC8:  IORLW  30
0FCA:  MOVLB  1
0FCC:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
0FCE:  CLRF   1F
0FD0:  CLRF   16
0FD2:  BTFSC  FF2.7
0FD4:  BSF    16.7
0FD6:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
0FD8:  MOVLB  0
0FDA:  CALL   035C
0FDE:  BTFSC  16.7
0FE0:  BSF    FF2.7
0FE2:  GOTO   0FE8 (RETURN)
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
*
1092:  CLRF   16
1094:  BTFSC  FF2.7
1096:  BSF    16.7
1098:  BCF    FF2.7
.................... { 
....................    usb_token_reset(); 
109A:  CALL   035C
109E:  BTFSC  16.7
10A0:  BSF    FF2.7
....................    UCON = 0; 
10A2:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
10A4:  MOVLW  14
10A6:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
10A8:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
10AA:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
10AC:  MOVLW  01
10AE:  MOVWF  1F
10B0:  GOTO   10BA (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
0FE6:  BRA    0FBE
0FE8:  GOTO   274A (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................   #if defined(USB_ISR_POLLING) 
....................    if (interrupt_active(INT_USB)) 
....................    { 
....................       usb_isr(); 
....................    } 
....................   #endif 
....................  
....................   #if defined(USB_CDC_DELAYED_FLUSH) 
....................    if (usb_enumerated()) 
....................    { 
....................       usb_cdc_flush_out_buffer(); 
....................    } 
....................   #endif 
....................  
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
10B4:  BTFSC  F6D.3
10B6:  BRA    10BA
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
10B8:  BRA    1092
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
10BA:  DECFSZ 1F,W
10BC:  BRA    10D4
10BE:  BTFSC  F6D.5
10C0:  BRA    10D4
....................    { 
....................       UIR=0; 
10C2:  CLRF   F68
....................       UIE=0; 
10C4:  CLRF   F69
....................      #if !defined(USB_ISR_POLLING) 
....................       enable_interrupts(INT_USB); 
10C6:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
10C8:  MOVLW  C0
10CA:  IORWF  FF2,F
....................      #endif 
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
10CC:  MOVLW  11
10CE:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
10D0:  MOVLW  02
10D2:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
10D4:  GOTO   2770 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
....................  
....................    do  
....................    { 
....................       usb_task(); 
....................    } while (usb_state != USB_STATE_POWERED); 
.................... } 
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0CCE:  MOVFF  225,22A
0CD2:  RCALL  0C78
0CD4:  MOVF   01,F
0CD6:  BTFSC  FD8.2
0CD8:  BRA    0DE8
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0CDA:  MOVLB  2
0CDC:  CLRF   x30
0CDE:  MOVFF  225,22F
0CE2:  CLRF   x32
0CE4:  MOVLW  08
0CE6:  MOVWF  x31
0CE8:  MOVLB  0
0CEA:  CALL   02AC
0CEE:  MOVFF  02,22B
0CF2:  MOVFF  01,22A
0CF6:  MOVLW  04
0CF8:  MOVLB  2
0CFA:  ADDWF  x2A,F
0CFC:  MOVLW  00
0CFE:  ADDWFC x2B,F
0D00:  MOVLW  01
0D02:  ADDWF  x2A,W
0D04:  MOVWF  01
0D06:  MOVLW  00
0D08:  ADDWFC x2B,W
0D0A:  MOVWF  03
0D0C:  MOVFF  01,FE9
0D10:  MOVLW  04
0D12:  ADDWF  03,W
0D14:  MOVWF  FEA
0D16:  MOVFF  226,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0D1A:  MOVF   x28,W
0D1C:  SUBLW  02
0D1E:  BNZ   0D60
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0D20:  CLRF   x30
0D22:  MOVFF  225,22F
0D26:  CLRF   x32
0D28:  MOVLW  08
0D2A:  MOVWF  x31
0D2C:  MOVLB  0
0D2E:  CALL   02AC
0D32:  MOVFF  02,22B
0D36:  MOVFF  01,22A
0D3A:  MOVLW  04
0D3C:  MOVLB  2
0D3E:  ADDWF  x2A,F
0D40:  MOVLW  00
0D42:  ADDWFC x2B,F
0D44:  MOVFF  22A,FE9
0D48:  MOVLW  04
0D4A:  ADDWF  x2B,W
0D4C:  MOVWF  FEA
0D4E:  MOVFF  FEF,229
....................          if (bit_test(i,6)) 
0D52:  BTFSS  x29.6
0D54:  BRA    0D5A
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0D56:  CLRF   x28
0D58:  BRA    0D5E
....................          else 
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0D5A:  MOVLW  01
0D5C:  MOVWF  x28
....................       } 
0D5E:  BRA    0D94
....................       else if (tgl == USB_DTS_USERX)  
0D60:  MOVF   x28,W
0D62:  SUBLW  04
0D64:  BNZ   0D94
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0D66:  CLRF   x30
0D68:  MOVFF  225,22F
0D6C:  CLRF   x32
0D6E:  MOVLW  08
0D70:  MOVWF  x31
0D72:  MOVLB  0
0D74:  CALL   02AC
0D78:  MOVLB  2
0D7A:  MOVFF  01,FE9
0D7E:  MOVLW  04
0D80:  ADDWF  02,W
0D82:  MOVWF  FEA
0D84:  MOVFF  FEF,229
....................          if (bit_test(i,6)) 
0D88:  BTFSS  x29.6
0D8A:  BRA    0D92
....................             tgl = USB_DTS_DATA1; 
0D8C:  MOVLW  01
0D8E:  MOVWF  x28
0D90:  BRA    0D94
....................          else 
....................             tgl = USB_DTS_DATA0; 
0D92:  CLRF   x28
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0D94:  DECFSZ x28,W
0D96:  BRA    0D9E
....................          i=0xC8;  //DATA1, UOWN 
0D98:  MOVLW  C8
0D9A:  MOVWF  x29
0D9C:  BRA    0DA2
....................       else //if (tgl == USB_DTS_DATA0)  
....................          i=0x88; //DATA0, UOWN 
0D9E:  MOVLW  88
0DA0:  MOVWF  x29
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0DA2:  BTFSS  x27.0
0DA4:  BRA    0DA8
0DA6:  BSF    x29.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0DA8:  BTFSS  x27.1
0DAA:  BRA    0DAE
0DAC:  BSF    x29.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0DAE:  CLRF   x30
0DB0:  MOVFF  225,22F
0DB4:  CLRF   x32
0DB6:  MOVLW  08
0DB8:  MOVWF  x31
0DBA:  MOVLB  0
0DBC:  CALL   02AC
0DC0:  MOVFF  02,22B
0DC4:  MOVFF  01,22A
0DC8:  MOVLW  04
0DCA:  MOVLB  2
0DCC:  ADDWF  x2A,F
0DCE:  MOVLW  00
0DD0:  ADDWFC x2B,F
0DD2:  MOVFF  22A,FE9
0DD6:  MOVLW  04
0DD8:  ADDWF  x2B,W
0DDA:  MOVWF  FEA
0DDC:  MOVFF  229,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0DE0:  MOVLW  01
0DE2:  MOVWF  01
0DE4:  BRA    0DEE
....................    } 
0DE6:  MOVLB  0
....................    else  
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0DE8:  MOVLW  00
0DEA:  MOVWF  01
0DEC:  MOVLB  2
0DEE:  MOVLB  0
0DF0:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl)  
*
14C2:  CLRF   16
14C4:  BTFSC  FF2.7
14C6:  BSF    16.7
14C8:  BCF    FF2.7
.................... { 
....................    unsigned int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
14CA:  MOVFF  20C,22A
14CE:  CALL   0C78
14D2:  BTFSC  16.7
14D4:  BSF    FF2.7
14D6:  MOVF   01,F
14D8:  BZ    1582
14DA:  CLRF   16
14DC:  BTFSC  FF2.7
14DE:  BSF    16.7
14E0:  BCF    FF2.7
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
14E2:  MOVLB  2
14E4:  CLRF   x30
14E6:  MOVFF  20C,22F
14EA:  CLRF   x32
14EC:  MOVLW  08
14EE:  MOVWF  x31
14F0:  MOVLB  0
14F2:  CALL   02AC
14F6:  BTFSC  16.7
14F8:  BSF    FF2.7
14FA:  MOVFF  02,215
14FE:  MOVFF  01,214
1502:  MOVLW  04
1504:  MOVLB  2
1506:  ADDWF  x14,F
1508:  MOVLW  00
150A:  ADDWFC x15,F
150C:  MOVLW  02
150E:  ADDWF  x14,W
1510:  MOVWF  01
1512:  MOVLW  00
1514:  ADDWFC x15,W
1516:  MOVWF  03
1518:  MOVFF  01,FE9
151C:  MOVLW  04
151E:  ADDWF  03,W
1520:  MOVWF  FEA
1522:  MOVFF  FEC,213
1526:  MOVF   FED,F
1528:  MOVFF  FEF,212
....................       memcpy(buff_add, ptr, len);      
152C:  MOVFF  213,FEA
1530:  MOVFF  212,FE9
1534:  MOVFF  20E,FE2
1538:  MOVFF  20D,FE1
153C:  MOVFF  210,02
1540:  MOVFF  20F,01
1544:  MOVF   01,F
1546:  BZ    154C
1548:  INCF   02,F
154A:  BRA    1550
154C:  MOVF   02,F
154E:  BZ    155C
1550:  MOVFF  FE6,FEE
1554:  DECFSZ 01,F
1556:  BRA    1550
1558:  DECFSZ 02,F
155A:  BRA    1550
155C:  CLRF   16
155E:  BTFSC  FF2.7
1560:  BSF    16.7
1562:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
1564:  MOVFF  20C,225
1568:  MOVFF  210,227
156C:  MOVFF  20F,226
1570:  MOVFF  211,228
1574:  MOVLB  0
1576:  CALL   0CCE
157A:  BTFSC  16.7
157C:  BSF    FF2.7
157E:  MOVF   01,W
1580:  BRA    1586
....................    } 
....................    else  
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
1582:  MOVLW  00
1584:  MOVWF  01
1586:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0B6E:  MOVLB  2
0B70:  CLRF   x30
0B72:  MOVFF  225,22F
0B76:  CLRF   x32
0B78:  MOVLW  08
0B7A:  MOVWF  x31
0B7C:  MOVLB  0
0B7E:  CALL   02AC
0B82:  MOVLB  2
0B84:  MOVFF  01,FE9
0B88:  MOVLW  04
0B8A:  ADDWF  02,W
0B8C:  MOVWF  FEA
0B8E:  MOVFF  FEF,227
....................    if (tgl == USB_DTS_TOGGLE)  
0B92:  MOVF   x26,W
0B94:  SUBLW  02
0B96:  BNZ   0BA4
....................    { 
....................       if (bit_test(i,6)) 
0B98:  BTFSS  x27.6
0B9A:  BRA    0BA0
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0B9C:  CLRF   x26
0B9E:  BRA    0BA4
....................       else 
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0BA0:  MOVLW  01
0BA2:  MOVWF  x26
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0BA4:  MOVF   x26,W
0BA6:  SUBLW  03
0BA8:  BNZ   0BE2
....................    { 
....................       i = 0x84; 
0BAA:  MOVLW  84
0BAC:  MOVWF  x27
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0BAE:  CLRF   x30
0BB0:  MOVFF  225,22F
0BB4:  CLRF   x32
0BB6:  MOVLW  08
0BB8:  MOVWF  x31
0BBA:  MOVLB  0
0BBC:  CALL   02AC
0BC0:  MOVFF  02,22B
0BC4:  MOVFF  01,22A
0BC8:  MOVLW  04
0BCA:  MOVLB  2
0BCC:  ADDWF  x2A,F
0BCE:  MOVLW  00
0BD0:  ADDWFC x2B,F
0BD2:  MOVFF  22A,FE9
0BD6:  MOVLW  04
0BD8:  ADDWF  x2B,W
0BDA:  MOVWF  FEA
0BDC:  MOVLW  84
0BDE:  MOVWF  FEF
....................    } 
0BE0:  BRA    0BF0
....................    else if (tgl == USB_DTS_DATA1) 
0BE2:  DECFSZ x26,W
0BE4:  BRA    0BEC
....................       i = 0xC8;  //DATA1, UOWN 
0BE6:  MOVLW  C8
0BE8:  MOVWF  x27
0BEA:  BRA    0BF0
....................    else //if (tgl == USB_DTS_DATA0)  
....................       i = 0x88; //DATA0, UOWN 
0BEC:  MOVLW  88
0BEE:  MOVWF  x27
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0BF0:  BCF    FD8.0
0BF2:  RLCF   x25,W
0BF4:  CLRF   03
0BF6:  MOVFF  FF2,22A
0BFA:  BCF    FF2.7
0BFC:  MOVLB  0
0BFE:  CALL   00B6
0C02:  TBLRD*+
0C04:  MOVFF  FF5,03
0C08:  MOVLB  2
0C0A:  BTFSC  x2A.7
0C0C:  BSF    FF2.7
0C0E:  MOVWF  x28
0C10:  MOVFF  03,229
....................    EP_BDxCNT_O(endpoint) = len; 
0C14:  CLRF   x30
0C16:  MOVFF  225,22F
0C1A:  CLRF   x32
0C1C:  MOVLW  08
0C1E:  MOVWF  x31
0C20:  MOVLB  0
0C22:  CALL   02AC
0C26:  MOVFF  01,22A
0C2A:  MOVLW  01
0C2C:  MOVLB  2
0C2E:  ADDWF  01,W
0C30:  MOVWF  01
0C32:  MOVLW  00
0C34:  ADDWFC 02,W
0C36:  MOVWF  03
0C38:  MOVFF  01,FE9
0C3C:  MOVLW  04
0C3E:  ADDWF  03,W
0C40:  MOVWF  FEA
0C42:  MOVFF  228,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
0C46:  BTFSS  x29.0
0C48:  BRA    0C4C
0C4A:  BSF    x27.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
0C4C:  BTFSS  x29.1
0C4E:  BRA    0C52
0C50:  BSF    x27.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
0C52:  CLRF   x30
0C54:  MOVFF  225,22F
0C58:  CLRF   x32
0C5A:  MOVLW  08
0C5C:  MOVWF  x31
0C5E:  MOVLB  0
0C60:  CALL   02AC
0C64:  MOVLB  2
0C66:  MOVFF  01,FE9
0C6A:  MOVLW  04
0C6C:  ADDWF  02,W
0C6E:  MOVWF  FEA
0C70:  MOVFF  227,FEF
0C74:  MOVLB  0
0C76:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... unsigned int16 usb_rx_packet_size(unsigned int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
*
1142:  CLRF   16
1144:  BTFSC  FF2.7
1146:  BSF    16.7
1148:  BCF    FF2.7
.................... { 
....................    unsigned int8 * al; 
....................    unsigned int8 st; 
....................    unsigned int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
114A:  MOVLB  2
114C:  CLRF   x30
114E:  MOVFF  20B,22F
1152:  CLRF   x32
1154:  MOVLW  08
1156:  MOVWF  x31
1158:  MOVLB  0
115A:  CALL   02AC
115E:  BTFSC  16.7
1160:  BSF    FF2.7
1162:  MOVFF  01,215
1166:  MOVLW  02
1168:  MOVLB  2
116A:  ADDWF  01,W
116C:  MOVWF  01
116E:  MOVLW  00
1170:  ADDWFC 02,W
1172:  MOVWF  03
1174:  MOVFF  01,FE9
1178:  MOVLW  04
117A:  ADDWF  03,W
117C:  MOVWF  FEA
117E:  MOVFF  FEC,211
1182:  MOVF   FED,F
1184:  MOVFF  FEF,210
1188:  CLRF   16
118A:  BTFSC  FF2.7
118C:  BSF    16.7
118E:  BCF    FF2.7
....................    i = EP_BDxCNT_O(endpoint); 
1190:  CLRF   x30
1192:  MOVFF  20B,22F
1196:  CLRF   x32
1198:  MOVLW  08
119A:  MOVWF  x31
119C:  MOVLB  0
119E:  CALL   02AC
11A2:  BTFSC  16.7
11A4:  BSF    FF2.7
11A6:  MOVFF  01,215
11AA:  MOVLW  01
11AC:  MOVLB  2
11AE:  ADDWF  01,W
11B0:  MOVWF  01
11B2:  MOVLW  00
11B4:  ADDWFC 02,W
11B6:  MOVWF  03
11B8:  MOVFF  01,FE9
11BC:  MOVLW  04
11BE:  ADDWF  03,W
11C0:  MOVWF  FEA
11C2:  CLRF   x14
11C4:  MOVFF  FEF,213
11C8:  CLRF   16
11CA:  BTFSC  FF2.7
11CC:  BSF    16.7
11CE:  BCF    FF2.7
....................    st = EP_BDxST_O(endpoint); 
11D0:  CLRF   x30
11D2:  MOVFF  20B,22F
11D6:  CLRF   x32
11D8:  MOVLW  08
11DA:  MOVWF  x31
11DC:  MOVLB  0
11DE:  CALL   02AC
11E2:  BTFSC  16.7
11E4:  BSF    FF2.7
11E6:  MOVLB  2
11E8:  MOVFF  01,FE9
11EC:  MOVLW  04
11EE:  ADDWF  02,W
11F0:  MOVWF  FEA
11F2:  MOVFF  FEF,212
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
11F6:  BTFSS  x12.0
11F8:  BRA    11FC
11FA:  BSF    x14.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
11FC:  BTFSS  x12.1
11FE:  BRA    1202
1200:  BSF    x14.1
....................  
....................    if (i < max) {max = i;} 
1202:  MOVF   x14,W
1204:  SUBWF  x0F,W
1206:  BNC   1218
1208:  BNZ   1210
120A:  MOVF   x0E,W
120C:  SUBWF  x13,W
120E:  BC    1218
1210:  MOVFF  214,20F
1214:  MOVFF  213,20E
....................     
....................    memcpy(ptr, al ,max); 
1218:  MOVFF  20D,FEA
121C:  MOVFF  20C,FE9
1220:  MOVFF  211,FE2
1224:  MOVFF  210,FE1
1228:  MOVFF  20F,02
122C:  MOVFF  20E,01
1230:  MOVF   01,F
1232:  BZ    1238
1234:  INCF   02,F
1236:  BRA    123C
1238:  MOVF   02,F
123A:  BZ    1248
123C:  MOVFF  FE6,FEE
1240:  DECFSZ 01,F
1242:  BRA    123C
1244:  DECFSZ 02,F
1246:  BRA    123C
....................  
....................    return(max); 
1248:  MOVFF  20E,01
124C:  MOVFF  20F,02
1250:  MOVLB  0
1252:  GOTO   126C (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1256:  MOVFF  206,20B
125A:  MOVFF  208,20D
125E:  MOVFF  207,20C
1262:  MOVFF  20A,20F
1266:  MOVFF  209,20E
126A:  BRA    1142
126C:  MOVFF  02,20A
1270:  MOVFF  01,209
1274:  CLRF   16
1276:  BTFSC  FF2.7
1278:  BSF    16.7
127A:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
127C:  MOVFF  206,225
1280:  MOVLW  02
1282:  MOVLB  2
1284:  MOVWF  x26
1286:  MOVLB  0
1288:  RCALL  0B6E
128A:  BTFSC  16.7
128C:  BSF    FF2.7
....................  
....................    return(max); 
128E:  MOVLB  2
1290:  MOVFF  209,01
1294:  MOVFF  20A,02
1298:  MOVLB  0
129A:  GOTO   24C6 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
09E8:  MOVLB  2
09EA:  BCF    x26.0
09EC:  BTFSC  x25.7
09EE:  BSF    x26.0
....................    endpoint &= 0x7F; 
09F0:  BCF    x25.7
....................     
....................    if (direction)  
09F2:  BTFSS  x26.0
09F4:  BRA    0A28
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
09F6:  CLRF   x30
09F8:  MOVFF  225,22F
09FC:  CLRF   x32
09FE:  MOVLW  08
0A00:  MOVWF  x31
0A02:  MOVLB  0
0A04:  RCALL  02AC
0A06:  MOVFF  02,228
0A0A:  MOVFF  01,227
0A0E:  MOVLW  04
0A10:  MOVLB  2
0A12:  ADDWF  x27,F
0A14:  MOVLW  00
0A16:  ADDWFC x28,F
0A18:  MOVFF  227,FE9
0A1C:  MOVLW  04
0A1E:  ADDWF  x28,W
0A20:  MOVWF  FEA
0A22:  MOVLW  84
0A24:  MOVWF  FEF
....................    } 
0A26:  BRA    0A48
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0A28:  CLRF   x30
0A2A:  MOVFF  225,22F
0A2E:  CLRF   x32
0A30:  MOVLW  08
0A32:  MOVWF  x31
0A34:  MOVLB  0
0A36:  RCALL  02AC
0A38:  MOVLB  2
0A3A:  MOVFF  01,FE9
0A3E:  MOVLW  04
0A40:  ADDWF  02,W
0A42:  MOVWF  FEA
0A44:  MOVLW  84
0A46:  MOVWF  FEF
....................    } 
0A48:  MOVLB  0
0A4A:  GOTO   0AFA (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0984:  MOVLB  2
0986:  BCF    x26.0
0988:  BTFSC  x25.7
098A:  BSF    x26.0
....................    endpoint &= 0x7F; 
098C:  BCF    x25.7
....................     
....................    if (direction)  
098E:  BTFSS  x26.0
0990:  BRA    09C4
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
0992:  CLRF   x30
0994:  MOVFF  225,22F
0998:  CLRF   x32
099A:  MOVLW  08
099C:  MOVWF  x31
099E:  MOVLB  0
09A0:  RCALL  02AC
09A2:  MOVFF  02,228
09A6:  MOVFF  01,227
09AA:  MOVLW  04
09AC:  MOVLB  2
09AE:  ADDWF  x27,F
09B0:  MOVLW  00
09B2:  ADDWFC x28,F
09B4:  MOVFF  227,FE9
09B8:  MOVLW  04
09BA:  ADDWF  x28,W
09BC:  MOVWF  FEA
09BE:  MOVLW  88
09C0:  MOVWF  FEF
....................      #endif 
....................    } 
09C2:  BRA    09E2
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
09C4:  CLRF   x30
09C6:  MOVFF  225,22F
09CA:  CLRF   x32
09CC:  MOVLW  08
09CE:  MOVWF  x31
09D0:  MOVLB  0
09D2:  RCALL  02AC
09D4:  MOVLB  2
09D6:  MOVFF  01,FE9
09DA:  MOVLW  04
09DC:  ADDWF  02,W
09DE:  MOVWF  FEA
09E0:  CLRF   FEF
....................    } 
09E2:  MOVLB  0
09E4:  GOTO   0AEA (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    unsigned int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0A4E:  MOVLB  2
0A50:  BCF    x26.0
0A52:  BTFSC  x25.7
0A54:  BSF    x26.0
....................    endpoint &= 0x7F; 
0A56:  BCF    x25.7
....................     
....................    if (direction)  
0A58:  BTFSS  x26.0
0A5A:  BRA    0A8E
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0A5C:  CLRF   x30
0A5E:  MOVFF  225,22F
0A62:  CLRF   x32
0A64:  MOVLW  08
0A66:  MOVWF  x31
0A68:  MOVLB  0
0A6A:  RCALL  02AC
0A6C:  MOVFF  02,229
0A70:  MOVFF  01,228
0A74:  MOVLW  04
0A76:  MOVLB  2
0A78:  ADDWF  x28,F
0A7A:  MOVLW  00
0A7C:  ADDWFC x29,F
0A7E:  MOVFF  228,FE9
0A82:  MOVLW  04
0A84:  ADDWF  x29,W
0A86:  MOVWF  FEA
0A88:  MOVFF  FEF,227
....................    } 
0A8C:  BRA    0AAE
....................    else  
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0A8E:  CLRF   x30
0A90:  MOVFF  225,22F
0A94:  CLRF   x32
0A96:  MOVLW  08
0A98:  MOVWF  x31
0A9A:  MOVLB  0
0A9C:  RCALL  02AC
0A9E:  MOVLB  2
0AA0:  MOVFF  01,FE9
0AA4:  MOVLW  04
0AA6:  ADDWF  02,W
0AA8:  MOVWF  FEA
0AAA:  MOVFF  FEF,227
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0AAE:  BTFSS  x27.7
0AB0:  BRA    0AB6
0AB2:  BTFSC  x27.2
0AB4:  BRA    0ABA
0AB6:  MOVLW  00
0AB8:  BRA    0ABC
0ABA:  MOVLW  01
0ABC:  MOVWF  01
0ABE:  MOVLB  0
0AC0:  GOTO   0B12 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(unsigned int8 address)  
.................... { 
....................    UADDR = address; 
*
0DFC:  MOVFF  226,F6E
....................     
....................    if (address)  
0E00:  MOVLB  2
0E02:  MOVF   x26,F
0E04:  BZ    0E0C
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0E06:  MOVLW  04
0E08:  MOVWF  1F
....................    } 
0E0A:  BRA    0E10
....................    else  
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0E0C:  MOVLW  02
0E0E:  MOVWF  1F
....................    } 
0E10:  MOVLB  0
0E12:  GOTO   0E20 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(unsigned int8 config)  
.................... { 
....................    unsigned int8 en; 
....................    unsigned int16 addy; 
....................    unsigned int8 new_uep; 
....................    unsigned int16 len; 
....................    unsigned int8 i; 
....................     
....................    if (config == 0) 
*
05FA:  MOVLB  2
05FC:  MOVF   x25,F
05FE:  BNZ   060C
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0600:  MOVLW  04
0602:  MOVWF  1F
....................       usb_disable_endpoints(); 
0604:  MOVLB  0
0606:  RCALL  033E
....................    } 
0608:  BRA    080E
060A:  MOVLB  2
....................    else  
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
060C:  MOVLW  05
060E:  MOVWF  1F
....................       addy = (unsigned int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0610:  MOVLW  04
0612:  MOVWF  x28
0614:  MOVLW  90
0616:  MOVWF  x27
....................       for (en=1; en<USB_NUM_UEP; en++)  
0618:  MOVLW  01
061A:  MOVWF  x26
061C:  MOVF   x26,W
061E:  SUBLW  0F
0620:  BTFSS  FD8.0
0622:  BRA    080E
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
0624:  MOVFF  226,22E
0628:  MOVLB  0
062A:  RCALL  02CE
....................          new_uep = 0; 
062C:  MOVLB  2
062E:  CLRF   x29
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
0630:  CLRF   03
0632:  MOVF   x26,W
0634:  MOVFF  FF2,22D
0638:  BCF    FF2.7
063A:  MOVLB  0
063C:  RCALL  0096
063E:  MOVLB  2
0640:  BTFSC  x2D.7
0642:  BSF    FF2.7
0644:  SUBLW  FF
0646:  BZ    0726
....................          { 
....................             new_uep = 0x04; 
0648:  MOVLW  04
064A:  MOVWF  x29
....................             len = usb_ep_rx_size[en]; 
064C:  BCF    FD8.0
064E:  RLCF   x26,W
0650:  CLRF   03
0652:  MOVFF  FF2,22D
0656:  BCF    FF2.7
0658:  MOVLB  0
065A:  RCALL  00B6
065C:  TBLRD*+
065E:  MOVFF  FF5,03
0662:  MOVLB  2
0664:  BTFSC  x2D.7
0666:  BSF    FF2.7
0668:  MOVWF  x2A
066A:  MOVFF  03,22B
....................             EP_BDxCNT_O(en) = len; 
066E:  CLRF   x30
0670:  MOVFF  226,22F
0674:  CLRF   x32
0676:  MOVLW  08
0678:  MOVWF  x31
067A:  MOVLB  0
067C:  RCALL  02AC
067E:  MOVFF  01,22D
0682:  MOVLW  01
0684:  MOVLB  2
0686:  ADDWF  01,W
0688:  MOVWF  01
068A:  MOVLW  00
068C:  ADDWFC 02,W
068E:  MOVWF  03
0690:  MOVFF  01,FE9
0694:  MOVLW  04
0696:  ADDWF  03,W
0698:  MOVWF  FEA
069A:  MOVFF  22A,FEF
....................             EP_BDxADR_O(en) = addy; 
069E:  CLRF   x30
06A0:  MOVFF  226,22F
06A4:  CLRF   x32
06A6:  MOVLW  08
06A8:  MOVWF  x31
06AA:  MOVLB  0
06AC:  RCALL  02AC
06AE:  MOVFF  01,22D
06B2:  MOVLW  02
06B4:  MOVLB  2
06B6:  ADDWF  01,W
06B8:  MOVWF  01
06BA:  MOVLW  00
06BC:  ADDWFC 02,W
06BE:  MOVWF  03
06C0:  MOVFF  01,FE9
06C4:  MOVLW  04
06C6:  ADDWF  03,W
06C8:  MOVWF  FEA
06CA:  MOVFF  228,FEC
06CE:  MOVF   FED,F
06D0:  MOVFF  227,FEF
....................             addy += usb_ep_rx_size[en]; 
06D4:  BCF    FD8.0
06D6:  RLCF   x26,W
06D8:  CLRF   03
06DA:  MOVFF  FF2,22D
06DE:  BCF    FF2.7
06E0:  MOVLB  0
06E2:  RCALL  00B6
06E4:  TBLRD*+
06E6:  MOVFF  FF5,03
06EA:  MOVLB  2
06EC:  BTFSC  x2D.7
06EE:  BSF    FF2.7
06F0:  ADDWF  x27,F
06F2:  MOVF   03,W
06F4:  ADDWFC x28,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
06F6:  MOVLW  88
06F8:  MOVWF  x2C
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
06FA:  BTFSS  x2B.0
06FC:  BRA    0700
06FE:  BSF    x2C.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0700:  BTFSS  x2B.1
0702:  BRA    0706
0704:  BSF    x2C.1
....................             EP_BDxST_O(en) = i; 
0706:  CLRF   x30
0708:  MOVFF  226,22F
070C:  CLRF   x32
070E:  MOVLW  08
0710:  MOVWF  x31
0712:  MOVLB  0
0714:  RCALL  02AC
0716:  MOVLB  2
0718:  MOVFF  01,FE9
071C:  MOVLW  04
071E:  ADDWF  02,W
0720:  MOVWF  FEA
0722:  MOVFF  22C,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0726:  CLRF   03
0728:  MOVF   x26,W
072A:  MOVFF  FF2,22D
072E:  BCF    FF2.7
0730:  MOVLB  0
0732:  RCALL  0096
0734:  MOVLB  2
0736:  BTFSC  x2D.7
0738:  BSF    FF2.7
073A:  SUBLW  FF
073C:  BZ    07D4
....................          { 
....................             new_uep |= 0x02; 
073E:  BSF    x29.1
....................             EP_BDxADR_I(en) = addy; 
0740:  CLRF   x30
0742:  MOVFF  226,22F
0746:  CLRF   x32
0748:  MOVLW  08
074A:  MOVWF  x31
074C:  MOVLB  0
074E:  RCALL  02AC
0750:  MOVFF  02,22E
0754:  MOVFF  01,22D
0758:  MOVLW  04
075A:  MOVLB  2
075C:  ADDWF  x2D,F
075E:  MOVLW  00
0760:  ADDWFC x2E,F
0762:  MOVLW  02
0764:  ADDWF  x2D,W
0766:  MOVWF  01
0768:  MOVLW  00
076A:  ADDWFC x2E,W
076C:  MOVWF  03
076E:  MOVFF  01,FE9
0772:  MOVLW  04
0774:  ADDWF  03,W
0776:  MOVWF  FEA
0778:  MOVFF  228,FEC
077C:  MOVF   FED,F
077E:  MOVFF  227,FEF
....................             addy += usb_ep_tx_size[en]; 
0782:  BCF    FD8.0
0784:  RLCF   x26,W
0786:  CLRF   03
0788:  MOVFF  FF2,22D
078C:  BCF    FF2.7
078E:  MOVLB  0
0790:  RCALL  00B6
0792:  TBLRD*+
0794:  MOVFF  FF5,03
0798:  MOVLB  2
079A:  BTFSC  x2D.7
079C:  BSF    FF2.7
079E:  ADDWF  x27,F
07A0:  MOVF   03,W
07A2:  ADDWFC x28,F
....................             EP_BDxST_I(en) = 0x40; 
07A4:  CLRF   x30
07A6:  MOVFF  226,22F
07AA:  CLRF   x32
07AC:  MOVLW  08
07AE:  MOVWF  x31
07B0:  MOVLB  0
07B2:  RCALL  02AC
07B4:  MOVFF  02,22E
07B8:  MOVFF  01,22D
07BC:  MOVLW  04
07BE:  MOVLB  2
07C0:  ADDWF  x2D,F
07C2:  MOVLW  00
07C4:  ADDWFC x2E,F
07C6:  MOVFF  22D,FE9
07CA:  MOVLW  04
07CC:  ADDWF  x2E,W
07CE:  MOVWF  FEA
07D0:  MOVLW  40
07D2:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
07D4:  MOVF   x29,W
07D6:  SUBLW  06
07D8:  BNZ   07DE
07DA:  MOVLW  0E
07DC:  MOVWF  x29
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
07DE:  CLRF   03
07E0:  MOVF   x26,W
07E2:  MOVFF  FF2,22D
07E6:  BCF    FF2.7
07E8:  MOVLB  0
07EA:  RCALL  0096
07EC:  MOVLB  2
07EE:  BTFSC  x2D.7
07F0:  BSF    FF2.7
07F2:  SUBLW  01
07F4:  BZ    07F8
07F6:  BSF    x29.4
....................           
....................          UEP(en) = new_uep; 
07F8:  CLRF   03
07FA:  MOVF   x26,W
07FC:  ADDLW  70
07FE:  MOVWF  FE9
0800:  MOVLW  0F
0802:  ADDWFC 03,W
0804:  MOVWF  FEA
0806:  MOVFF  229,FEF
080A:  INCF   x26,F
080C:  BRA    061C
080E:  MOVLB  0
....................       } 
....................    } 
0810:  GOTO   08BC (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(unsigned int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
02CE:  CLRF   03
02D0:  MOVLB  2
02D2:  MOVF   x2E,W
02D4:  ADDLW  70
02D6:  MOVWF  FE9
02D8:  MOVLW  0F
02DA:  ADDWFC 03,W
02DC:  MOVWF  FEA
02DE:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
02E0:  MOVFF  22E,22F
02E4:  MOVLB  0
02E6:  RCALL  024A
02E8:  MOVF   01,F
02EA:  BZ    033C
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
02EC:  MOVLB  2
02EE:  CLRF   x30
02F0:  MOVFF  22E,22F
02F4:  CLRF   x32
02F6:  MOVLW  08
02F8:  MOVWF  x31
02FA:  MOVLB  0
02FC:  RCALL  02AC
02FE:  MOVLB  2
0300:  MOVFF  01,FE9
0304:  MOVLW  04
0306:  ADDWF  02,W
0308:  MOVWF  FEA
030A:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
030C:  CLRF   x30
030E:  MOVFF  22E,22F
0312:  CLRF   x32
0314:  MOVLW  08
0316:  MOVWF  x31
0318:  MOVLB  0
031A:  RCALL  02AC
031C:  MOVFF  02,230
0320:  MOVFF  01,22F
0324:  MOVLW  04
0326:  MOVLB  2
0328:  ADDWF  x2F,F
032A:  MOVLW  00
032C:  ADDWFC x30,F
032E:  MOVFF  22F,FE9
0332:  MOVLW  04
0334:  ADDWF  x30,W
0336:  MOVWF  FEA
0338:  CLRF   FEF
033A:  MOVLB  0
....................    } 
033C:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    unsigned int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
033E:  MOVLW  01
0340:  MOVLB  2
0342:  MOVWF  x2D
0344:  MOVF   x2D,W
0346:  SUBLW  0F
0348:  BNC   0358
....................       usb_disable_endpoint(i); 
034A:  MOVFF  22D,22E
034E:  MOVLB  0
0350:  RCALL  02CE
0352:  MOVLB  2
0354:  INCF   x2D,F
0356:  BRA    0344
0358:  MOVLB  0
035A:  RETURN 0
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
0006:  RETURN 0
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #if !defined(USB_ISR_POLLING) && !defined(USB_NO_ISR_PREPROCESSOR) 
.................... #int_usb NOCLEAR 
.................... #endif 
.................... void usb_isr(void) 
.................... { 
....................    unsigned int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0F40:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0F42:  MOVF   1F,F
0F44:  BTFSC  FD8.2
0F46:  BRA    0FBA
....................    if (UIR)  
0F48:  MOVF   F68,F
0F4A:  BTFSC  FD8.2
0F4C:  BRA    0FBA
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0F4E:  BTFSS  F68.2
0F50:  BRA    0F58
0F52:  BTFSC  F69.2
0F54:  GOTO   0204
....................  
....................       if (UCON_SUSPND) return; 
0F58:  BTFSC  F6D.1
0F5A:  BRA    0FBA
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0F5C:  BTFSS  F68.5
0F5E:  BRA    0F66
0F60:  BTFSC  F69.5
0F62:  GOTO   0234
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0F66:  BTFSS  F68.1
0F68:  BRA    0F70
0F6A:  BTFSC  F69.1
0F6C:  GOTO   0242
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0F70:  BTFSS  F68.0
0F72:  BRA    0F7A
0F74:  BTFSC  F69.0
0F76:  GOTO   0388
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0F7A:  BTFSS  F68.4
0F7C:  BRA    0F84
0F7E:  BTFSC  F69.4
0F80:  GOTO   03B2
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0F84:  BTFSS  F68.6
0F86:  BRA    0F8E
0F88:  BTFSC  F69.6
0F8A:  GOTO   03BC
....................  
....................       TRNAttempts = 0; 
0F8E:  MOVLB  2
0F90:  CLRF   x22
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0F92:  BTFSS  F68.3
0F94:  BRA    0FAA
0F96:  BTFSS  F69.3
0F98:  BRA    0FAA
....................          { 
....................             USTATCopy = U1STAT; 
0F9A:  MOVFF  F6C,1E
....................             usb_clear_trn(); 
0F9E:  MOVLB  0
0FA0:  CALL   0004
....................             usb_isr_tok_dne(); 
0FA4:  BRA    0E48
....................          } 
0FA6:  BRA    0FAE
0FA8:  MOVLB  2
....................          else 
....................             break; 
0FAA:  BRA    0FB8
0FAC:  MOVLB  0
....................       } while (TRNAttempts++ < 4); 
0FAE:  MOVLB  2
0FB0:  MOVF   x22,W
0FB2:  INCF   x22,F
0FB4:  SUBLW  03
0FB6:  BC    0F92
0FB8:  MOVLB  0
....................  
....................      #if defined(USB_CDC_ISR) 
....................       //has to be done here, can't be done until TRN is empty. 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          USB_CDC_ISR(); 
....................       } 
....................      #endif 
....................    } 
0FBA:  GOTO   0054
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
03BC:  BCF    F68.6
03BE:  GOTO   0F8E (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
0388:  CLRF   F6A
....................    UIR = 0; 
038A:  CLRF   F68
....................    UEIE = 0x9F; 
038C:  MOVLW  9F
038E:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0390:  MOVLW  3D
0392:  MOVWF  F69
....................  
....................    UADDR = 0; 
0394:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
0396:  RCALL  033E
....................     
....................    usb_token_reset(); 
0398:  RCALL  035C
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
039A:  MOVLW  16
039C:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
039E:  BTFSS  F68.3
03A0:  BRA    03A6
....................    { 
....................       usb_clear_trn(); 
03A2:  RCALL  0004
03A4:  BRA    039E
....................    } 
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
03A6:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
03A8:  RCALL  0214
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
03AA:  MOVLW  03
03AC:  MOVWF  1F
03AE:  GOTO   0F7A (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
0214:  MOVLW  40
0216:  MOVLB  4
0218:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
021A:  MOVLW  04
021C:  MOVWF  x03
021E:  MOVLW  10
0220:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
0222:  MOVLW  88
0224:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
0226:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
0228:  MOVLW  04
022A:  MOVWF  x07
022C:  MOVLW  50
022E:  MOVWF  x06
0230:  MOVLB  0
0232:  RETURN 0
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
0242:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
0244:  BCF    F68.1
0246:  GOTO   0F70 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
03B2:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
03B4:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
03B6:  BSF    F6D.1
03B8:  GOTO   0F84 (RETURN)
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
0204:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
0206:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
0208:  BTFSS  F68.2
020A:  BRA    0210
....................    { 
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
020C:  BCF    F68.2
020E:  BRA    0208
....................    } 
0210:  GOTO   0F58 (RETURN)
.................... } 
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
0234:  BTFSS  F70.0
0236:  BRA    023C
....................    { 
....................       usb_init_ep0_setup(); 
0238:  RCALL  0214
....................       bit_clear(UEP(0), 0); 
023A:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
023C:  BCF    F68.5
023E:  GOTO   0F66 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
03C2:  MOVFF  228,20
03C6:  RETURN 0
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
03C8:  SETF   20
03CA:  RETURN 0
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    unsigned int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0E48:  RRCF   1E,W
0E4A:  MOVLB  2
0E4C:  MOVWF  x23
0E4E:  RRCF   x23,F
0E50:  RRCF   x23,F
0E52:  MOVLW  1F
0E54:  ANDWF  x23,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0E56:  MOVF   1E,F
0E58:  BNZ   0EF6
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0E5A:  MOVLB  4
0E5C:  MOVF   x00,W
0E5E:  ANDLW  3C
0E60:  MOVLB  2
0E62:  MOVWF  x24
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0E64:  MOVLW  43
0E66:  MOVLB  4
0E68:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0E6A:  MOVLB  2
0E6C:  MOVF   x24,W
0E6E:  SUBLW  34
0E70:  BNZ   0EBC
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0E72:  MOVLB  4
0E74:  MOVF   x04,W
0E76:  ANDLW  80
0E78:  BZ    0E7C
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0E7A:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0E7C:  MOVLB  0
0E7E:  BRA    0B3C
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0E80:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0E82:  INCFSZ 20,W
0E84:  BRA    0E94
....................             usb_flush_out(0, USB_DTS_STALL); 
0E86:  MOVLB  2
0E88:  CLRF   x25
0E8A:  MOVLW  03
0E8C:  MOVWF  x26
0E8E:  MOVLB  0
0E90:  RCALL  0B6E
0E92:  BRA    0EB8
....................          else  
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0E94:  MOVLB  2
0E96:  CLRF   x25
0E98:  MOVLW  02
0E9A:  MOVWF  x26
0E9C:  MOVLB  0
0E9E:  RCALL  0B6E
....................             if (__setup_0_tx_size != 0xFE) 
0EA0:  MOVF   20,W
0EA2:  SUBLW  FE
0EA4:  BZ    0EB8
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0EA6:  MOVLB  2
0EA8:  CLRF   x25
0EAA:  CLRF   x27
0EAC:  MOVFF  20,226
0EB0:  MOVLW  04
0EB2:  MOVWF  x28
0EB4:  MOVLB  0
0EB6:  RCALL  0CCE
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
0EB8:  BRA    0EF2
0EBA:  MOVLB  2
....................       else if (pidKey == USB_PIC_PID_OUT)  
0EBC:  MOVF   x24,W
0EBE:  SUBLW  04
0EC0:  BNZ   0EF4
....................       { 
....................          usb_isr_tok_out_dne(0); 
0EC2:  CLRF   x25
0EC4:  MOVLB  0
0EC6:  RCALL  0DF2
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0EC8:  MOVLB  2
0ECA:  CLRF   x25
0ECC:  MOVLW  02
0ECE:  MOVWF  x26
0ED0:  MOVLB  0
0ED2:  RCALL  0B6E
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0ED4:  MOVF   20,W
0ED6:  SUBLW  FE
0ED8:  BZ    0EF2
0EDA:  INCFSZ 20,W
0EDC:  BRA    0EE0
0EDE:  BRA    0EF2
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0EE0:  MOVLB  2
0EE2:  CLRF   x25
0EE4:  CLRF   x27
0EE6:  MOVFF  20,226
0EEA:  MOVLW  01
0EEC:  MOVWF  x28
0EEE:  MOVLB  0
0EF0:  RCALL  0CCE
....................          } 
....................       } 
0EF2:  MOVLB  2
....................       else 
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
0EF4:  BRA    0F3A
....................    else if (USTATCopy == USTAT_IN_E0)  
0EF6:  MOVF   1E,W
0EF8:  SUBLW  04
0EFA:  BNZ   0F20
....................    {    
....................       //pic -> host transfer completed 
....................       //EP_BDxST_I(0) = EP_BDxST_I(0) & 0xC3;   //clear up any BDSTAL confusion 
....................       __setup_0_tx_size = 0xFF; 
0EFC:  SETF   20
....................       usb_isr_tok_in_dne(0); 
0EFE:  CLRF   x25
0F00:  MOVLB  0
0F02:  RCALL  0E24
....................       if (__setup_0_tx_size!=0xFF) 
0F04:  INCFSZ 20,W
0F06:  BRA    0F0A
0F08:  BRA    0F1C
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0F0A:  MOVLB  2
0F0C:  CLRF   x25
0F0E:  CLRF   x27
0F10:  MOVFF  20,226
0F14:  MOVLW  02
0F16:  MOVWF  x28
0F18:  MOVLB  0
0F1A:  RCALL  0CCE
....................       else 
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
0F1C:  BRA    0F38
0F1E:  MOVLB  2
....................    else  
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0F20:  BTFSC  1E.2
0F22:  BRA    0F30
....................       { 
....................          //EP_BDxST_O(en) = EP_BDxST_O(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_out_dne(en); 
0F24:  MOVFF  223,225
0F28:  MOVLB  0
0F2A:  RCALL  0DF2
....................       } 
0F2C:  BRA    0F38
0F2E:  MOVLB  2
....................       else  
....................       { 
....................          //EP_BDxST_I(en) = EP_BDxST_I(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_in_dne(en); 
0F30:  MOVFF  223,225
0F34:  MOVLB  0
0F36:  RCALL  0E24
0F38:  MOVLB  2
....................       } 
....................    } 
0F3A:  MOVLB  0
0F3C:  GOTO   0FA6 (RETURN)
.................... } 
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... //#endif 
.................... /* 
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
.................... */ 
.................... //#if (defined(USB_USE_FULL_SPEED) && (USB_USE_FULL_SPEED==1)) 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  64 
.................... /* 
.................... #else 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  8 
.................... #endif 
.................... */ 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #if USB_EP1_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #if USB_EP2_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #if USB_EP3_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #if USB_EP4_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #if USB_EP5_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #if USB_EP6_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #if USB_EP7_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #if USB_EP8_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #if USB_EP9_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #if USB_EP10_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP10_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP10_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #if USB_EP11_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #if USB_EP12_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #if USB_EP13_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #if USB_EP14_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #if USB_EP15_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... unsigned int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... unsigned int16 usb_getdesc_ptr; unsigned int16 usb_getdesc_len;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... unsigned int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
10D8:  MOVF   18,W
10DA:  MOVWF  01
10DC:  GOTO   2774 (RETURN)
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (!timeout || (to!=timeout)) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    usb_getdesc_len = 0; 
*
035C:  CLRF   25
035E:  CLRF   24
....................     
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
0360:  MOVLB  2
0362:  CLRF   x23
0364:  MOVF   x23,F
0366:  BNZ   037C
....................       USB_Interface[i] = 0;   //reset each interface to default 
0368:  CLRF   03
036A:  MOVF   x23,W
036C:  ADDLW  26
036E:  MOVWF  FE9
0370:  MOVLW  00
0372:  ADDWFC 03,W
0374:  MOVWF  FEA
0376:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
0378:  INCF   x23,F
037A:  BRA    0364
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
037C:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
037E:  MOVLW  01
0380:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
0382:  CLRF   17
0384:  MOVLB  0
0386:  RETURN 0
.................... } 
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
024A:  MOVLB  2
024C:  BCF    x30.0
024E:  BTFSC  x2F.7
0250:  BSF    x30.0
....................     
....................    endpoint &= 0x7F; 
0252:  BCF    x2F.7
....................     
....................    if (endpoint > 16) 
0254:  MOVF   x2F,W
0256:  SUBLW  10
0258:  BC    0260
....................       return(FALSE); 
025A:  MOVLW  00
025C:  MOVWF  01
025E:  BRA    02A8
....................     
....................    if (direction) { //IN 
0260:  BTFSS  x30.0
0262:  BRA    0288
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
0264:  CLRF   03
0266:  MOVF   x2F,W
0268:  MOVFF  FF2,231
026C:  BCF    FF2.7
026E:  MOVLB  0
0270:  RCALL  0096
0272:  MOVLB  2
0274:  BTFSC  x31.7
0276:  BSF    FF2.7
0278:  SUBLW  FF
027A:  BNZ   0280
027C:  MOVLW  00
027E:  BRA    0282
0280:  MOVLW  01
0282:  MOVWF  01
0284:  BRA    02A8
....................    } 
0286:  BRA    02A8
....................    else {   //OUT 
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0288:  CLRF   03
028A:  MOVF   x2F,W
028C:  MOVFF  FF2,231
0290:  BCF    FF2.7
0292:  MOVLB  0
0294:  RCALL  0096
0296:  MOVLB  2
0298:  BTFSC  x31.7
029A:  BSF    FF2.7
029C:  SUBLW  FF
029E:  BNZ   02A4
02A0:  MOVLW  00
02A2:  BRA    02A6
02A4:  MOVLW  01
02A6:  MOVWF  01
....................    } 
02A8:  MOVLB  0
02AA:  RETURN 0
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint) { 
....................    if (endpoint==0) { 
*
0E24:  MOVLB  2
0E26:  MOVF   x25,F
0E28:  BNZ   0E44
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0E2A:  DECFSZ 17,W
0E2C:  BRA    0E38
0E2E:  MOVLB  0
0E30:  CALL   03CC
0E34:  BRA    0E42
0E36:  MOVLB  2
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0E38:  MOVF   17,W
0E3A:  SUBLW  02
0E3C:  BNZ   0E44
0E3E:  MOVLB  0
0E40:  BRA    0E16
0E42:  MOVLB  2
....................    } 
....................   #if USB_CDC_DEVICE 
0E44:  MOVLB  0
0E46:  RETURN 0
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0DF2:  MOVLB  2
0DF4:  MOVF   x25,F
0DF6:  BNZ   0DF8
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
0DF8:  MOVLB  0
0DFA:  RETURN 0
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0B3C:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0B3E:  MOVLB  4
0B40:  MOVF   x10,W
0B42:  ANDLW  7F
0B44:  XORLW  00
0B46:  MOVLB  0
0B48:  BZ    0B58
0B4A:  XORLW  01
0B4C:  BZ    0B5C
0B4E:  XORLW  03
0B50:  BZ    0B60
0B52:  XORLW  23
0B54:  BZ    0B64
0B56:  BRA    0B68
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0B58:  BRA    0814
....................          break; 
0B5A:  BRA    0B6A
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0B5C:  BRA    08D0
....................          break; 
0B5E:  BRA    0B6A
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0B60:  BRA    0AC4
....................          break; 
0B62:  BRA    0B6A
....................           
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc, " class"); 
....................         #if USB_HID_DEVICE && USB_CDC_DEVICE 
....................          if (usb_ep0_rx_buffer[4] == USB_HID_INTERFACE) 
....................          { 
....................             usb_isr_tkn_setup_ClassInterface(); 
....................          } 
....................          else 
....................          { 
....................             usb_isr_tkn_cdc(); 
....................          } 
....................         #elif USB_HID_DEVICE 
....................          usb_isr_tkn_setup_ClassInterface(); 
0B64:  BRA    0B30
....................         #else 
....................          usb_isr_tkn_cdc(); 
....................         #endif 
....................          break; 
0B66:  BRA    0B6A
.................... #endif 
....................  
....................  
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0B68:  RCALL  03C8
....................          break; 
....................    } 
0B6A:  GOTO   0E80 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0814:  MOVLB  4
0816:  MOVF   x11,W
0818:  XORLW  00
081A:  MOVLB  0
081C:  BZ    0838
081E:  XORLW  01
0820:  BZ    084C
0822:  XORLW  02
0824:  BZ    0868
0826:  XORLW  06
0828:  BZ    0882
082A:  XORLW  03
082C:  BZ    0894
082E:  XORLW  0E
0830:  BZ    0898
0832:  XORLW  01
0834:  BZ    08A8
0836:  BRA    08CA
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0838:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
083C:  MOVLB  4
083E:  CLRF   x51
....................             usb_request_send_response(2); 
0840:  MOVLW  02
0842:  MOVLB  2
0844:  MOVWF  x28
0846:  MOVLB  0
0848:  RCALL  03C2
....................             break; 
084A:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
084C:  MOVLB  4
084E:  DECFSZ x12,W
0850:  BRA    0862
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
0852:  MOVLW  01
0854:  ANDWF  19,F
....................                usb_put_0len_0(); 
0856:  MOVLB  2
0858:  CLRF   x28
085A:  MOVLB  0
085C:  RCALL  03C2
....................             } 
085E:  BRA    0866
0860:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
0862:  MOVLB  0
0864:  RCALL  03C8
....................             break; 
0866:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0868:  MOVLB  4
086A:  DECFSZ x12,W
086C:  BRA    087C
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
086E:  BSF    19.1
....................                usb_put_0len_0(); 
0870:  MOVLB  2
0872:  CLRF   x28
0874:  MOVLB  0
0876:  RCALL  03C2
....................             } 
0878:  BRA    0880
087A:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
087C:  MOVLB  0
087E:  RCALL  03C8
....................             break; 
0880:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
0882:  MOVLW  02
0884:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
0886:  MOVFF  412,21
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
088A:  MOVLB  2
088C:  CLRF   x28
088E:  MOVLB  0
0890:  RCALL  03C2
....................             break; 
0892:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
0894:  RCALL  04AA
....................             break; 
0896:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
0898:  MOVFF  18,450
....................             usb_request_send_response(1); 
089C:  MOVLW  01
089E:  MOVLB  2
08A0:  MOVWF  x28
08A2:  MOVLB  0
08A4:  RCALL  03C2
....................             break; 
08A6:  BRA    08CC
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
08A8:  MOVLB  4
08AA:  MOVF   x12,W
08AC:  SUBLW  01
08AE:  BNC   08C6
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
08B0:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
08B4:  MOVFF  412,225
08B8:  MOVLB  0
08BA:  BRA    05FA
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
08BC:  MOVLB  2
08BE:  CLRF   x28
08C0:  MOVLB  0
08C2:  RCALL  03C2
08C4:  MOVLB  4
....................             } 
....................             break; 
08C6:  MOVLB  0
08C8:  BRA    08CC
....................  
....................       default: 
....................             usb_request_stall(); 
08CA:  RCALL  03C8
....................             break; 
....................    } 
08CC:  GOTO   0B6A (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    unsigned int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
08D0:  MOVFF  18,225
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
08D4:  MOVLB  4
08D6:  MOVF   x11,W
08D8:  XORLW  00
08DA:  MOVLB  0
08DC:  BZ    08EC
08DE:  XORLW  0A
08E0:  BZ    08FE
08E2:  XORLW  01
08E4:  BZ    094E
08E6:  XORLW  0D
08E8:  BZ    097A
08EA:  BRA    097E
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
08EC:  MOVLB  4
08EE:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
08F0:  CLRF   x51
....................             usb_request_send_response(2); 
08F2:  MOVLW  02
08F4:  MOVLB  2
08F6:  MOVWF  x28
08F8:  MOVLB  0
08FA:  RCALL  03C2
....................             break; 
08FC:  BRA    0980
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
08FE:  MOVLB  2
0900:  MOVF   x25,F
0902:  BZ    0948
0904:  MOVLW  01
0906:  SUBWF  x25,W
0908:  CLRF   03
090A:  MOVFF  FF2,226
090E:  BCF    FF2.7
0910:  MOVLB  0
0912:  RCALL  0186
0914:  MOVLB  2
0916:  BTFSC  x26.7
0918:  BSF    FF2.7
091A:  MOVWF  01
091C:  MOVLB  4
091E:  SUBWF  x14,W
0920:  BTFSS  FD8.0
0922:  BRA    0928
0924:  MOVLB  2
0926:  BRA    0948
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0928:  CLRF   03
092A:  MOVF   x14,W
092C:  ADDLW  26
092E:  MOVWF  FE9
0930:  MOVLW  00
0932:  ADDWFC 03,W
0934:  MOVWF  FEA
0936:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
093A:  MOVLW  01
093C:  MOVLB  2
093E:  MOVWF  x28
0940:  MOVLB  0
0942:  RCALL  03C2
....................             } 
0944:  BRA    094C
0946:  MOVLB  2
....................             else 
....................                usb_request_stall(); 
0948:  MOVLB  0
094A:  RCALL  03C8
....................             break; 
094C:  BRA    0980
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
094E:  MOVLB  2
0950:  MOVF   x25,F
0952:  BZ    0974
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0954:  CLRF   03
0956:  MOVLB  4
0958:  MOVF   x14,W
095A:  ADDLW  26
095C:  MOVWF  FE9
095E:  MOVLW  00
0960:  ADDWFC 03,W
0962:  MOVWF  FEA
0964:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0968:  MOVLB  2
096A:  CLRF   x28
096C:  MOVLB  0
096E:  RCALL  03C2
....................             } 
0970:  BRA    0978
0972:  MOVLB  2
....................             else 
....................                usb_request_stall(); 
0974:  MOVLB  0
0976:  RCALL  03C8
....................             break; 
0978:  BRA    0980
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GDh"); 
....................             usb_Get_Descriptor(); 
097A:  RCALL  04AA
....................             break; 
097C:  BRA    0980
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
097E:  RCALL  03C8
....................             break; 
....................    } 
0980:  GOTO   0B6A (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0AC4:  MOVFF  414,22F
0AC8:  CALL   024A
0ACC:  MOVF   01,F
0ACE:  BZ    0B2C
....................       switch(usb_ep0_rx_buffer[1]) { 
0AD0:  MOVLB  4
0AD2:  MOVF   x11,W
0AD4:  XORLW  01
0AD6:  MOVLB  0
0AD8:  BZ    0AE4
0ADA:  XORLW  02
0ADC:  BZ    0AF4
0ADE:  XORLW  03
0AE0:  BZ    0B04
0AE2:  BRA    0B2A
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
0AE4:  MOVFF  414,225
0AE8:  BRA    0984
....................                usb_put_0len_0(); 
0AEA:  MOVLB  2
0AEC:  CLRF   x28
0AEE:  MOVLB  0
0AF0:  RCALL  03C2
....................                break; 
0AF2:  BRA    0B2C
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
0AF4:  MOVFF  414,225
0AF8:  BRA    09E8
....................                      usb_put_0len_0(); 
0AFA:  MOVLB  2
0AFC:  CLRF   x28
0AFE:  MOVLB  0
0B00:  RCALL  03C2
....................                      break; 
0B02:  BRA    0B2C
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
0B04:  MOVLB  4
0B06:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
0B08:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
0B0A:  MOVFF  414,225
0B0E:  MOVLB  0
0B10:  BRA    0A4E
0B12:  MOVF   01,F
0B14:  BZ    0B1E
....................                   usb_ep0_tx_buffer[0]=1; 
0B16:  MOVLW  01
0B18:  MOVLB  4
0B1A:  MOVWF  x50
0B1C:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
0B1E:  MOVLW  02
0B20:  MOVLB  2
0B22:  MOVWF  x28
0B24:  MOVLB  0
0B26:  RCALL  03C2
....................                break; 
0B28:  BRA    0B2C
....................  
....................          default: 
....................             usb_request_stall(); 
0B2A:  RCALL  03C8
....................             break; 
....................       } 
....................    } 
0B2C:  GOTO   0B6A (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
0B30:  MOVLB  4
0B32:  MOVF   x11,W
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
0B34:  MOVLB  0
0B36:  RCALL  03C8
....................             break; 
....................    } 
0B38:  GOTO   0B6A (RETURN)
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
04AA:  CLRF   23
04AC:  CLRF   22
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
04AE:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
04B0:  MOVLB  4
04B2:  MOVF   x13,W
04B4:  XORLW  01
04B6:  MOVLB  0
04B8:  BZ    04CC
04BA:  XORLW  03
04BC:  BZ    04D8
04BE:  XORLW  01
04C0:  BZ    04E0
04C2:  XORLW  22
04C4:  BZ    051C
04C6:  XORLW  03
04C8:  BZ    0574
04CA:  BRA    05D6
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
04CC:  CLRF   25
04CE:  MOVLW  12
04D0:  MOVWF  24
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
04D2:  MOVLW  03
04D4:  MOVWF  1A
....................             break; 
04D6:  BRA    05DA
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
04D8:  CLRF   25
04DA:  MOVLW  29
04DC:  MOVWF  24
....................             break; 
04DE:  BRA    05DA
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
04E0:  MOVLW  02
04E2:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
04E4:  CLRF   03
04E6:  MOVLB  4
04E8:  MOVF   x12,W
04EA:  ADDLW  1B
04EC:  MOVWF  FE9
04EE:  MOVLW  00
04F0:  ADDWFC 03,W
04F2:  MOVWF  FEA
04F4:  CLRF   23
04F6:  MOVFF  FEF,22
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
04FA:  MOVFF  23,03
04FE:  MOVF   22,W
0500:  MOVFF  FF2,226
0504:  BCF    FF2.7
0506:  MOVLB  0
0508:  RCALL  01CC
050A:  MOVLB  2
050C:  BTFSC  x26.7
050E:  BSF    FF2.7
0510:  CLRF   03
0512:  MOVWF  24
0514:  MOVFF  03,25
....................             break; 
0518:  MOVLB  0
051A:  BRA    05DA
....................  
....................       //case USB_DESC_DEVICE_QUALIFIER_TYPE:   //0x06 
....................       // this is needed so host can find out about differences about this 
....................       // devices ability to handle full speed verses fast speed. 
....................       // since we don't support fast speed then we ignore this. 
....................       //      break; 
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
051C:  BCF    FD8.0
051E:  MOVLB  4
0520:  RLCF   x12,W
0522:  CLRF   03
0524:  MOVFF  FF2,226
0528:  BCF    FF2.7
052A:  MOVLB  0
052C:  RCALL  0198
052E:  TBLRD*+
0530:  MOVFF  FF5,03
0534:  MOVLB  2
0536:  BTFSC  x26.7
0538:  BSF    FF2.7
053A:  MOVWF  22
053C:  MOVFF  03,23
....................             if (usb_getdesc_ptr!=0xFF) { 
0540:  INCFSZ 22,W
0542:  BRA    0548
0544:  MOVF   23,F
0546:  BZ    056E
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0548:  MOVFF  23,03
054C:  MOVF   22,W
054E:  MOVFF  FF2,226
0552:  BCF    FF2.7
0554:  MOVLB  0
0556:  RCALL  014C
0558:  MOVLB  2
055A:  BTFSC  x26.7
055C:  BSF    FF2.7
055E:  CLRF   03
0560:  MOVWF  24
0562:  MOVFF  03,25
....................                break; 
0566:  MOVLB  0
0568:  BRA    05DA
....................             } 
056A:  BRA    0574
056C:  MOVLB  2
....................             else { 
....................                usb_request_stall(); 
056E:  MOVLB  0
0570:  RCALL  03C8
....................                return; 
0572:  BRA    05F8
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
0574:  BCF    FD8.0
0576:  MOVLB  4
0578:  RLCF   x14,W
057A:  CLRF   03
057C:  MOVFF  FF2,226
0580:  BCF    FF2.7
0582:  MOVLB  0
0584:  RCALL  0128
0586:  TBLRD*+
0588:  MOVFF  FF5,03
058C:  MOVLB  2
058E:  BTFSC  x26.7
0590:  BSF    FF2.7
0592:  MOVWF  22
0594:  MOVFF  03,23
....................             if (usb_getdesc_ptr !=0xFF) { 
0598:  INCFSZ 22,W
059A:  BRA    05A0
059C:  MOVF   23,F
059E:  BZ    05D0
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
05A0:  MOVLW  01
05A2:  MOVWF  1A
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
05A4:  BCF    FD8.0
05A6:  MOVLB  4
05A8:  RLCF   x14,W
05AA:  CLRF   03
05AC:  MOVFF  FF2,226
05B0:  BCF    FF2.7
05B2:  MOVLB  0
05B4:  RCALL  013A
05B6:  TBLRD*+
05B8:  MOVFF  FF5,03
05BC:  MOVLB  2
05BE:  BTFSC  x26.7
05C0:  BSF    FF2.7
05C2:  MOVWF  24
05C4:  MOVFF  03,25
....................                break; 
05C8:  MOVLB  0
05CA:  BRA    05DA
....................             } 
05CC:  BRA    05D6
05CE:  MOVLB  2
....................             else { 
....................                usb_request_stall(); 
05D0:  MOVLB  0
05D2:  RCALL  03C8
....................                return; 
05D4:  BRA    05F8
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
05D6:  RCALL  03C8
....................             return; 
05D8:  BRA    05F8
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
05DA:  MOVLB  4
05DC:  MOVF   x17,F
05DE:  BNZ   05F0
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
05E0:  MOVF   25,F
05E2:  BNZ   05EA
05E4:  MOVF   24,W
05E6:  SUBWF  x16,W
05E8:  BC    05F0
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
05EA:  CLRF   25
05EC:  MOVFF  416,24
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
05F0:  MOVLW  01
05F2:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
05F4:  MOVLB  0
05F6:  RCALL  03CC
05F8:  RETURN 0
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0E16:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0E18:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0E1A:  MOVFF  21,226
0E1E:  BRA    0DFC
....................    #endif 
0E20:  GOTO   0E42 (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
03CC:  MOVLB  2
03CE:  CLRF   x26
....................    unsigned int i=0; 
....................    char c; 
....................     
....................    //debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]); 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
03D0:  MOVF   24,W
03D2:  IORWF  25,W
03D4:  BZ    0470
03D6:  MOVF   x26,W
03D8:  SUBLW  3F
03DA:  BNC   0470
....................    { 
....................       switch(USB_stack_status.getdesc_type) { 
03DC:  MOVF   1A,W
03DE:  ADDLW  FC
03E0:  BC    044C
03E2:  ADDLW  04
03E4:  MOVLB  0
03E6:  GOTO   0488
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
03EA:  MOVFF  23,03
03EE:  MOVF   22,W
03F0:  MOVFF  FF2,228
03F4:  BCF    FF2.7
03F6:  RCALL  014C
03F8:  MOVLB  2
03FA:  BTFSC  x28.7
03FC:  BSF    FF2.7
03FE:  MOVWF  x27
....................             break; 
0400:  BRA    044C
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
0402:  MOVFF  23,03
0406:  MOVF   22,W
0408:  MOVFF  FF2,228
040C:  BCF    FF2.7
040E:  RCALL  00F8
0410:  MOVLB  2
0412:  BTFSC  x28.7
0414:  BSF    FF2.7
0416:  MOVWF  x27
....................             break; 
0418:  BRA    044C
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
041A:  MOVFF  23,03
041E:  MOVF   22,W
0420:  MOVFF  FF2,228
0424:  BCF    FF2.7
0426:  RCALL  01CC
0428:  MOVLB  2
042A:  BTFSC  x28.7
042C:  BSF    FF2.7
042E:  MOVWF  x27
....................             break; 
0430:  BRA    044C
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
0432:  MOVFF  23,03
0436:  MOVF   22,W
0438:  MOVFF  FF2,228
043C:  BCF    FF2.7
043E:  RCALL  01AA
0440:  MOVLB  2
0442:  BTFSC  x28.7
0444:  BSF    FF2.7
0446:  MOVWF  x27
....................             //debug_usb(debug_putc, "-%X- ", c); 
....................             break; 
0448:  BRA    044C
044A:  MOVLB  2
....................       } 
....................       usb_getdesc_ptr++; 
044C:  INCF   22,F
044E:  BTFSC  FD8.2
0450:  INCF   23,F
....................       usb_getdesc_len--; 
0452:  MOVF   24,W
0454:  BTFSC  FD8.2
0456:  DECF   25,F
0458:  DECF   24,F
....................       usb_ep0_tx_buffer[i++]=c; 
045A:  MOVF   x26,W
045C:  INCF   x26,F
045E:  ADDLW  50
0460:  MOVWF  FE9
0462:  MOVLW  04
0464:  MOVWF  FEA
0466:  BTFSC  FD8.0
0468:  INCF   FEA,F
046A:  MOVFF  227,FEF
046E:  BRA    03D0
....................    } 
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
0470:  MOVF   24,W
0472:  IORWF  25,W
0474:  BNZ   047E
0476:  MOVF   x26,W
0478:  SUBLW  40
047A:  BZ    047E
....................          USB_stack_status.dev_req = NONE; 
047C:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
047E:  MOVFF  226,228
0482:  MOVLB  0
0484:  RCALL  03C2
0486:  RETURN 0
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... #include "pgm_lib.c" 
.................... /* This file contains all programmer functions */ 
.................... #include "pgm_lib.h"   
.................... #IFNDEF PGM_LIB_H 
.................... #DEFINE PGM_LIB_H 
....................  
.................... //SFR Addresses  
.................... #BYTE HLVDCON  = 0xFD2 
.................... #BYTE PIR2     = 0xFA1 
.................... #BYTE PIE2     = 0xFA0 
.................... #BYTE TRISA    = 0xF92 
.................... #BYTE ADCON1   = 0xFC1 
.................... #BYTE ADCON2   = 0xFC0 
.................... #BYTE PORTA    = 0xF80 
.................... #BYTE LATA     = 0xF89 
.................... #BYTE TRISB    = 0xF93 
.................... #BYTE LATB     = 0xF8A 
.................... #BYTE TRISC    = 0xF94 
.................... #BYTE LATC     = 0xF8B 
.................... #BYTE CCPR1L   = 0xFBE 
.................... #BYTE T0CON    = 0xFD5 
.................... #BYTE T2CON    = 0xFCA 
.................... #BYTE PR2      = 0xFCB 
.................... #BYTE CCP1CON  = 0xFBD 
.................... #BYTE CMCON    = 0xFB4 
.................... #BYTE CVRCON   = 0xFB5 
.................... #BYTE INTCON   = 0xFF2 
.................... #BYTE INTCON2  = 0xFF1 
.................... #BYTE PORTB    = 0xF81 
.................... #BYTE PCL      = 0xFF9 
.................... #BYTE PCLATH   = 0xFFA 
.................... //#BYTE WREG     = 0xFE8 
.................... #BYTE STATUS   = 0xFD8 
.................... #BYTE PIE1     = 0xF9D 
.................... #BYTE PIR1     = 0xF9E 
.................... #BYTE T1CON    = 0xFCD 
.................... #BYTE ADCON0   = 0xFC2 
.................... #BYTE TMR1H    = 0xFCF 
.................... #BYTE TMR1L    = 0xFCE 
.................... #BYTE ADRESH   = 0xFC4 
.................... #BYTE ADRESL   = 0xFC3 
.................... #BYTE TMR0H    = 0xFD7 
.................... #BYTE TMR0L    = 0xFD6 
.................... #BYTE CCP2CON  = 0xFBA 
....................  
....................  
.................... //STATUS Reg Bits // 
.................... #BIT C      = STATUS.0 
.................... #BIT DC     = STATUS.1 
.................... #BIT Z      = STATUS.2 
.................... #BIT OV     = STATUS.3 
.................... #BIT N      = STATUS.4 
....................  
....................  
.................... //  PORT A  // 
.................... #BIT tris_ICSPDAT   =  TRISA.2 
.................... #BIT ICSPDAT_in     =  PORTA.2 
.................... #BIT ICSPDAT_out    =  LATA.2 
.................... #BIT tris_ICSPCLK   =  TRISA.3    
.................... #BIT ICSPCLK_in     =  PORTA.3 
.................... #BIT ICSPCLK_out    =  LATA.3 
.................... #BIT tris_AUX       =  TRISA.4     
.................... //#define AUX_in              PORTA, 4, 1 
.................... #BIT AUX            =  LATA.4 
....................  
.................... #BIT tris_MCLR_TGT  =  TRISA.5    
.................... #BIT MCLR_TGT       =  LATA.5 
.................... //#define MCLR_TGT_pin        PORTA, 5    
....................  
.................... //  PORT B  // 
.................... #BIT tris_Vpp_ON      =   TRISB.2 
.................... #BIT Vpp_ON           =   LATB.2 
.................... //#define Vpp_ON_pin    PORTB, 2  
....................  
.................... #BIT tris_Vdd_TGT_N =  TRISB.3    // RB3 Output 
.................... #BIT Vdd_TGT_N      =  LATB.3 
.................... //#define Vdd_TGT_N_pin      PORTB, 3  
....................  
.................... #BIT tris_Vdd_TGT_P =  TRISB.4  // RB4 Output 
.................... #BIT Vdd_TGT_P      =  LATB.4 
.................... //#define Vdd_TGT_P_pin      PORTB, 4 
....................  
.................... #BIT tris_PROG_SWITCH =   TRISB.5    
.................... #BIT PROG_SWITCH_pin  =   PORTB.5 
....................  
.................... //  PORT C  // 
.................... #BIT tris_BUSY_LED    =   TRISC.0 
.................... #BIT BUSY_LED         =   LATC.0 
.................... #BIT tris_Vpp_PUMP    =   TRISC.1    
.................... #BIT Vpp_PUMP         =   LATC.1 
.................... #BIT tris_Vdd_TGT_ADJ =   TRISC.2 
.................... #BIT Vdd_TGT_ADJ      =   LATC.2 
.................... #BIT tris_WP          =  TRISC.6 
.................... #BIT WP               =  LATC.6 
....................  
....................  
.................... #BIT HLVDIF = PIR2.2 
.................... #BIT HLVDIE = PIE2.2 
.................... #BIT TRISA0 = TRISA.0 
.................... #BIT TRISA1 = TRISA.1 
....................  
.................... #BIT RBPU   = INTCON2.7 
....................  
.................... #BIT TMR0IF = INTCON.2 
.................... #BIT INT0IE = INTCON.4 
.................... #BIT TMR0IE = INTCON.5 
.................... #BIT PEIE   = INTCON.6 
.................... #BIT GIE    = INTCON.7 
....................  
....................  
.................... #BIT TMR0ON = T0CON.7 
....................  
....................  
.................... //PIE1 Bits 
.................... #BIT TMR1IE = PIE1.0 
.................... #BIT TMR2IE = PIE1.1 
.................... #BIT CCP1IE = PIE1.2 
.................... #BIT SSPIE  = PIE1.3 
.................... #BIT TXIE   = PIE1.4 
.................... #BIT RCIE   = PIE1.5 
.................... #BIT ADIE   = PIE1.6 
.................... #BIT SPPIE  = PIE1.7 
....................  
.................... //PIR1 Bits 
.................... #BIT TMR1IF = PIR1.0 
.................... #BIT TMR2IF = PIR1.1 
.................... #BIT CCP1IF = PIR1.2 
.................... #BIT SSPIF  = PIR1.3 
.................... #BIT TXIF   = PIR1.4 
.................... #BIT RCIF   = PIR1.5 
.................... #BIT ADIF   = PIR1.6 
.................... #BIT SPPIF  = PIR1.7 
....................  
.................... //T1CON Bits 
.................... #BIT TMR1ON = T1CON.0 
.................... #BIT TMR1CS = T1CON.1 
.................... #BIT T1SYNC = T1CON.2 
.................... #BIT T1OSCEN= T1CON.3 
.................... #BIT T1CKPS0= T1CON.4 
.................... #BIT T1CKPS1= T1CON.5 
.................... #BIT T1RUN  = T1CON.6 
.................... #BIT RD16   = T1CON.7 
....................  
.................... //ADCON0 Bits 
.................... #BIT GO     = ADCON0.1 
....................  
....................  
.................... //DEFINITIONS  
.................... #define PWM_150kHz  79   
....................  
.................... // PWM duty cycle for (CCPR1L register value) 
.................... #define Vdd_5V0     (192/4)         //  5.0V Vdd 
.................... #define Vdd_3V3     (116/4)         //  3.3V Vdd 
.................... #define Vdd_2V5     ( 88/4)         //  2.5V Vdd 
.................... #define Vdd_1V8     ( 64/4)         //  1.8V Vdd 
....................  
....................  
.................... //PGM Commands 
.................... #define GET_VERSION 0x01 
.................... #define SET_VDD 0x03 
.................... #define SET_VPP 0x04 
.................... #define READ_VOLTAGES 0x05 
.................... #define RUN_ROM_SCRIPT 0x06 
.................... #define DOWNLOAD_SCRIPT_ARGS 0x07 
....................  
.................... //Prototypes 
.................... void getVersionNumber (void); 
.................... void calAndSetCCP (unsigned int8 ccph, unsigned int8 ccpl); 
.................... unsigned int8 CalThresholdByte(unsigned int8 voltageVal); 
.................... void sendVoltages (void); 
.................... void ADC_VPP_VDD_control (int1 state); 
.................... void getADC (unsigned int8 channel); 
.................... unsigned int16 calADCWord(unsigned int16 Val); 
.................... void executeScript(unsigned int8 scrpt_len, unsigned int16 *scriptLocation); 
.................... unsigned int8 read_n_bits_24(unsigned int8 numberOfBits); 
.................... void write_upload_buff(unsigned int8 wrByte); 
.................... void shiftBitsOutICSP (unsigned int8 charToBeShifted, unsigned int8 numberOfBits); 
.................... //void downloadScriptArgs (void); 
.................... unsigned int8 getICSP_States(void); 
.................... unsigned int8 pop_down_buff (void); 
.................... void delay_short (unsigned int8 duration); 
.................... void delay_long (unsigned int8 duration); 
.................... unsigned int8 shift_bits_in (unsigned int8 number_of_bits); 
.................... void shift_bits_out (unsigned int8  outb, unsigned int8 number_of_bits); 
.................... void set_icsp_pins(unsigned int8 state);  
.................... #ENDIF 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #INCLUDE <stdlibm.h> //necessary for malloc  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
.................... { 
....................    node_t *result; 
....................    result =ptr; 
*
129E:  MOVFF  219,21B
12A2:  MOVFF  218,21A
....................    result->size=size; 
12A6:  MOVLB  2
12A8:  MOVFF  21A,FE9
12AC:  MOVFF  21B,FEA
12B0:  MOVFF  217,FEC
12B4:  MOVF   FED,F
12B6:  MOVFF  216,FEF
....................    result->next = NULL; 
12BA:  MOVLW  02
12BC:  ADDWF  x1A,W
12BE:  MOVWF  FE9
12C0:  MOVLW  00
12C2:  ADDWFC x1B,W
12C4:  MOVWF  FEA
12C6:  CLRF   FEC
12C8:  MOVF   FED,F
12CA:  CLRF   FEF
....................    return result; 
12CC:  MOVFF  21A,01
12D0:  MOVFF  21B,02
12D4:  MOVLB  0
12D6:  GOTO   142A (RETURN)
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
.................... { 
....................    node->size=size; 
*
1360:  MOVLB  2
1362:  MOVFF  218,FE9
1366:  MOVFF  219,FEA
136A:  MOVFF  21B,FEC
136E:  MOVF   FED,F
1370:  MOVFF  21A,FEF
1374:  MOVLB  0
1376:  RETURN 0
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
.................... { 
....................     if (place->next==NULL) 
*
12DA:  MOVLW  02
12DC:  MOVLB  2
12DE:  ADDWF  x12,W
12E0:  MOVWF  FE9
12E2:  MOVLW  00
12E4:  ADDWFC x13,W
12E6:  MOVWF  FEA
12E8:  MOVFF  FEC,217
12EC:  MOVF   FED,F
12EE:  MOVFF  FEF,216
12F2:  MOVF   x16,F
12F4:  BNZ   130E
12F6:  MOVF   x17,F
12F8:  BNZ   130E
....................        node->next= NULL; 
12FA:  MOVLW  02
12FC:  ADDWF  x14,W
12FE:  MOVWF  FE9
1300:  MOVLW  00
1302:  ADDWFC x15,W
1304:  MOVWF  FEA
1306:  CLRF   FEC
1308:  MOVF   FED,F
130A:  CLRF   FEF
130C:  BRA    1344
....................     else 
....................        node->next=place->next; 
130E:  MOVLW  02
1310:  ADDWF  x14,W
1312:  MOVWF  01
1314:  MOVLW  00
1316:  ADDWFC x15,W
1318:  MOVWF  03
131A:  MOVWF  x17
131C:  MOVLW  02
131E:  ADDWF  x12,W
1320:  MOVWF  FE9
1322:  MOVLW  00
1324:  ADDWFC x13,W
1326:  MOVWF  FEA
1328:  MOVFF  FEC,03
132C:  MOVF   FED,F
132E:  MOVFF  FEF,218
1332:  MOVFF  217,FEA
1336:  MOVFF  01,FE9
133A:  MOVFF  03,FEC
133E:  MOVF   FED,F
1340:  MOVFF  218,FEF
....................     place->next=node; 
1344:  MOVLW  02
1346:  ADDWF  x12,W
1348:  MOVWF  FE9
134A:  MOVLW  00
134C:  ADDWFC x13,W
134E:  MOVWF  FEA
1350:  MOVFF  215,FEC
1354:  MOVF   FED,F
1356:  MOVFF  214,FEF
135A:  MOVLB  0
135C:  GOTO   1444 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
*
1588:  MOVFF  28,21B
158C:  MOVFF  27,21A
1590:  MOVLW  02
1592:  MOVLB  2
1594:  ADDWF  x1A,W
1596:  MOVWF  FE9
1598:  MOVLW  00
159A:  ADDWFC x1B,W
159C:  MOVWF  FEA
159E:  MOVFF  FEC,21D
15A2:  MOVF   FED,F
15A4:  MOVFF  FEF,21C
15A8:  MOVF   x18,W
15AA:  SUBWF  x1C,W
15AC:  BNZ   15B4
15AE:  MOVF   x19,W
15B0:  SUBWF  x1D,W
15B2:  BZ    15D0
15B4:  MOVLW  02
15B6:  ADDWF  x1A,W
15B8:  MOVWF  FE9
15BA:  MOVLW  00
15BC:  ADDWFC x1B,W
15BE:  MOVWF  FEA
15C0:  MOVFF  FEC,21B
15C4:  MOVF   FED,F
15C6:  MOVFF  FEF,21A
15CA:  MOVLB  0
15CC:  BRA    1590
15CE:  MOVLB  2
....................    ptr->next=node->next; 
15D0:  MOVLW  02
15D2:  ADDWF  x1A,W
15D4:  MOVWF  01
15D6:  MOVLW  00
15D8:  ADDWFC x1B,W
15DA:  MOVWF  03
15DC:  MOVWF  x1D
15DE:  MOVLW  02
15E0:  ADDWF  x18,W
15E2:  MOVWF  FE9
15E4:  MOVLW  00
15E6:  ADDWFC x19,W
15E8:  MOVWF  FEA
15EA:  MOVFF  FEC,03
15EE:  MOVF   FED,F
15F0:  MOVFF  FEF,21E
15F4:  MOVFF  21D,FEA
15F8:  MOVFF  01,FE9
15FC:  MOVFF  03,FEC
1600:  MOVF   FED,F
1602:  MOVFF  21E,FEF
....................    node=NULL; 
1606:  CLRF   x19
1608:  CLRF   x18
160A:  MOVLB  0
160C:  GOTO   16CE (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
1610:  MOVFF  28,211
1614:  MOVFF  27,210
....................    while(node!=NULL) 
1618:  MOVLB  2
161A:  MOVF   x10,F
161C:  BNZ   1624
161E:  MOVF   x11,F
1620:  BTFSC  FD8.2
1622:  BRA    171C
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
1624:  MOVFF  210,FE9
1628:  MOVFF  211,FEA
162C:  MOVFF  FEC,219
1630:  MOVF   FED,F
1632:  MOVFF  FEF,218
1636:  BTFSC  x19.7
1638:  BRA    1700
....................       { 
....................          nsize=node->size; 
163A:  MOVFF  210,FE9
163E:  MOVFF  211,FEA
1642:  MOVFF  FEC,215
1646:  MOVF   FED,F
1648:  MOVFF  FEF,214
....................          temp=(unsigned int16)node->next; 
164C:  MOVLW  02
164E:  ADDWF  x10,W
1650:  MOVWF  FE9
1652:  MOVLW  00
1654:  ADDWFC x11,W
1656:  MOVWF  FEA
1658:  MOVFF  FEC,213
165C:  MOVF   FED,F
165E:  MOVFF  FEF,212
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
1662:  MOVFF  212,FE9
1666:  MOVFF  213,FEA
166A:  MOVFF  FEC,219
166E:  MOVF   FED,F
1670:  MOVFF  FEF,218
1674:  BTFSC  x19.7
1676:  BRA    16E4
1678:  MOVF   x14,W
167A:  ADDWF  x10,W
167C:  MOVWF  x1A
167E:  MOVF   x15,W
1680:  ADDWFC x11,W
1682:  MOVWF  x1B
1684:  MOVLW  04
1686:  ADDWF  x1A,W
1688:  MOVWF  01
168A:  MOVLW  00
168C:  ADDWFC x1B,W
168E:  MOVWF  03
1690:  MOVF   01,W
1692:  SUBWF  x12,W
1694:  BNZ   16E4
1696:  MOVF   03,W
1698:  SUBWF  x13,W
169A:  BNZ   16E4
....................          { 
....................             nextsize=temp->size; 
169C:  MOVFF  212,FE9
16A0:  MOVFF  213,FEA
16A4:  MOVFF  FEC,217
16A8:  MOVF   FED,F
16AA:  MOVFF  FEF,216
....................             nsize+=nextsize+sizeof(node_t); 
16AE:  MOVLW  04
16B0:  ADDWF  x16,W
16B2:  MOVWF  01
16B4:  MOVLW  00
16B6:  ADDWFC x17,W
16B8:  MOVWF  03
16BA:  MOVF   01,W
16BC:  ADDWF  x14,F
16BE:  MOVF   03,W
16C0:  ADDWFC x15,F
....................             remove_node(temp); 
16C2:  MOVFF  213,219
16C6:  MOVFF  212,218
16CA:  MOVLB  0
16CC:  BRA    1588
....................             update_node(node,nsize); 
16CE:  MOVFF  211,219
16D2:  MOVFF  210,218
16D6:  MOVFF  215,21B
16DA:  MOVFF  214,21A
16DE:  RCALL  1360
....................          } 
16E0:  BRA    16FC
16E2:  MOVLB  2
....................          else 
....................          node=node->next; 
16E4:  MOVLW  02
16E6:  ADDWF  x10,W
16E8:  MOVWF  FE9
16EA:  MOVLW  00
16EC:  ADDWFC x11,W
16EE:  MOVWF  FEA
16F0:  MOVFF  FEC,211
16F4:  MOVF   FED,F
16F6:  MOVFF  FEF,210
16FA:  MOVLB  0
....................       } 
16FC:  BRA    1718
16FE:  MOVLB  2
....................       else 
....................       node=node->next; 
1700:  MOVLW  02
1702:  ADDWF  x10,W
1704:  MOVWF  FE9
1706:  MOVLW  00
1708:  ADDWFC x11,W
170A:  MOVWF  FEA
170C:  MOVFF  FEC,211
1710:  MOVF   FED,F
1712:  MOVFF  FEF,210
1716:  MOVLB  0
1718:  BRA    1618
171A:  MOVLB  2
....................    } 
171C:  MOVLB  0
171E:  GOTO   1796 (RETURN)
.................... } 
....................  
.................... char *malloc(size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
....................       size++; 
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
*
1378:  MOVFF  28,20D
137C:  MOVFF  27,20C
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
1380:  MOVLB  2
1382:  MOVF   x0C,F
1384:  BNZ   138C
1386:  MOVF   x0D,F
1388:  BTFSC  FD8.2
138A:  BRA    149E
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
138C:  MOVFF  20C,FE9
1390:  MOVFF  20D,FEA
1394:  MOVFF  FEC,213
1398:  MOVF   FED,F
139A:  MOVFF  FEF,212
139E:  BTFSC  x13.7
13A0:  BRA    1486
13A2:  MOVFF  20C,FE9
13A6:  MOVFF  20D,FEA
13AA:  MOVFF  FEC,215
13AE:  MOVF   FED,F
13B0:  MOVFF  FEF,214
13B4:  MOVF   x0B,W
13B6:  SUBWF  x15,W
13B8:  BNC   1486
13BA:  BNZ   13C2
13BC:  MOVF   x0A,W
13BE:  SUBWF  x14,W
13C0:  BNC   1486
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
13C2:  MOVFF  20C,FE9
13C6:  MOVFF  20D,FEA
13CA:  MOVFF  FEC,211
13CE:  MOVF   FED,F
13D0:  MOVFF  FEF,210
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
13D4:  MOVLW  04
13D6:  ADDWF  x0A,W
13D8:  MOVWF  01
13DA:  MOVLW  00
13DC:  ADDWFC x0B,W
13DE:  MOVWF  03
13E0:  MOVF   03,W
13E2:  SUBWF  x11,W
13E4:  BNC   1466
13E6:  BNZ   13EE
13E8:  MOVF   x10,W
13EA:  SUBWF  01,W
13EC:  BC    1466
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
13EE:  MOVF   x0A,W
13F0:  SUBWF  x10,W
13F2:  MOVWF  x12
13F4:  MOVF   x0B,W
13F6:  SUBWFB x11,W
13F8:  MOVWF  x13
13FA:  MOVLW  04
13FC:  SUBWF  x12,F
13FE:  MOVLW  00
1400:  SUBWFB x13,F
1402:  MOVLW  04
1404:  ADDWF  x0C,W
1406:  MOVWF  x14
1408:  MOVLW  00
140A:  ADDWFC x0D,W
140C:  MOVWF  x15
140E:  MOVF   x0A,W
1410:  ADDWF  x14,F
1412:  MOVF   x0B,W
1414:  ADDWFC x15,F
1416:  MOVFF  213,217
141A:  MOVFF  212,216
141E:  MOVFF  215,219
1422:  MOVFF  214,218
1426:  MOVLB  0
1428:  BRA    129E
142A:  MOVFF  02,20F
142E:  MOVFF  01,20E
....................             insert_node_after(node,new); 
1432:  MOVFF  20D,213
1436:  MOVFF  20C,212
143A:  MOVFF  20F,215
143E:  MOVFF  20E,214
1442:  BRA    12DA
....................             update_node(node,size+_MEMMGMT_CSIZE); 
1444:  MOVLB  2
1446:  MOVFF  20A,212
144A:  MOVLW  80
144C:  ADDWF  x0B,W
144E:  MOVWF  x13
1450:  MOVFF  20D,219
1454:  MOVFF  20C,218
1458:  MOVWF  x1B
145A:  MOVFF  20A,21A
145E:  MOVLB  0
1460:  RCALL  1360
....................          } 
1462:  BRA    1482
1464:  MOVLB  2
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
1466:  MOVFF  210,212
146A:  MOVLW  80
146C:  ADDWF  x11,W
146E:  MOVWF  x13
1470:  MOVFF  20D,219
1474:  MOVFF  20C,218
1478:  MOVWF  x1B
147A:  MOVFF  210,21A
147E:  MOVLB  0
1480:  RCALL  1360
....................          //end if 
....................          break; 
1482:  MOVLB  2
1484:  BRA    149E
....................       }//end if 
....................       node=node->next; 
1486:  MOVLW  02
1488:  ADDWF  x0C,W
148A:  MOVWF  FE9
148C:  MOVLW  00
148E:  ADDWFC x0D,W
1490:  MOVWF  FEA
1492:  MOVFF  FEC,20D
1496:  MOVF   FED,F
1498:  MOVFF  FEF,20C
149C:  BRA    1382
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
149E:  MOVF   x0C,F
14A0:  BNZ   14B0
14A2:  MOVF   x0D,F
14A4:  BNZ   14B0
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
14A6:  MOVLW  00
14A8:  MOVWF  01
14AA:  MOVWF  02
14AC:  BRA    14BE
....................    } 
14AE:  BRA    14BE
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
14B0:  MOVLW  04
14B2:  ADDWF  x0C,W
14B4:  MOVWF  01
14B6:  MOVLW  00
14B8:  ADDWFC x0D,W
14BA:  MOVWF  03
14BC:  MOVWF  02
14BE:  MOVLB  0
14C0:  RETURN 0
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
*
1722:  MOVLB  2
1724:  MOVF   x0A,F
1726:  BNZ   1730
1728:  MOVF   x0B,F
172A:  BNZ   1730
....................       return; 
172C:  BRA    1798
172E:  BRA    1792
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
1730:  MOVLW  04
1732:  SUBWF  x0A,W
1734:  MOVWF  x0C
1736:  MOVLW  00
1738:  SUBWFB x0B,W
173A:  MOVWF  x0D
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
173C:  MOVFF  20C,FE9
1740:  MOVFF  20D,FEA
1744:  MOVFF  FEC,211
1748:  MOVF   FED,F
174A:  MOVFF  FEF,210
174E:  BTFSS  x11.7
1750:  BRA    178C
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
1752:  MOVFF  20C,FE9
1756:  MOVFF  20D,FEA
175A:  MOVFF  FEC,211
175E:  MOVF   FED,F
1760:  MOVFF  FEF,210
1764:  MOVLW  00
1766:  SUBWF  x10,W
1768:  MOVWF  x0E
176A:  MOVLW  80
176C:  SUBWFB x11,W
176E:  MOVWF  x0F
....................          update_node(node,nsize); 
1770:  MOVFF  20D,219
1774:  MOVFF  20C,218
1778:  MOVFF  20F,21B
177C:  MOVFF  20E,21A
1780:  MOVLB  0
1782:  RCALL  1360
....................          ptr=NULL; 
1784:  MOVLB  2
1786:  CLRF   x0B
1788:  CLRF   x0A
....................  
....................       } 
178A:  BRA    1792
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
178C:  CLRF   x0B
178E:  CLRF   x0A
....................          return; 
1790:  BRA    1798
....................       } 
....................    } 
....................    traverse(); 
1792:  MOVLB  0
1794:  BRA    1610
1796:  MOVLB  2
1798:  MOVLB  0
179A:  RETURN 0
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
....................  
.................... volatile unsigned int8 DATAin[64];  //USB packet is copied here when received  
.................... unsigned int8 i;     //used to iterate through DATAin in Process_Input() 
....................  
.................... //unsigned int8 icsp_rate; //period in multiples of 1uS  
.................... unsigned int8 icsp_pins_states;  
....................  
.................... unsigned int8 DATA_Out_Buffer[128]; //Data is stored here by scripts and read by USB 
.................... struct  
.................... { 
....................    unsigned int8 rd_idx; 
....................    unsigned int8 wr_idx; 
....................    unsigned int8 nbr_bytes; //number of bytes in DATA_On_Buffer 
.................... } DOM_mngnt;   //DATA_Out_Buffer Management 
....................  
.................... unsigned int8 DATA_In_Buffer[256]; 
.................... struct  
.................... { 
....................    unsigned int8 rd_idx; 
....................    unsigned int8 wr_idx; 
....................    unsigned int8 nbr_bytes; //number of bytes in DATA_In_Buffer 
.................... } DIB_mngnt;   //DATA_In_Buffer Management  
....................  
.................... //unsigned int8 scrpt_args[20]; 
.................... //unsigned int8  scrpt_rd_idx = 0; //scrpt_args_num_bytes = 0, 
....................  
.................... struct { 
....................    unsigned int8   VddThreshold;   // error detect threshold 
....................    unsigned int8   VppThreshold;   // error detect threshold 
....................     unsigned int8   VddErrCount; 
....................     unsigned int8   VppErrCount; 
....................     unsigned int16    BlinkClount;    // counter for blinking Busy on VDD/VPP error 
.................... } VddVppLevels; 
....................  
.................... struct { 
....................    unsigned int8 CCPRSetPoint; 
....................    unsigned int8 UppperLimit; 
....................    unsigned int8 LowerLimit;    
.................... } Vpp_PWM; 
....................  
.................... struct { 
....................     unsigned int16    adc_calfactor;      // CalibratedResult = (ADRES * adc_calfactor) >> 8 
....................     signed int8       vdd_offset; 
....................     unsigned int8   vdd_calfactor;      // Calibrated CCP value = (((CCP >> 6) + vdd_offset) * vdd_calfactor) >> 7 
.................... } VoltageCalibration;  
....................  
....................  
.................... void pgm_init() 
.................... { 
....................    #ASM 
....................    MOVLW 0x13 
*
0FEC:  MOVLW  13
....................    MOVWF HLVDCON           //Configure HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER, See datasheet page 281 
0FEE:  MOVWF  FD2
....................     
....................    BCF HLVDIF          //Clear High/Low-Voltage Detect Interrupt Flag bit, Datasheet page 105 
0FF0:  BCF    FA1.2
....................    BSF HLVDIE         //Enable High/Low-Voltage Detect Interrupt, datasheet page 107 
0FF2:  BSF    FA0.2
....................     
....................    //Initialize I/O 
....................     
....................    BSF TRISA0        // Set pin A0 as input, datasheet page 113 
0FF4:  BSF    F92.0
....................    BSF TRISA1        // Set pin A1 as input 
0FF6:  BSF    F92.1
....................     
....................    MOVLW 0x0D 
0FF8:  MOVLW  0D
....................    MOVWF ADCON1            // A0 & A1 Set as Analog inputs, DS page 262 
0FFA:  MOVWF  FC1
....................     
....................    MOVLW 0x03 
0FFC:  MOVLW  03
....................    MOVWF ADCON2            // A/D Conversion Clock Select bits, clock derived from A/D RC oscillator, DS page 263 
0FFE:  MOVWF  FC0
....................     
....................    BSF tris_ICSPDAT        // pin A2 set as input 
1000:  BSF    F92.2
....................    BCF ICSPDAT_in 
1002:  BCF    F80.2
....................    BCF ICSPDAT_out 
1004:  BCF    F89.2
....................     
....................    BCF tris_ICSPCLK        // pin A3 set as output, why was it initially set as input ? 
1006:  BCF    F92.3
....................    BCF ICSPCLK_in 
1008:  BCF    F80.3
....................    BCF ICSPCLK_out 
100A:  BCF    F89.3
....................     
....................    BSF tris_AUX            // pin A4 set as input 
100C:  BSF    F92.4
....................    BCF AUX 
100E:  BCF    F89.4
....................     
....................    BCF MCLR_TGT 
1010:  BCF    F89.5
....................    BCF tris_MCLR_TGT       // A5 Set as output 
1012:  BCF    F92.5
....................     
....................    BCF Vdd_TGT_N           // initialize half-bridge N-gate off 
1014:  BCF    F8A.3
....................    BCF tris_Vdd_TGT_N 
1016:  BCF    F93.3
....................     
....................    BSF Vdd_TGT_P           // initialize half-bridge P-gate off 
1018:  BSF    F8A.4
....................    BCF tris_Vdd_TGT_P 
101A:  BCF    F93.4
....................     
....................    BSF tris_PROG_SWITCH    // B5 input 
101C:  BSF    F93.5
....................    BSF PROG_SWITCH_pin     // initialize to 1 
101E:  BSF    F81.5
....................    BCF RBPU                // PORTB pull-ups are enabled by individual port latch value, DS page 102 
1020:  BCF    FF1.7
....................     
....................    BCF Vpp_ON              // Initialize Vpp to off 
1022:  BCF    F8A.2
....................    BCF tris_Vpp_ON         // B2 set as output 
1024:  BCF    F93.2
....................     
....................    BCF BUSY_LED             
1026:  BCF    F8B.0
....................    BCF tris_BUSY_LED       // Busy_led pin set as output 
1028:  BCF    F94.0
....................     
....................    BCF Vpp_PUMP             
102A:  BCF    F8B.1
....................    BCF tris_Vpp_PUMP       // C1 output (CCP2) 
102C:  BCF    F94.1
....................     
....................    BCF Vdd_TGT_ADJ 
102E:  BCF    F8B.2
....................    BCF tris_Vdd_TGT_ADJ    // C2 output (CCP1) 
1030:  BCF    F94.2
....................     
....................    MOVLW 0x08 
1032:  MOVLW  08
....................    MOVWF T0CON             //Timer0 off, 16-bit timer, internal clock, prescaler not assigned 
1034:  MOVWF  FD5
....................     
....................    //Timer1 is used by VddVpp voltage monitoring interrupt or UART RX. 
....................    //configure Timer2 (used by CCP1 and CCP2) 
....................     
....................    MOVLW 0x04 
1036:  MOVLW  04
....................    MOVWF T2CON             //1:1 Postscale, 1:1 Prescale, Timer2 on 
1038:  MOVWF  FCA
....................     
....................    MOVLW PWM_150kHz        // PWM freq = 150kHz 
103A:  MOVLW  4F
....................    MOVWF PR2               //Timer2 Period Register (sets PWM Period for CCP1 and 2) 
103C:  MOVWF  FCB
....................     
....................    MOVLW 0x0C               
103E:  MOVLW  0C
....................    MOVWF CCP1CON           // PWM mode, datasheet page 151 
1040:  MOVWF  FBD
....................     
....................    MOVLW Vdd_3V3             
1042:  MOVLW  1D
....................    MOVWF CCPR1L 
1044:  MOVWF  FBE
....................     
....................    // initialize CCP2 for VPP  
....................    //Maybe add later 
....................     
....................    MOVLW 0x07               
1046:  MOVLW  07
....................    MOVWF CMCON          // Comparators off 
1048:  MOVWF  FB4
....................     
....................    CLRF CVRCON          // Voltage Reference off 
104A:  CLRF   FB5
....................     
....................    // Set up Interrupts 
....................     BSF PEIE         //enable Peripheral Interrupt Enable 
104C:  BSF    FF2.6
....................     BSF GIE          //enable global interrupts 
104E:  BSF    FF2.7
....................     
....................     // Start voltage monitoring 
....................     //ppVddADCTmr1_Start(); 
....................      
....................     BSF PEIE         //Enable Peripheral interrupts  
1050:  BSF    FF2.6
....................     BSF GIE          //Enable global interrupts 
1052:  BSF    FF2.7
....................    #ENDASM 
....................    VoltageCalibration.adc_calfactor = 0x0100;  // Set default values.  
1054:  MOVLW  01
1056:  MOVLB  1
1058:  MOVWF  xFB
105A:  CLRF   xFA
....................    VoltageCalibration.vdd_offset = 0x00; 
105C:  CLRF   xFC
....................    VoltageCalibration.vdd_calfactor = 0x80; 
105E:  MOVLW  80
1060:  MOVWF  xFD
1062:  MOVLB  0
1064:  GOTO   274E (RETURN)
.................... } 
....................  
.................... void Process_Input () 
.................... { 
.................... /* 
....................    #ASM  
....................       BSF BUSY_LED 
....................    #ENDASM*/ 
....................    i = 1;   //Initialize index 
*
24AC:  MOVLW  01
24AE:  MOVWF  x69
....................    usb_get_packet(1, DATAin, 64); 
24B0:  MOVLB  2
24B2:  MOVWF  x06
24B4:  CLRF   x08
24B6:  MOVLW  29
24B8:  MOVWF  x07
24BA:  CLRF   x0A
24BC:  MOVLW  40
24BE:  MOVWF  x09
24C0:  MOVLB  0
24C2:  GOTO   1256
....................    //usb_flush_out(1, USB_DTS_TOGGLE); 
....................    delay_ms(1); 
24C6:  MOVLW  01
24C8:  MOVLB  2
24CA:  MOVWF  x06
24CC:  MOVLB  0
24CE:  CALL   1068
....................    unsigned int8 packet_length = DATAin[0]; 
....................    unsigned int8 offset; 
24D2:  MOVFF  29,1FE
....................  
....................    while (i < packet_length) 
24D6:  MOVLB  1
24D8:  MOVF   xFE,W
24DA:  MOVLB  0
24DC:  SUBWF  x69,W
24DE:  BTFSC  FD8.0
24E0:  BRA    26FC
....................    { 
....................       offset = DATAin[i]; 
24E2:  CLRF   03
24E4:  MOVF   x69,W
24E6:  ADDLW  29
24E8:  MOVWF  FE9
24EA:  MOVLW  00
24EC:  ADDWFC 03,W
24EE:  MOVWF  FEA
24F0:  MOVFF  FEF,1FF
....................       if (offset < 0x01) break; //unknown instruction 
24F4:  MOVLB  1
24F6:  MOVF   xFF,F
24F8:  BNZ   2500
24FA:  MOVLB  0
24FC:  BRA    26FC
24FE:  MOVLB  1
....................        
....................       offset -= 0x01; 
2500:  MOVLW  01
2502:  SUBWF  xFF,F
....................       offset *= 2; 
2504:  BCF    FD8.0
2506:  RLCF   xFF,F
....................       offset += 8; 
2508:  MOVLW  08
250A:  ADDWF  xFF,F
....................        
....................       #ASM 
....................          MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU  
250C:  MOVF   FF9,W
....................          ADDWF    offset, W 
250E:  ADDWF  xFF,W
....................          BTFSC    C 
2510:  BTFSC  FD8.0
....................          INCF     PCLATH 
2512:  INCF   FFA,F
....................          MOVWF    PCL 
2514:  MOVWF  FF9
....................          BRA      getVersionLbl 
2516:  BRA    2524
....................          BRA      toggleLEDLbl 
2518:  BRA    2530
....................          BRA      setVDDLbl 
251A:  BRA    2538
....................          BRA      setVPPLbl 
251C:  BRA    2596
....................          BRA      readVoltagesLbl 
251E:  BRA    2600
....................          BRA      runROMScriptLbl 
2520:  BRA    260C
....................          BRA      downloadScrptArgsLbl 
2522:  BRA    26F4
....................       #ENDASM  
....................        
.................... getVersionLbl: 
....................       getVersionNumber (); 
2524:  MOVLB  0
2526:  GOTO   179C
....................       break; 
252A:  MOVLB  0
252C:  BRA    26FC
252E:  MOVLB  1
.................... toggleLEDLbl: 
....................       #ASM 
....................          BTG BUSY_LED 
2530:  BTG    F8B.0
....................       #ENDASM 
....................       break; 
2532:  MOVLB  0
2534:  BRA    26FC
2536:  MOVLB  1
.................... setVDDLbl: 
....................       /* 
....................        * DATAin[i+1] = CCPL 
....................        * DATAin[i+2] = CCPH 
....................        * DATAin[i+3] = VDDLim 
....................       */ 
....................       // CCPH:CCPL = ((Vdd * 32) + 10.5) << 6, << 6 because CCP1 (holds the duty cycle, resolution is 10 bits) is left justified,  
....................       // and is left justified because the 2 LSB bits are located in CCP1CON. 
....................       // Duty_cycle = vdd * 32+ 10.5 
....................       calAndSetCCP (DATAin[i+2], DATAin[i+1]); 
2538:  MOVLW  02
253A:  MOVLB  0
253C:  ADDWF  x69,W
253E:  CLRF   03
2540:  ADDLW  29
2542:  MOVWF  FE9
2544:  MOVLW  00
2546:  ADDWFC 03,W
2548:  MOVWF  FEA
254A:  MOVFF  FEF,204
254E:  MOVLW  01
2550:  ADDWF  x69,W
2552:  CLRF   03
2554:  ADDLW  29
2556:  MOVWF  FE9
2558:  MOVLW  00
255A:  ADDWFC 03,W
255C:  MOVWF  FEA
255E:  MOVFF  FEF,205
2562:  MOVFF  204,208
2566:  MOVFF  205,209
256A:  GOTO   1886
....................       VddVppLevels.VddThreshold = CalThresholdByte (DATAin[i+3]); 
256E:  MOVLW  03
2570:  ADDWF  x69,W
2572:  CLRF   03
2574:  ADDLW  29
2576:  MOVWF  FE9
2578:  MOVLW  00
257A:  ADDWFC 03,W
257C:  MOVWF  FEA
257E:  MOVFF  FEF,204
2582:  MOVFF  204,207
2586:  CALL   194C
258A:  MOVFF  01,1F1
....................       i += 4; 
258E:  MOVLW  04
2590:  ADDWF  x69,F
....................       continue; 
2592:  BRA    24D6
2594:  MOVLB  1
.................... setVPPLbl: 
....................       /* 
....................        * DATAin[i+1] = CCPR2L, this is the duty cycle, generally = 0x40; 
....................        * DATAin[i+2] = VPPADC = Vpp * 18.61          Vpp is the desired voltage. 
....................        * DATAin[i+3] = VPPlim = Vfault * 18.61  
....................       */ 
....................       Vpp_PWM.CCPRSetPoint = DATAin[i+1]; 
2596:  MOVLW  01
2598:  MOVLB  0
259A:  ADDWF  x69,W
259C:  CLRF   03
259E:  ADDLW  29
25A0:  MOVWF  FE9
25A2:  MOVLW  00
25A4:  ADDWFC 03,W
25A6:  MOVWF  FEA
25A8:  MOVFF  FEF,1F7
....................       Vpp_PWM.UppperLimit = CalThresholdByte(DATAin[i+2])+1; //VPP upper limit = VPP + 1 
25AC:  MOVLW  02
25AE:  ADDWF  x69,W
25B0:  CLRF   03
25B2:  ADDLW  29
25B4:  MOVWF  FE9
25B6:  MOVLW  00
25B8:  ADDWFC 03,W
25BA:  MOVWF  FEA
25BC:  MOVFF  FEF,204
25C0:  MOVFF  204,207
25C4:  CALL   194C
25C8:  MOVLW  01
25CA:  ADDWF  01,W
25CC:  MOVLB  1
25CE:  MOVWF  xF8
....................       Vpp_PWM.LowerLimit = Vpp_PWM.UppperLimit - 2;        //VPP lower limit = VPP - 1 
25D0:  MOVLW  02
25D2:  SUBWF  xF8,W
25D4:  MOVWF  xF9
....................       VddVppLevels.VppThreshold = CalThresholdByte(DATAin[i+3]); //calibrate VPPLim  
25D6:  MOVLW  03
25D8:  MOVLB  0
25DA:  ADDWF  x69,W
25DC:  CLRF   03
25DE:  ADDLW  29
25E0:  MOVWF  FE9
25E2:  MOVLW  00
25E4:  ADDWFC 03,W
25E6:  MOVWF  FEA
25E8:  MOVFF  FEF,204
25EC:  MOVFF  204,207
25F0:  CALL   194C
25F4:  MOVFF  01,1F2
....................       i += 4; 
25F8:  MOVLW  04
25FA:  ADDWF  x69,F
....................       continue; 
25FC:  BRA    24D6
25FE:  MOVLB  1
....................        
.................... readVoltagesLbl: 
....................       sendVoltages (); 
2600:  MOVLB  0
2602:  GOTO   1A88
....................       i++; 
2606:  INCF   x69,F
....................       continue; 
2608:  BRA    24D6
260A:  MOVLB  1
....................        
.................... runROMScriptLbl: 
....................       /* 
....................        * DATAin[i+1] = Script's length 
....................        * DATAin[i+2] = Least significant byte of the script's address 
....................        * DATAin[i+3] = Most significant byte of the script's address 
....................       */ 
....................       unsigned int8 *scriptBuffer = malloc (DATAin[i+1]); 
....................       unsigned int16 address =  ((DATAin[i+3] * 0x100) + DATAin[i+2]); 
260C:  MOVLW  01
260E:  MOVLB  0
2610:  ADDWF  x69,W
2612:  CLRF   03
2614:  ADDLW  29
2616:  MOVWF  FE9
2618:  MOVLW  00
261A:  ADDWFC 03,W
261C:  MOVWF  FEA
261E:  MOVFF  FEF,204
2622:  MOVLB  2
2624:  CLRF   x0B
2626:  MOVFF  204,20A
262A:  MOVLB  0
262C:  CALL   1378
2630:  MOVFF  02,201
2634:  MOVFF  01,200
2638:  MOVLW  03
263A:  ADDWF  x69,W
263C:  CLRF   03
263E:  ADDLW  29
2640:  MOVWF  FE9
2642:  MOVLW  00
2644:  ADDWFC 03,W
2646:  MOVWF  FEA
2648:  CLRF   16
264A:  BTFSC  FF2.7
264C:  BSF    16.7
264E:  BCF    FF2.7
2650:  MOVLB  2
2652:  CLRF   x30
2654:  MOVFF  FEF,22F
2658:  MOVLW  01
265A:  MOVWF  x32
265C:  CLRF   x31
265E:  MOVLB  0
2660:  CALL   02AC
2664:  BTFSC  16.7
2666:  BSF    FF2.7
2668:  MOVLW  02
266A:  ADDWF  x69,W
266C:  CLRF   03
266E:  ADDLW  29
2670:  MOVWF  FE9
2672:  MOVLW  00
2674:  ADDWFC 03,W
2676:  MOVWF  FEA
2678:  MOVF   FEF,W
267A:  MOVLB  2
267C:  ADDWF  01,W
267E:  MOVWF  x02
2680:  MOVLW  00
2682:  ADDWFC 02,W
2684:  MOVWF  x03
....................       read_program_memory(address, scriptBuffer, DATAin[i+1]);  
2686:  MOVLW  01
2688:  MOVLB  0
268A:  ADDWF  x69,W
268C:  CLRF   03
268E:  ADDLW  29
2690:  MOVWF  FE9
2692:  MOVLW  00
2694:  ADDWFC 03,W
2696:  MOVWF  FEA
2698:  MOVFF  FEF,204
269C:  CLRF   FF8
269E:  MOVFF  203,FF7
26A2:  MOVFF  202,FF6
26A6:  MOVFF  201,FEA
26AA:  MOVFF  200,FE9
26AE:  MOVLB  2
26B0:  CLRF   x08
26B2:  MOVFF  204,207
26B6:  MOVLB  0
26B8:  GOTO   1BE2
....................       executeScript(DATAin[i+1], scriptBuffer); 
26BC:  MOVLW  01
26BE:  ADDWF  x69,W
26C0:  CLRF   03
26C2:  ADDLW  29
26C4:  MOVWF  FE9
26C6:  MOVLW  00
26C8:  ADDWFC 03,W
26CA:  MOVWF  FEA
26CC:  MOVFF  FEF,204
26D0:  MOVFF  204,207
26D4:  MOVFF  201,209
26D8:  MOVFF  200,208
26DC:  GOTO   1D88
....................       free(scriptBuffer); 
26E0:  MOVFF  201,20B
26E4:  MOVFF  200,20A
26E8:  CALL   1722
....................       i += 4; 
26EC:  MOVLW  04
26EE:  ADDWF  x69,F
....................       continue; 
26F0:  BRA    24D6
26F2:  MOVLB  1
....................        
.................... downloadScrptArgsLbl: 
....................    //downloadScriptArgs(); 
....................    i++; 
26F4:  MOVLB  0
26F6:  INCF   x69,F
....................    continue; 
26F8:  BRA    24D6
26FA:  BRA    24D6
....................    }   
26FC:  GOTO   278A (RETURN)
....................    /* 
....................    #ASM 
....................       BCF BUSY_LED 
....................    #ENDASM*/ 
.................... } 
....................  
.................... void getVersionNumber (void) 
*
179C:  MOVLB  2
179E:  CLRF   x0B
17A0:  MOVLW  04
17A2:  MOVWF  x0A
17A4:  MOVLB  0
17A6:  RCALL  1378
17A8:  MOVFF  02,207
17AC:  MOVFF  01,206
.................... { 
....................    unsigned int8 *DATAout  = malloc(4); 
....................    *DATAout++ = 4;  //length of data to be sent, including this byte 
17B0:  MOVLB  2
17B2:  MOVFF  207,03
17B6:  MOVF   x06,W
17B8:  INCF   x06,F
17BA:  BTFSC  FD8.2
17BC:  INCF   x07,F
17BE:  MOVWF  FE9
17C0:  MOVFF  03,FEA
17C4:  MOVLW  04
17C6:  MOVWF  FEF
....................    *DATAout++ = 0; 
17C8:  MOVFF  207,03
17CC:  MOVF   x06,W
17CE:  INCF   x06,F
17D0:  BTFSC  FD8.2
17D2:  INCF   x07,F
17D4:  MOVWF  FE9
17D6:  MOVFF  03,FEA
17DA:  CLRF   FEF
....................    *DATAout++ = 0; 
17DC:  MOVFF  207,03
17E0:  MOVF   x06,W
17E2:  INCF   x06,F
17E4:  BTFSC  FD8.2
17E6:  INCF   x07,F
17E8:  MOVWF  FE9
17EA:  MOVFF  03,FEA
17EE:  CLRF   FEF
....................    *DATAout = 1; 
17F0:  MOVFF  206,FE9
17F4:  MOVFF  207,FEA
17F8:  MOVLW  01
17FA:  MOVWF  FEF
....................    usb_put_packet(1, (DATAout-3), 64, USB_DTS_TOGGLE); 
17FC:  MOVLW  03
17FE:  SUBWF  x06,W
1800:  MOVWF  x08
1802:  MOVLW  00
1804:  SUBWFB x07,W
1806:  MOVWF  x09
1808:  MOVLW  01
180A:  MOVWF  x0C
180C:  MOVFF  209,20E
1810:  MOVFF  208,20D
1814:  CLRF   x10
1816:  MOVLW  40
1818:  MOVWF  x0F
181A:  MOVLW  02
181C:  MOVWF  x11
181E:  MOVLB  0
1820:  RCALL  14C2
....................    free(DATAout); 
1822:  MOVFF  207,20B
1826:  MOVFF  206,20A
182A:  RCALL  1722
182C:  GOTO   26FC (RETURN)
....................     
....................    /* 
....................    DATAin [0] = 4;  //length of data to be sent, including this byte 
....................    DATAin [1] = 0; 
....................    DATAin [2] = 0; 
....................    DATAin [3] = 1; 
....................    usb_put_packet(1, DATAin, 64, USB_DTS_TOGGLE); 
....................    */ 
.................... } 
....................  
.................... //Used in setVDD 
.................... void calAndSetCCP (unsigned int8 ccph, unsigned int8 ccpl) 
*
1886:  CLRF   16
1888:  BTFSC  FF2.7
188A:  BSF    16.7
188C:  BCF    FF2.7
188E:  MOVLB  2
1890:  CLRF   x30
1892:  MOVFF  208,22F
1896:  MOVLW  01
1898:  MOVWF  x32
189A:  CLRF   x31
189C:  MOVLB  0
189E:  CALL   02AC
18A2:  BTFSC  16.7
18A4:  BSF    FF2.7
18A6:  MOVFF  01,20D
18AA:  MOVLB  2
18AC:  MOVF   x09,W
18AE:  ADDWF  01,W
18B0:  MOVWF  01
18B2:  MOVLW  00
18B4:  ADDWFC 02,W
18B6:  MOVFF  01,20A
18BA:  MOVWF  x0B
.................... { 
....................    signed int16 ccp1 = (ccph * 0x100) + ccpl; //ccp1 = ccph:ccpl 
....................    unsigned int8 tempCal; 
....................    ccp1 >>= 6; // 
18BC:  RRCF   x0B,W
18BE:  MOVWF  03
18C0:  RRCF   x0A,W
18C2:  MOVWF  02
18C4:  RRCF   03,F
18C6:  RRCF   02,F
18C8:  RRCF   03,F
18CA:  RRCF   02,F
18CC:  RRCF   03,F
18CE:  RRCF   02,F
18D0:  RRCF   03,F
18D2:  RRCF   02,F
18D4:  RRCF   03,F
18D6:  RRCF   02,F
18D8:  MOVLW  03
18DA:  ANDWF  03,F
18DC:  MOVFF  02,20A
18E0:  MOVFF  03,20B
....................    ccp1 += VoltageCalibration.vdd_offset; 
18E4:  CLRF   03
18E6:  MOVLB  1
18E8:  MOVF   xFC,W
18EA:  BTFSC  FE8.7
18EC:  DECF   03,F
18EE:  MOVLB  2
18F0:  ADDWF  x0A,F
18F2:  MOVF   03,W
18F4:  ADDWFC x0B,F
....................    ccp1 *= VoltageCalibration.vdd_calfactor;     //default is 0x80 = 0b10000000 
18F6:  MOVFF  20B,20E
18FA:  MOVFF  20A,20D
18FE:  CLRF   x10
1900:  MOVFF  1FD,20F
1904:  MOVLB  0
1906:  BRA    1830
1908:  MOVFF  02,20B
190C:  MOVFF  01,20A
....................    ccp1 >>= 1;                                   //shift by one to get the original >> 6 after multiplying by 0x80 
1910:  BCF    FD8.0
1912:  MOVLB  2
1914:  RRCF   x0B,W
1916:  MOVWF  03
1918:  RRCF   x0A,W
191A:  MOVWF  x0A
191C:  MOVFF  03,20B
....................    tempCal = (unsigned int8) (ccp1 >> 8); 
1920:  MOVF   x0B,W
1922:  MOVWF  x0C
....................    #ASM  
....................    MOVLW tempCal 
1924:  MOVLW  0C
....................    MOVWF CCPR1L 
1926:  MOVWF  FBE
....................    #ENDASM 
....................     
....................    //The following is to place the lower 2 bits of the duty cycle resolution in bits 4 and 5 of CCP1CON 
....................    CCP1 &= 0xFF; 
1928:  CLRF   x0B
....................    tempCal = (unsigned int8) (CCP1 >> 2); 
192A:  RRCF   x0B,W
192C:  MOVWF  03
192E:  RRCF   x0A,W
1930:  MOVWF  02
1932:  RRCF   03,F
1934:  RRCF   02,F
1936:  MOVLW  3F
1938:  ANDWF  03,F
193A:  MOVFF  02,20C
....................    /* 
....................    CCP1CON = (CCP1CON & 0xCF) | tempCal; 
....................    */ 
....................    #ASM  
....................    MOVLW 0xCF 
193E:  MOVLW  CF
....................    ANDWF CCP1CON,W 
1940:  ANDWF  FBD,W
....................    IORLW tempCal 
1942:  IORLW  0C
....................    MOVWF CCP1CON 
1944:  MOVWF  FBD
....................    #ENDASM 
1946:  MOVLB  0
1948:  GOTO   256E (RETURN)
.................... } 
....................  
.................... unsigned int8 CalThresholdByte(unsigned int8 voltageVal) 
194C:  MOVLW  00
194E:  BSF    FD8.0
1950:  MOVLB  1
1952:  SUBFWB xFA,W
1954:  MOVLB  2
1956:  MOVWF  x08
.................... { 
....................     unsigned int8 inverse_cal = 0x0200 - VoltageCalibration.adc_calfactor; //adc_calfactor by default is 0x0100 so, 0x0200 - adc_calfactor is the same as 1 / adc_calfactor  
....................     inverse_cal *= voltageVal; 
1958:  MOVF   x08,W
195A:  MULWF  x07
195C:  MOVFF  FF3,208
....................     inverse_cal >>= 8; 
1960:  CLRF   x08
....................  
....................     return (unsigned int8) inverse_cal; 
1962:  MOVFF  208,01
1966:  MOVLB  0
1968:  RETURN 0
.................... } //See CalADCWord(unsigned int rawValue) 
....................  
.................... //TODO: create a function to store cal and offset values in eeprom and a function to read them 
....................  
.................... //Read VDD and VPP voltages, used to detect self-powered targets  
.................... void sendVoltages (void) 
*
1A88:  MOVLB  2
1A8A:  CLRF   x0B
1A8C:  MOVLW  05
1A8E:  MOVWF  x0A
1A90:  MOVLB  0
1A92:  RCALL  1378
1A94:  MOVFF  02,209
1A98:  MOVFF  01,208
.................... { 
....................    unsigned int16 adc_result; 
....................    unsigned int8 *DATAout = malloc(5); 
....................    *DATAout++ = 5;   //Length of data to be sent 
1A9C:  MOVLB  2
1A9E:  MOVFF  209,03
1AA2:  MOVF   x08,W
1AA4:  INCF   x08,F
1AA6:  BTFSC  FD8.2
1AA8:  INCF   x09,F
1AAA:  MOVWF  FE9
1AAC:  MOVFF  03,FEA
1AB0:  MOVLW  05
1AB2:  MOVWF  FEF
....................    ADC_VPP_VDD_control (0); //Stop ADC, VPP and VDD 
1AB4:  CLRF   x0A
1AB6:  MOVLB  0
1AB8:  RCALL  196A
....................    getADC (0x04); //CH1_VDD 
1ABA:  MOVLW  04
1ABC:  MOVLB  2
1ABE:  MOVWF  x0A
1AC0:  MOVLB  0
1AC2:  RCALL  19AA
1AC4:  CLRF   16
1AC6:  BTFSC  FF2.7
1AC8:  BSF    16.7
1ACA:  BCF    FF2.7
....................    adc_result = (ADRESH * 0x100) + ADRESL; 
1ACC:  MOVLB  2
1ACE:  CLRF   x30
1AD0:  MOVFF  FC4,22F
1AD4:  MOVLW  01
1AD6:  MOVWF  x32
1AD8:  CLRF   x31
1ADA:  MOVLB  0
1ADC:  CALL   02AC
1AE0:  BTFSC  16.7
1AE2:  BSF    FF2.7
1AE4:  MOVF   FC3,W
1AE6:  MOVLB  2
1AE8:  ADDWF  01,W
1AEA:  MOVWF  x06
1AEC:  MOVLW  00
1AEE:  ADDWFC 02,W
1AF0:  MOVWF  x07
....................    adc_result = calADCWord(adc_result); 
1AF2:  MOVFF  207,20B
1AF6:  MOVFF  206,20A
1AFA:  MOVLB  0
1AFC:  RCALL  1A1C
1AFE:  MOVFF  02,207
1B02:  MOVFF  01,206
....................    *DATAout++ = (unsigned int8) adc_result; 
1B06:  MOVLB  2
1B08:  MOVFF  209,03
1B0C:  MOVF   x08,W
1B0E:  INCF   x08,F
1B10:  BTFSC  FD8.2
1B12:  INCF   x09,F
1B14:  MOVWF  FE9
1B16:  MOVFF  03,FEA
1B1A:  MOVFF  206,FEF
....................    *DATAout++ = (unsigned int8) (adc_result >> 8); 
1B1E:  MOVFF  209,03
1B22:  MOVF   x08,W
1B24:  INCF   x08,F
1B26:  BTFSC  FD8.2
1B28:  INCF   x09,F
1B2A:  MOVWF  FE9
1B2C:  MOVFF  03,FEA
1B30:  MOVF   x07,W
1B32:  MOVWF  FEF
....................     
....................    getADC (0x00); //CH0_VPP 
1B34:  CLRF   x0A
1B36:  MOVLB  0
1B38:  RCALL  19AA
1B3A:  CLRF   16
1B3C:  BTFSC  FF2.7
1B3E:  BSF    16.7
1B40:  BCF    FF2.7
....................    adc_result = (ADRESH * 0x100) + ADRESL; 
1B42:  MOVLB  2
1B44:  CLRF   x30
1B46:  MOVFF  FC4,22F
1B4A:  MOVLW  01
1B4C:  MOVWF  x32
1B4E:  CLRF   x31
1B50:  MOVLB  0
1B52:  CALL   02AC
1B56:  BTFSC  16.7
1B58:  BSF    FF2.7
1B5A:  MOVF   FC3,W
1B5C:  MOVLB  2
1B5E:  ADDWF  01,W
1B60:  MOVWF  x06
1B62:  MOVLW  00
1B64:  ADDWFC 02,W
1B66:  MOVWF  x07
....................    adc_result = calADCWord(adc_result); 
1B68:  MOVFF  207,20B
1B6C:  MOVFF  206,20A
1B70:  MOVLB  0
1B72:  RCALL  1A1C
1B74:  MOVFF  02,207
1B78:  MOVFF  01,206
....................    *DATAout++ = (unsigned int8) adc_result; 
1B7C:  MOVLB  2
1B7E:  MOVFF  209,03
1B82:  MOVF   x08,W
1B84:  INCF   x08,F
1B86:  BTFSC  FD8.2
1B88:  INCF   x09,F
1B8A:  MOVWF  FE9
1B8C:  MOVFF  03,FEA
1B90:  MOVFF  206,FEF
....................    *DATAout = (unsigned int8) (adc_result >> 8); 
1B94:  MOVFF  209,03
1B98:  MOVFF  208,FE9
1B9C:  MOVFF  209,FEA
1BA0:  MOVF   x07,W
1BA2:  MOVWF  FEF
....................     
....................    usb_put_packet(1, (DATAout-4), 64, USB_DTS_TOGGLE); 
1BA4:  MOVLW  04
1BA6:  SUBWF  x08,W
1BA8:  MOVWF  x0A
1BAA:  MOVLW  00
1BAC:  SUBWFB x09,W
1BAE:  MOVWF  x0B
1BB0:  MOVLW  01
1BB2:  MOVWF  x0C
1BB4:  MOVFF  20B,20E
1BB8:  MOVFF  20A,20D
1BBC:  CLRF   x10
1BBE:  MOVLW  40
1BC0:  MOVWF  x0F
1BC2:  MOVLW  02
1BC4:  MOVWF  x11
1BC6:  MOVLB  0
1BC8:  RCALL  14C2
....................    free(DATAout); 
1BCA:  MOVFF  209,20B
1BCE:  MOVFF  208,20A
1BD2:  RCALL  1722
....................    ADC_VPP_VDD_control (1); //Start ADC, VPP and VDD 
1BD4:  MOVLW  01
1BD6:  MOVLB  2
1BD8:  MOVWF  x0A
1BDA:  MOVLB  0
1BDC:  RCALL  196A
1BDE:  GOTO   2606 (RETURN)
.................... } 
....................  
.................... void ADC_VPP_VDD_control (int1 state) 
.................... { 
....................    if (state) 
*
196A:  MOVLB  2
196C:  MOVF   x0A,F
196E:  BZ    199A
....................    {//Activate modules 
....................       VddVppLevels.VddErrCount = 0; 
1970:  MOVLB  1
1972:  CLRF   xF3
....................       VddVppLevels.VppErrCount = 0; 
1974:  CLRF   xF4
....................       #ASM 
....................          MOVLW 0x80 
1976:  MOVLW  80
....................          MOVWF T1CON            // Rd16 1:1 prescale off Fosc/4 
1978:  MOVWF  FCD
....................          MOVLW 0xFA 
197A:  MOVLW  FA
....................          MOVWF TMR1H            //// 65536-1480 = about 125us 
197C:  MOVWF  FCF
....................          MOVLW 0x38 
197E:  MOVLW  38
....................          MOVWF TMR1L 
1980:  MOVWF  FCE
....................           
....................          BCF   TMR1IF           // clear int flag 
1982:  BCF    F9E.0
....................          BSF   TMR1IE           // enable int 
1984:  BSF    F9D.0
....................          BSF   TMR1ON           // start timer 
1986:  BSF    FCD.0
....................           
....................          BCF   ADIF  // clear A/D Converter Interrupt Flag 
1988:  BCF    F9E.6
....................          BCF   ADIE  // Disable ADC int 
198A:  BCF    F9D.6
....................          MOVLW 0x26 
198C:  MOVLW  26
....................          MOVWF ADCON2           //ADCON2 setting for voltage monitoring 
198E:  MOVWF  FC0
....................          MOVLW 0x05 
1990:  MOVLW  05
....................          MOVWF ADCON0           // Set ADC channel for VDD_TGT_FB and turn on ADC (ADCON0) 
1992:  MOVWF  FC2
....................          BSF   GO                // Start conversion. 
1994:  BSF    FC2.1
....................       #ENDASM 
....................    } 
1996:  BRA    19A6
1998:  MOVLB  2
....................    else  
....................    { //Deactivate modules 
....................       #ASM 
....................          BCF   TMR1IE   // Disable Timer1 interrupt 
199A:  BCF    F9D.0
....................          BCF   TMR1ON   // Stop Timer1 
199C:  BCF    FCD.0
....................           
....................          CLRF  ADCON0   //Shut off ADC conversion in progress 
199E:  CLRF   FC2
....................           
....................          BCF   ADIF  // clear A/D Converter Interrupt Flag 
19A0:  BCF    F9E.6
....................          BCF   ADIE  // Disable ADC int 
19A2:  BCF    F9D.6
19A4:  MOVLB  1
....................       #ENDASM 
....................    } 
19A6:  MOVLB  0
19A8:  RETURN 0
.................... } 
....................  
.................... void getADC (unsigned int8 channel) 
.................... { 
....................    ADCON0 = (channel + 1);     // set channel. ADD 1 to enable A/D Converter (bit 0) page 261 
19AA:  MOVLW  01
19AC:  MOVLB  2
19AE:  ADDWF  x0A,W
19B0:  MOVWF  FC2
....................    #ASM 
....................    BSF GO                      // begin conversion 
19B2:  BSF    FC2.1
....................    #ENDASM    
....................    while ((ADCON0 | 0x02));       // wait while GO is still set 
19B4:  MOVF   FC2,W
19B6:  IORLW  02
19B8:  BNZ   19B4
19BA:  MOVLB  0
19BC:  RETURN 0
.................... } 
....................  
.................... unsigned int16 calADCWord(unsigned int16 Val) 
*
1A1C:  MOVLB  2
1A1E:  CLRF   x0F
1A20:  CLRF   x0E
1A22:  MOVFF  20B,20D
1A26:  MOVFF  20A,20C
.................... { 
....................  
....................     unsigned int32 cal_value = Val; 
....................     cal_value *= VoltageCalibration.adc_calfactor; 
1A2A:  MOVFF  20F,213
1A2E:  MOVFF  20E,212
1A32:  MOVFF  20D,211
1A36:  MOVFF  20C,210
1A3A:  CLRF   x17
1A3C:  CLRF   x16
1A3E:  MOVFF  1FB,215
1A42:  MOVFF  1FA,214
1A46:  MOVLB  0
1A48:  BRA    19BE
1A4A:  MOVFF  03,20F
1A4E:  MOVFF  02,20E
1A52:  MOVFF  01,20D
1A56:  MOVFF  00,20C
....................     cal_value >>= 8; 
1A5A:  MOVFF  20D,20C
1A5E:  MOVFF  20E,20D
1A62:  MOVFF  20F,20E
1A66:  MOVLB  2
1A68:  CLRF   x0F
....................     if (cal_value > 0xFFFF) 
1A6A:  MOVF   x0F,F
1A6C:  BNZ   1A74
1A6E:  MOVF   x0E,W
1A70:  SUBLW  00
1A72:  BC    1A7C
....................         cal_value = 0xFFFF; 
1A74:  CLRF   x0F
1A76:  CLRF   x0E
1A78:  SETF   x0D
1A7A:  SETF   x0C
....................  
....................     return (unsigned int16) cal_value; 
1A7C:  MOVFF  20C,01
1A80:  MOVFF  20D,02
1A84:  MOVLB  0
1A86:  RETURN 0
.................... } 
....................  
.................... /* 
.................... void downloadScriptArgs (void) 
.................... { 
....................    unsigned int8 len = DATAin[++i]; 
....................    for (unsigned int8 j = 0; j < len; j++) 
....................    { 
....................       scrpt_args[j] = DATAin[++i];           //Copy the arguments from USB packet to scrpt_args buffer  
....................    } 
....................    scrpt_rd_idx = 0; 
.................... } 
....................  
.................... */ 
....................  
....................  
....................  
....................  
....................  
.................... void executeScript(unsigned int8 scrpt_len, unsigned int16 *scriptLocation) 
*
1D88:  MOVLB  2
1D8A:  CLRF   x0A
1D8C:  BSF    x0E.0
1D8E:  BSF    x0E.1
.................... { 
....................    unsigned int8 si = 0; //initialize script index to 0 
....................    unsigned int8 offset, loop_buff_idx, temp; 
....................    int1 first_iteration_LB = 1; //used by LOOPBUFFER cmd 
....................    int1 first_iteration_L = 1; //Used by LOOP cmd 
....................    unsigned int16 nbr_iterations, loop_count, loop_idx; 
....................    unsigned int8 *SFR_ptr; //used by the WRITE_SFR and READ_SFR commands 
....................     
....................    #ASM 
....................       BCF INT0IE //Disable Timer0 interrupt 
1D90:  BCF    FF2.4
....................       MOVLW 0x07 
1D92:  MOVLW  07
....................       MOVWF T0CON //16-bit timer, 1:256 prescale 
1D94:  MOVWF  FD5
....................    #ENDASM 
....................     
....................    if (scrpt_len == 0) return;  
1D96:  MOVF   x07,F
1D98:  BTFSC  FD8.2
1D9A:  BRA    24A6
....................    while (si < scrpt_len) 
1D9C:  MOVF   x07,W
1D9E:  SUBWF  x0A,W
1DA0:  BTFSC  FD8.0
1DA2:  BRA    24A6
....................    { 
....................       offset = *(scriptLocation + si);  
1DA4:  BCF    FD8.0
1DA6:  RLCF   x0A,W
1DA8:  ADDWF  x08,W
1DAA:  MOVWF  01
1DAC:  MOVLW  00
1DAE:  ADDWFC x09,W
1DB0:  MOVFF  01,FE9
1DB4:  MOVWF  FEA
1DB6:  MOVFF  FEF,20B
....................       offset -= 0xD5;  // Consider 0xD5 to be the minimum for now 
1DBA:  MOVLW  D5
1DBC:  SUBWF  x0B,F
....................       offset *= 2;      
1DBE:  BCF    FD8.0
1DC0:  RLCF   x0B,F
....................       offset += 8;      
1DC2:  MOVLW  08
1DC4:  ADDWF  x0B,F
....................       #ASM 
....................          MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU  
1DC6:  MOVF   FF9,W
....................          ADDWF    offset, W 
1DC8:  ADDWF  x0B,W
....................          BTFSC    C 
1DCA:  BTFSC  FD8.0
....................          INCF     PCLATH 
1DCC:  INCF   FFA,F
....................          MOVWF    PCL 
1DCE:  MOVWF  FF9
....................          BRA      readN_BitsLbl  //Read N bits from target and store them in DATA_Out_Buffer, (May not be used) 
1DD0:  BRA    1E1A
....................          BRA      readByteLbl 
1DD2:  BRA    1E52
....................          BRA      VISI24Lbl 
1DD4:  BRA    1E6A
....................          BRA      NOP24Lbl 
1DD6:  BRA    1EB0
....................          BRA      COREINST24Lbl  
1DD8:  BRA    1EE4
....................          BRA      COREINST18Lbl 
1DDA:  BRA    1F7E
....................          BRA      POP_DOWNLOAD_BUFFERLbl 
1DDC:  BRA    1FEA
....................          BRA      readICSP_StatesLbl 
1DDE:  BRA    1FF4
....................          BRA      LOOPBUFFERLbl 
1DE0:  BRA    2008
....................          BRA      WRITE_SFRLbl 
1DE2:  BRA    2078
....................          BRA      READ_SFRLbl 
1DE4:  BRA    20CA
....................          BRA      EXIT_SCRIPTLbl  
1DE6:  BRA    210C
....................          BRA      GOTO_IDXLbl 
1DE8:  BRA    2112
....................          BRA      IF_GT_GOTOLbl   
1DEA:  BRA    212C
....................          BRA      IF_EQ_GOTOLbl 
1DEC:  BRA    218C
....................          BRA      SHORT_DELAYLbl 
1DEE:  BRA    21E8
....................          BRA      LONG_DELAYLbl 
1DF0:  BRA    2216
....................          BRA      LOOPLbl 
1DF2:  BRA    2244
....................          //BRA      SET_ICSP_RATELbl      //Used for HCS encoders, not MCUs 
....................          BRA      SHIFT_BITS_IN_LBL 
1DF4:  BRA    22C0
....................          BRA      SHIFT_BITS_IN_BUFFER_LBL 
1DF6:  BRA    22EE
....................          BRA      SHIFT_BITS_OUT_BUFFER_LBL 
1DF8:  BRA    2326
....................          BRA      SHIFT_BITS_OUT_LBL 
1DFA:  BRA    2362
....................          BRA      SHIFT_BYTE_IN_LBL 
1DFC:  BRA    23CA
....................          BRA      SHIFT_BYTE_IN_BUFFER_LBL 
1DFE:  BRA    23D8
....................          BRA      SHIFT_BYTE_OUT_BUFFER_LBL 
1E00:  BRA    23F0
....................          BRA      SHIFT_BYTE_OUT_LBL 
1E02:  BRA    240C
....................          BRA      SET_ICSP_PINS_LBL 
1E04:  BRA    243E
....................          BRA      MCLR_TGT_GND_OFF_LBL 
1E06:  BRA    2464
....................          BRA      MCLR_TGT_GND_ON_LBL 
1E08:  BRA    246A
....................          BRA      VPP_PWM_OFF_LBL 
1E0A:  BRA    2470
....................          BRA      VPP_PWM_ON_LBL 
1E0C:  BRA    2478
....................          BRA      VPP_ON_LBL 
1E0E:  BRA    2480
....................          BRA      VPP_OFF_LBL 
1E10:  BRA    2486
....................          BRA      VDD_GND_ON_LBL 
1E12:  BRA    248C
....................          BRA      VDD_GND_OFF_LBL 
1E14:  BRA    2492
....................          BRA      VDD_ON_LBL 
1E16:  BRA    2498
....................          BRA      VDD_OFF_LBL 
1E18:  BRA    249E
....................       #ENDASM  
.................... readN_BitsLbl: 
....................       write_upload_buff(read_n_bits_24(*(scriptLocation + ++si)));//WriteUploadBuffer(readN_Bits(*(scriptLocation + si + 1))); 
1E1A:  INCF   x0A,F
1E1C:  BCF    FD8.0
1E1E:  RLCF   x0A,W
1E20:  ADDWF  x08,W
1E22:  MOVWF  01
1E24:  MOVLW  00
1E26:  ADDWFC x09,W
1E28:  MOVWF  03
1E2A:  MOVFF  01,FE9
1E2E:  MOVWF  FEA
1E30:  MOVFF  FEC,218
1E34:  MOVF   FED,F
1E36:  MOVFF  FEF,217
1E3A:  MOVFF  217,219
1E3E:  MOVLB  0
1E40:  RCALL  1C02
1E42:  MOVFF  01,217
1E46:  MOVFF  01,218
1E4A:  RCALL  1C26
....................       si++; 
1E4C:  MOVLB  2
1E4E:  INCF   x0A,F
....................       continue; 
1E50:  BRA    1D9C
....................     
.................... readByteLbl: 
....................       write_upload_buff(read_n_bits_24(8)); 
1E52:  MOVLW  08
1E54:  MOVWF  x19
1E56:  MOVLB  0
1E58:  RCALL  1C02
1E5A:  MOVFF  01,217
1E5E:  MOVFF  01,218
1E62:  RCALL  1C26
....................       si++; 
1E64:  MOVLB  2
1E66:  INCF   x0A,F
....................       continue; 
1E68:  BRA    1D9C
....................  
.................... VISI24Lbl: 
....................       ShiftBitsOutICSP(1, 4); 
1E6A:  MOVLW  01
1E6C:  MOVWF  x19
1E6E:  MOVLW  04
1E70:  MOVWF  x1A
1E72:  MOVLB  0
1E74:  RCALL  1C4E
....................       ShiftBitsOutICSP(0, 8); 
1E76:  MOVLB  2
1E78:  CLRF   x19
1E7A:  MOVLW  08
1E7C:  MOVWF  x1A
1E7E:  MOVLB  0
1E80:  RCALL  1C4E
....................       write_upload_buff(read_n_bits_24(8)); 
1E82:  MOVLW  08
1E84:  MOVLB  2
1E86:  MOVWF  x19
1E88:  MOVLB  0
1E8A:  RCALL  1C02
1E8C:  MOVFF  01,217
1E90:  MOVFF  01,218
1E94:  RCALL  1C26
....................       write_upload_buff(read_n_bits_24(8)); 
1E96:  MOVLW  08
1E98:  MOVLB  2
1E9A:  MOVWF  x19
1E9C:  MOVLB  0
1E9E:  RCALL  1C02
1EA0:  MOVFF  01,217
1EA4:  MOVFF  01,218
1EA8:  RCALL  1C26
....................       si++; 
1EAA:  MOVLB  2
1EAC:  INCF   x0A,F
....................       continue; 
1EAE:  BRA    1D9C
....................     
.................... NOP24Lbl: 
....................       ShiftBitsOutICSP(0, 8); 
1EB0:  CLRF   x19
1EB2:  MOVLW  08
1EB4:  MOVWF  x1A
1EB6:  MOVLB  0
1EB8:  RCALL  1C4E
....................       ShiftBitsOutICSP(0, 8); 
1EBA:  MOVLB  2
1EBC:  CLRF   x19
1EBE:  MOVLW  08
1EC0:  MOVWF  x1A
1EC2:  MOVLB  0
1EC4:  RCALL  1C4E
....................       ShiftBitsOutICSP(0, 8); 
1EC6:  MOVLB  2
1EC8:  CLRF   x19
1ECA:  MOVLW  08
1ECC:  MOVWF  x1A
1ECE:  MOVLB  0
1ED0:  RCALL  1C4E
....................       ShiftBitsOutICSP(0, 8); 
1ED2:  MOVLB  2
1ED4:  CLRF   x19
1ED6:  MOVLW  08
1ED8:  MOVWF  x1A
1EDA:  MOVLB  0
1EDC:  RCALL  1C4E
....................       si++; 
1EDE:  MOVLB  2
1EE0:  INCF   x0A,F
....................       continue; 
1EE2:  BRA    1D9C
....................     
.................... COREINST24Lbl: 
....................       ShiftBitsOutICSP(0, 4); 
1EE4:  CLRF   x19
1EE6:  MOVLW  04
1EE8:  MOVWF  x1A
1EEA:  MOVLB  0
1EEC:  RCALL  1C4E
....................       ShiftBitsOutICSP(*(scriptLocation + ++si), 8); 
1EEE:  MOVLB  2
1EF0:  INCF   x0A,F
1EF2:  BCF    FD8.0
1EF4:  RLCF   x0A,W
1EF6:  ADDWF  x08,W
1EF8:  MOVWF  01
1EFA:  MOVLW  00
1EFC:  ADDWFC x09,W
1EFE:  MOVWF  03
1F00:  MOVFF  01,FE9
1F04:  MOVWF  FEA
1F06:  MOVFF  FEC,218
1F0A:  MOVF   FED,F
1F0C:  MOVFF  FEF,217
1F10:  MOVFF  217,219
1F14:  MOVLW  08
1F16:  MOVWF  x1A
1F18:  MOVLB  0
1F1A:  RCALL  1C4E
....................       ShiftBitsOutICSP(*(scriptLocation + ++si), 8); 
1F1C:  MOVLB  2
1F1E:  INCF   x0A,F
1F20:  BCF    FD8.0
1F22:  RLCF   x0A,W
1F24:  ADDWF  x08,W
1F26:  MOVWF  01
1F28:  MOVLW  00
1F2A:  ADDWFC x09,W
1F2C:  MOVWF  03
1F2E:  MOVFF  01,FE9
1F32:  MOVWF  FEA
1F34:  MOVFF  FEC,218
1F38:  MOVF   FED,F
1F3A:  MOVFF  FEF,217
1F3E:  MOVFF  217,219
1F42:  MOVLW  08
1F44:  MOVWF  x1A
1F46:  MOVLB  0
1F48:  RCALL  1C4E
....................       ShiftBitsOutICSP(*(scriptLocation + ++si), 8); 
1F4A:  MOVLB  2
1F4C:  INCF   x0A,F
1F4E:  BCF    FD8.0
1F50:  RLCF   x0A,W
1F52:  ADDWF  x08,W
1F54:  MOVWF  01
1F56:  MOVLW  00
1F58:  ADDWFC x09,W
1F5A:  MOVWF  03
1F5C:  MOVFF  01,FE9
1F60:  MOVWF  FEA
1F62:  MOVFF  FEC,218
1F66:  MOVF   FED,F
1F68:  MOVFF  FEF,217
1F6C:  MOVFF  217,219
1F70:  MOVLW  08
1F72:  MOVWF  x1A
1F74:  MOVLB  0
1F76:  RCALL  1C4E
....................       si++; 
1F78:  MOVLB  2
1F7A:  INCF   x0A,F
....................       continue; 
1F7C:  BRA    1D9C
....................  
.................... COREINST18Lbl: 
....................       ShiftBitsOutICSP(0, 4); 
1F7E:  CLRF   x19
1F80:  MOVLW  04
1F82:  MOVWF  x1A
1F84:  MOVLB  0
1F86:  RCALL  1C4E
....................       ShiftBitsOutICSP(*(scriptLocation + ++si), 8); 
1F88:  MOVLB  2
1F8A:  INCF   x0A,F
1F8C:  BCF    FD8.0
1F8E:  RLCF   x0A,W
1F90:  ADDWF  x08,W
1F92:  MOVWF  01
1F94:  MOVLW  00
1F96:  ADDWFC x09,W
1F98:  MOVWF  03
1F9A:  MOVFF  01,FE9
1F9E:  MOVWF  FEA
1FA0:  MOVFF  FEC,218
1FA4:  MOVF   FED,F
1FA6:  MOVFF  FEF,217
1FAA:  MOVFF  217,219
1FAE:  MOVLW  08
1FB0:  MOVWF  x1A
1FB2:  MOVLB  0
1FB4:  RCALL  1C4E
....................       ShiftBitsOutICSP(*(scriptLocation + ++si), 8); 
1FB6:  MOVLB  2
1FB8:  INCF   x0A,F
1FBA:  BCF    FD8.0
1FBC:  RLCF   x0A,W
1FBE:  ADDWF  x08,W
1FC0:  MOVWF  01
1FC2:  MOVLW  00
1FC4:  ADDWFC x09,W
1FC6:  MOVWF  03
1FC8:  MOVFF  01,FE9
1FCC:  MOVWF  FEA
1FCE:  MOVFF  FEC,218
1FD2:  MOVF   FED,F
1FD4:  MOVFF  FEF,217
1FD8:  MOVFF  217,219
1FDC:  MOVLW  08
1FDE:  MOVWF  x1A
1FE0:  MOVLB  0
1FE2:  RCALL  1C4E
....................       si++; 
1FE4:  MOVLB  2
1FE6:  INCF   x0A,F
....................       continue; 
1FE8:  BRA    1D9C
....................     
.................... POP_DOWNLOAD_BUFFERLbl: 
....................       pop_down_buff (); 
1FEA:  MOVLB  0
1FEC:  RCALL  1C6A
....................       si++; 
1FEE:  MOVLB  2
1FF0:  INCF   x0A,F
....................       continue; 
1FF2:  BRA    1D9C
....................     
.................... readICSP_StatesLbl: 
....................       write_upload_buff(getICSP_States()); 
1FF4:  MOVLB  0
1FF6:  BRA    1C98
1FF8:  MOVFF  01,217
1FFC:  MOVFF  01,218
2000:  RCALL  1C26
....................       si++; 
2002:  MOVLB  2
2004:  INCF   x0A,F
....................       continue; 
2006:  BRA    1D9C
....................     
.................... LOOPBUFFERLbl:  //will loop through a number of script commands, argument is the number if bytes to loop through  
....................       if (!first_iteration_LB) 
2008:  BTFSC  x0E.0
200A:  BRA    202A
....................       { 
....................          nbr_iterations--; 
200C:  MOVF   x0F,W
200E:  BTFSC  FD8.2
2010:  DECF   x10,F
2012:  DECF   x0F,F
....................          if (nbr_iterations == 0)   //no iterations  
2014:  MOVF   x0F,F
2016:  BNZ   2022
2018:  MOVF   x10,F
201A:  BNZ   2022
....................          { 
....................             first_iteration_LB = 1; //number of iterations endded for the current run  
201C:  BSF    x0E.0
....................             si ++; 
201E:  INCF   x0A,F
....................             continue; 
2020:  BRA    1D9C
....................          } 
....................          si = first_iteration_LB;   //Still iterating 
2022:  CLRF   x0A
2024:  BTFSC  x0E.0
2026:  INCF   x0A,F
....................          continue; 
2028:  BRA    1D9C
....................       } 
....................       loop_buff_idx = si - *(scriptLocation + ++si); //always loops to the instruction before it, except in the script n 255 in the original Firmware 
202A:  INCF   x0A,F
202C:  BCF    FD8.0
202E:  RLCF   x0A,W
2030:  ADDWF  x08,W
2032:  MOVWF  01
2034:  MOVLW  00
2036:  ADDWFC x09,W
2038:  MOVFF  01,FE9
203C:  MOVWF  FEA
203E:  MOVFF  FEC,03
2042:  MOVF   FED,F
2044:  MOVF   FEF,W
2046:  SUBWF  x0A,W
2048:  MOVWF  x0C
....................       //scrpt_rd_idx -= 2;      //the instruction before LOOPBUFFER has 2 args 
....................       nbr_iterations = (unsigned int16) pop_down_buff ();   //low byte 
204A:  MOVLB  0
204C:  RCALL  1C6A
204E:  MOVLB  2
2050:  CLRF   x10
2052:  MOVFF  01,20F
....................       nbr_iterations += (256  *  pop_down_buff ());         //upper byte 
2056:  MOVLB  0
2058:  RCALL  1C6A
205A:  MOVLW  00
205C:  MOVLB  2
205E:  ADDWF  x0F,F
2060:  MOVF   01,W
2062:  ADDWFC x10,F
....................       if (nbr_iterations == 0)   //no iterations  
2064:  MOVF   x0F,F
2066:  BNZ   2070
2068:  MOVF   x10,F
206A:  BNZ   2070
....................       { 
....................          si++; //advance to next command  
206C:  INCF   x0A,F
....................          continue; 
206E:  BRA    1D9C
....................       } 
....................       first_iteration_LB = 0; 
2070:  BCF    x0E.0
....................       si = loop_buff_idx;   
2072:  MOVFF  20C,20A
....................       continue; 
2076:  BRA    1D9C
....................        
.................... WRITE_SFRLbl: 
....................       SFR_ptr = (unsigned int8 *) 0x0F00 + *(scriptLocation + ++si); 
2078:  INCF   x0A,F
207A:  BCF    FD8.0
207C:  RLCF   x0A,W
207E:  ADDWF  x08,W
2080:  MOVWF  01
2082:  MOVLW  00
2084:  ADDWFC x09,W
2086:  MOVFF  01,FE9
208A:  MOVWF  FEA
208C:  MOVFF  FEC,03
2090:  MOVF   FED,F
2092:  MOVFF  FEF,215
2096:  MOVLW  0F
2098:  ADDWF  03,W
209A:  MOVWF  x16
....................       *SFR_ptr = *(scriptLocation + ++si); 
209C:  INCF   x0A,F
209E:  BCF    FD8.0
20A0:  RLCF   x0A,W
20A2:  ADDWF  x08,W
20A4:  MOVWF  01
20A6:  MOVLW  00
20A8:  ADDWFC x09,W
20AA:  MOVFF  01,FE9
20AE:  MOVWF  FEA
20B0:  MOVFF  FEC,03
20B4:  MOVF   FED,F
20B6:  MOVFF  FEF,219
20BA:  MOVFF  216,FEA
20BE:  MOVFF  215,FE9
20C2:  MOVFF  219,FEF
....................       si++; 
20C6:  INCF   x0A,F
....................       continue; 
20C8:  BRA    1D9C
....................  
.................... READ_SFRLbl: 
....................       SFR_ptr = (unsigned int8 *) 0x0F00 + *(scriptLocation + ++si); 
20CA:  INCF   x0A,F
20CC:  BCF    FD8.0
20CE:  RLCF   x0A,W
20D0:  ADDWF  x08,W
20D2:  MOVWF  01
20D4:  MOVLW  00
20D6:  ADDWFC x09,W
20D8:  MOVFF  01,FE9
20DC:  MOVWF  FEA
20DE:  MOVFF  FEC,03
20E2:  MOVF   FED,F
20E4:  MOVFF  FEF,215
20E8:  MOVLW  0F
20EA:  ADDWF  03,W
20EC:  MOVWF  x16
....................       write_upload_buff(*SFR_ptr); 
20EE:  MOVFF  216,03
20F2:  MOVFF  215,FE9
20F6:  MOVFF  216,FEA
20FA:  MOVFF  FEF,217
20FE:  MOVFF  217,218
2102:  MOVLB  0
2104:  RCALL  1C26
....................       si++; 
2106:  MOVLB  2
2108:  INCF   x0A,F
....................       continue; 
210A:  BRA    1D9C
....................        
.................... EXIT_SCRIPTLbl: 
....................       si = scrpt_len; 
210C:  MOVFF  207,20A
....................       continue; 
2110:  BRA    1D9C
....................        
.................... GOTO_IDXLbl: 
....................       si = *(scriptLocation + ++si); 
2112:  INCF   x0A,F
2114:  BCF    FD8.0
2116:  RLCF   x0A,W
2118:  ADDWF  x08,W
211A:  MOVWF  01
211C:  MOVLW  00
211E:  ADDWFC x09,W
2120:  MOVFF  01,FE9
2124:  MOVWF  FEA
2126:  MOVFF  FEF,20A
....................       continue; 
212A:  BRA    1D9C
....................        
.................... IF_GT_GOTOLbl: //if last loaded byte in DATA_Out_Buffer is greater than arg[1], execution will branch to offset specified by arg[2]  
....................       temp = DATA_Out_Buffer[DOM_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written 
212C:  MOVLW  01
212E:  MOVLB  0
2130:  SUBWF  xEC,W
2132:  CLRF   03
2134:  ADDLW  6B
2136:  MOVWF  FE9
2138:  MOVLW  00
213A:  ADDWFC 03,W
213C:  MOVWF  FEA
213E:  MOVFF  FEF,20D
....................       if (temp > *(scriptLocation + ++si)) 
2142:  MOVLB  2
2144:  INCF   x0A,F
2146:  BCF    FD8.0
2148:  RLCF   x0A,W
214A:  ADDWF  x08,W
214C:  MOVWF  01
214E:  MOVLW  00
2150:  ADDWFC x09,W
2152:  MOVFF  01,FE9
2156:  MOVWF  FEA
2158:  MOVFF  FEC,03
215C:  MOVF   FED,F
215E:  MOVFF  FEF,01
2162:  MOVF   03,F
2164:  BNZ   2188
2166:  MOVF   x0D,W
2168:  SUBWF  01,W
216A:  BC    2188
....................       { 
....................          si += (signed int8) *(scriptLocation + ++si); 
216C:  INCF   x0A,F
216E:  BCF    FD8.0
2170:  RLCF   x0A,W
2172:  ADDWF  x08,W
2174:  MOVWF  01
2176:  MOVLW  00
2178:  ADDWFC x09,W
217A:  MOVFF  01,FE9
217E:  MOVWF  FEA
2180:  MOVF   FEF,W
2182:  ADDWF  x0A,W
2184:  MOVWF  x0A
....................       } 
2186:  BRA    218A
....................       else  
....................       { 
....................          si++; 
2188:  INCF   x0A,F
....................       } 
....................       continue; 
218A:  BRA    1D9C
....................        
.................... IF_EQ_GOTOLbl: //if last loaded byte in DATA_Out_Buffer is equal than arg[1], execution will branch to offset specified by arg[2]  
....................       temp = DATA_Out_Buffer[DOM_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written 
218C:  MOVLW  01
218E:  MOVLB  0
2190:  SUBWF  xEC,W
2192:  CLRF   03
2194:  ADDLW  6B
2196:  MOVWF  FE9
2198:  MOVLW  00
219A:  ADDWFC 03,W
219C:  MOVWF  FEA
219E:  MOVFF  FEF,20D
....................       if (temp == *(scriptLocation + ++si)) 
21A2:  MOVLB  2
21A4:  INCF   x0A,F
21A6:  BCF    FD8.0
21A8:  RLCF   x0A,W
21AA:  ADDWF  x08,W
21AC:  MOVWF  01
21AE:  MOVLW  00
21B0:  ADDWFC x09,W
21B2:  MOVFF  01,FE9
21B6:  MOVWF  FEA
21B8:  MOVFF  FEC,03
21BC:  MOVF   FED,F
21BE:  MOVF   FEF,W
21C0:  SUBWF  x0D,W
21C2:  BNZ   21E4
21C4:  MOVF   03,F
21C6:  BNZ   21E4
....................       { 
....................          si += (signed int8) *(scriptLocation + ++si); 
21C8:  INCF   x0A,F
21CA:  BCF    FD8.0
21CC:  RLCF   x0A,W
21CE:  ADDWF  x08,W
21D0:  MOVWF  01
21D2:  MOVLW  00
21D4:  ADDWFC x09,W
21D6:  MOVFF  01,FE9
21DA:  MOVWF  FEA
21DC:  MOVF   FEF,W
21DE:  ADDWF  x0A,W
21E0:  MOVWF  x0A
....................       } 
21E2:  BRA    21E6
....................       else  
....................       { 
....................          si++; 
21E4:  INCF   x0A,F
....................       } 
....................       continue; 
21E6:  BRA    1D9C
....................        
.................... SHORT_DELAYLbl:      //causes a delay of : duration * 21.3us, NOTE : 0 = 255 
....................       delay_short (*(scriptLocation + ++si)); 
21E8:  INCF   x0A,F
21EA:  BCF    FD8.0
21EC:  RLCF   x0A,W
21EE:  ADDWF  x08,W
21F0:  MOVWF  01
21F2:  MOVLW  00
21F4:  ADDWFC x09,W
21F6:  MOVWF  03
21F8:  MOVFF  01,FE9
21FC:  MOVWF  FEA
21FE:  MOVFF  FEC,218
2202:  MOVF   FED,F
2204:  MOVFF  FEF,217
2208:  MOVFF  217,219
220C:  MOVLB  0
220E:  BRA    1CB2
....................       si++; 
2210:  MOVLB  2
2212:  INCF   x0A,F
....................       continue; 
2214:  BRA    1D9C
....................        
.................... LONG_DELAYLbl: 
....................       delay_long (*(scriptLocation + ++si)); 
2216:  INCF   x0A,F
2218:  BCF    FD8.0
221A:  RLCF   x0A,W
221C:  ADDWF  x08,W
221E:  MOVWF  01
2220:  MOVLW  00
2222:  ADDWFC x09,W
2224:  MOVWF  03
2226:  MOVFF  01,FE9
222A:  MOVWF  FEA
222C:  MOVFF  FEC,218
2230:  MOVF   FED,F
2232:  MOVFF  FEF,217
2236:  MOVFF  217,219
223A:  MOVLB  0
223C:  BRA    1CCE
....................       si++; 
223E:  MOVLB  2
2240:  INCF   x0A,F
....................       continue; 
2242:  BRA    1D9C
....................        
.................... LOOPLbl: 
....................       if (!first_iteration_L) 
2244:  BTFSC  x0E.1
2246:  BRA    2260
....................       { 
....................          loop_count--; 
2248:  MOVF   x11,W
224A:  BTFSC  FD8.2
224C:  DECF   x12,F
224E:  DECF   x11,F
....................          if (loop_count == 0) 
2250:  MOVF   x11,F
2252:  BNZ   2260
2254:  MOVF   x12,F
2256:  BNZ   2260
....................          { 
....................             first_iteration_L = 1; 
2258:  BSF    x0E.1
....................             si += 3; //LOOP command + 2 args 
225A:  MOVLW  03
225C:  ADDWF  x0A,F
....................             continue; 
225E:  BRA    1D9C
....................          } 
....................       } 
....................       first_iteration_L = 0; 
2260:  BCF    x0E.1
....................       loop_idx = si - *(scriptLocation + si + 1); 
2262:  BCF    FD8.0
2264:  RLCF   x0A,W
2266:  ADDWF  x08,W
2268:  MOVWF  x17
226A:  MOVLW  00
226C:  ADDWFC x09,W
226E:  MOVWF  x18
2270:  MOVLW  02
2272:  ADDWF  x17,W
2274:  MOVWF  01
2276:  MOVLW  00
2278:  ADDWFC x18,W
227A:  MOVFF  01,FE9
227E:  MOVWF  FEA
2280:  MOVFF  FEC,03
2284:  MOVF   FED,F
2286:  MOVF   FEF,W
2288:  SUBWF  x0A,W
228A:  MOVWF  x13
228C:  MOVLW  00
228E:  SUBFWB 03,W
2290:  MOVWF  x14
....................       loop_count = *(scriptLocation + si + 2); 
2292:  BCF    FD8.0
2294:  RLCF   x0A,W
2296:  ADDWF  x08,W
2298:  MOVWF  x17
229A:  MOVLW  00
229C:  ADDWFC x09,W
229E:  MOVWF  x18
22A0:  MOVLW  04
22A2:  ADDWF  x17,W
22A4:  MOVWF  01
22A6:  MOVLW  00
22A8:  ADDWFC x18,W
22AA:  MOVFF  01,FE9
22AE:  MOVWF  FEA
22B0:  MOVFF  FEC,212
22B4:  MOVF   FED,F
22B6:  MOVFF  FEF,211
....................       si = loop_idx; 
22BA:  MOVFF  213,20A
....................       continue; 
22BE:  BRA    1D9C
....................   
.................... //SET_ICSP_RATELbl: 
.................... //      icsp_rate = *(scriptLocation + ++si); 
.................... //      si++; 
.................... //      continue; 
....................  
.................... SHIFT_BITS_IN_LBL: 
....................       shift_bits_in(*(scriptLocation + ++si)); 
22C0:  INCF   x0A,F
22C2:  BCF    FD8.0
22C4:  RLCF   x0A,W
22C6:  ADDWF  x08,W
22C8:  MOVWF  01
22CA:  MOVLW  00
22CC:  ADDWFC x09,W
22CE:  MOVWF  03
22D0:  MOVFF  01,FE9
22D4:  MOVWF  FEA
22D6:  MOVFF  FEC,218
22DA:  MOVF   FED,F
22DC:  MOVFF  FEF,217
22E0:  MOVFF  217,219
22E4:  MOVLB  0
22E6:  RCALL  1CE8
....................       si++; 
22E8:  MOVLB  2
22EA:  INCF   x0A,F
....................       continue; 
22EC:  BRA    1D9C
....................        
.................... SHIFT_BITS_IN_BUFFER_LBL: 
....................       write_upload_buff(shift_bits_in(*(scriptLocation + ++si))); 
22EE:  INCF   x0A,F
22F0:  BCF    FD8.0
22F2:  RLCF   x0A,W
22F4:  ADDWF  x08,W
22F6:  MOVWF  01
22F8:  MOVLW  00
22FA:  ADDWFC x09,W
22FC:  MOVWF  03
22FE:  MOVFF  01,FE9
2302:  MOVWF  FEA
2304:  MOVFF  FEC,218
2308:  MOVF   FED,F
230A:  MOVFF  FEF,217
230E:  MOVFF  217,219
2312:  MOVLB  0
2314:  RCALL  1CE8
2316:  MOVFF  01,217
231A:  MOVFF  01,218
231E:  RCALL  1C26
....................       si++; 
2320:  MOVLB  2
2322:  INCF   x0A,F
....................       continue; 
2324:  BRA    1D9C
....................        
.................... SHIFT_BITS_OUT_BUFFER_LBL: //Shift bits located in DATA_In_Buffer out  
....................       shift_bits_out (pop_down_buff(), *(scriptLocation + ++si)); 
2326:  MOVLB  0
2328:  RCALL  1C6A
232A:  MOVFF  01,217
232E:  MOVLB  2
2330:  INCF   x0A,F
2332:  BCF    FD8.0
2334:  RLCF   x0A,W
2336:  ADDWF  x08,W
2338:  MOVWF  01
233A:  MOVLW  00
233C:  ADDWFC x09,W
233E:  MOVWF  03
2340:  MOVFF  01,FE9
2344:  MOVWF  FEA
2346:  MOVFF  FEC,219
234A:  MOVF   FED,F
234C:  MOVFF  FEF,218
2350:  MOVFF  217,21B
2354:  MOVFF  218,21C
2358:  MOVLB  0
235A:  RCALL  1D22
....................       si++; 
235C:  MOVLB  2
235E:  INCF   x0A,F
....................       continue; 
2360:  BRA    1D9C
....................        
.................... SHIFT_BITS_OUT_LBL: 
....................       shift_bits_out (*(scriptLocation + si + 2), *(scriptLocation + si + 1)); 
2362:  BCF    FD8.0
2364:  RLCF   x0A,W
2366:  ADDWF  x08,W
2368:  MOVWF  x17
236A:  MOVLW  00
236C:  ADDWFC x09,W
236E:  MOVWF  x18
2370:  MOVLW  04
2372:  ADDWF  x17,W
2374:  MOVWF  01
2376:  MOVLW  00
2378:  ADDWFC x18,W
237A:  MOVWF  03
237C:  MOVFF  01,FE9
2380:  MOVWF  FEA
2382:  MOVFF  FEC,218
2386:  MOVF   FED,F
2388:  MOVFF  FEF,217
238C:  BCF    FD8.0
238E:  RLCF   x0A,W
2390:  ADDWF  x08,W
2392:  MOVWF  x19
2394:  MOVLW  00
2396:  ADDWFC x09,W
2398:  MOVWF  x1A
239A:  MOVLW  02
239C:  ADDWF  x19,W
239E:  MOVWF  01
23A0:  MOVLW  00
23A2:  ADDWFC x1A,W
23A4:  MOVWF  03
23A6:  MOVFF  01,FE9
23AA:  MOVWF  FEA
23AC:  MOVFF  FEC,21A
23B0:  MOVF   FED,F
23B2:  MOVFF  FEF,219
23B6:  MOVFF  217,21B
23BA:  MOVFF  219,21C
23BE:  MOVLB  0
23C0:  RCALL  1D22
....................       si += 3; 
23C2:  MOVLW  03
23C4:  MOVLB  2
23C6:  ADDWF  x0A,F
....................       continue; 
23C8:  BRA    1D9C
....................        
.................... SHIFT_BYTE_IN_LBL: 
....................       shift_bits_in(8); 
23CA:  MOVLW  08
23CC:  MOVWF  x19
23CE:  MOVLB  0
23D0:  RCALL  1CE8
....................       si++; 
23D2:  MOVLB  2
23D4:  INCF   x0A,F
....................       continue; 
23D6:  BRA    1D9C
....................        
.................... SHIFT_BYTE_IN_BUFFER_LBL: 
....................       write_upload_buff (shift_bits_in(8)); 
23D8:  MOVLW  08
23DA:  MOVWF  x19
23DC:  MOVLB  0
23DE:  RCALL  1CE8
23E0:  MOVFF  01,217
23E4:  MOVFF  01,218
23E8:  RCALL  1C26
....................       si++; 
23EA:  MOVLB  2
23EC:  INCF   x0A,F
....................       continue; 
23EE:  BRA    1D9C
....................        
.................... SHIFT_BYTE_OUT_BUFFER_LBL: 
....................       shift_bits_out (pop_down_buff(), 8); 
23F0:  MOVLB  0
23F2:  RCALL  1C6A
23F4:  MOVFF  01,217
23F8:  MOVFF  01,21B
23FC:  MOVLW  08
23FE:  MOVLB  2
2400:  MOVWF  x1C
2402:  MOVLB  0
2404:  RCALL  1D22
....................       si++; 
2406:  MOVLB  2
2408:  INCF   x0A,F
....................       continue; 
240A:  BRA    1D9C
....................        
.................... SHIFT_BYTE_OUT_LBL: 
....................       shift_bits_out (*(scriptLocation + ++si), 8); 
240C:  INCF   x0A,F
240E:  BCF    FD8.0
2410:  RLCF   x0A,W
2412:  ADDWF  x08,W
2414:  MOVWF  01
2416:  MOVLW  00
2418:  ADDWFC x09,W
241A:  MOVWF  03
241C:  MOVFF  01,FE9
2420:  MOVWF  FEA
2422:  MOVFF  FEC,218
2426:  MOVF   FED,F
2428:  MOVFF  FEF,217
242C:  MOVFF  217,21B
2430:  MOVLW  08
2432:  MOVWF  x1C
2434:  MOVLB  0
2436:  RCALL  1D22
....................       si++; 
2438:  MOVLB  2
243A:  INCF   x0A,F
....................       continue; 
243C:  BRA    1D9C
....................        
.................... SET_ICSP_PINS_LBL: 
....................       icsp_pins_states = *(scriptLocation + ++si); 
243E:  INCF   x0A,F
2440:  BCF    FD8.0
2442:  RLCF   x0A,W
2444:  ADDWF  x08,W
2446:  MOVWF  01
2448:  MOVLW  00
244A:  ADDWFC x09,W
244C:  MOVFF  01,FE9
2450:  MOVWF  FEA
2452:  MOVFF  FEF,6A
....................       set_icsp_pins(icsp_pins_states); 
2456:  MOVFF  6A,217
245A:  MOVLB  0
245C:  BRA    1D40
....................       si++; 
245E:  MOVLB  2
2460:  INCF   x0A,F
....................       continue; 
2462:  BRA    1D9C
....................        
.................... MCLR_TGT_GND_OFF_LBL: 
....................       #ASM 
....................          BCF   MCLR_TGT 
2464:  BCF    F89.5
....................       #ENDASM 
....................       si++; 
2466:  INCF   x0A,F
....................       continue; 
2468:  BRA    1D9C
....................  
.................... MCLR_TGT_GND_ON_LBL: 
....................       #ASM 
....................          BSF   MCLR_TGT 
246A:  BSF    F89.5
....................       #ENDASM 
....................       si++; 
246C:  INCF   x0A,F
....................       continue; 
246E:  BRA    1D9C
....................        
.................... VPP_PWM_OFF_LBL: 
....................       CCP2CON = 0x00; //Turn off PWM, DS page 143 
2470:  CLRF   FBA
....................       Vpp_PUMP = 0; 
2472:  BCF    F8B.1
....................       si++; 
2474:  INCF   x0A,F
....................       continue; 
2476:  BRA    1D9C
....................        
.................... VPP_PWM_ON_LBL: 
....................       CCP2CON = 0x0C; //PWM mode, DS page 143 
2478:  MOVLW  0C
247A:  MOVWF  FBA
....................       si++; 
247C:  INCF   x0A,F
....................       continue; 
247E:  BRA    1D9C
....................        
.................... VPP_ON_LBL: 
....................       #ASM 
....................          BSF   Vpp_ON 
2480:  BSF    F8A.2
....................       #ENDASM 
....................       si++;  
2482:  INCF   x0A,F
....................       continue; 
2484:  BRA    1D9C
....................   
....................  VPP_OFF_LBL: 
....................       #ASM 
....................          BCF   Vpp_ON 
2486:  BCF    F8A.2
....................       #ENDASM 
....................       si++;  
2488:  INCF   x0A,F
....................       continue; 
248A:  BRA    1D9C
....................        
.................... VDD_GND_ON_LBL: 
....................       #ASM 
....................          BSF   Vdd_TGT_N 
248C:  BSF    F8A.3
....................       #ENDASM 
....................       si++;  
248E:  INCF   x0A,F
....................       continue; 
2490:  BRA    1D9C
....................        
.................... VDD_GND_OFF_LBL: 
....................       #ASM 
....................          BCF   Vdd_TGT_N 
2492:  BCF    F8A.3
....................       #ENDASM 
....................       si++;  
2494:  INCF   x0A,F
....................       continue; 
2496:  BRA    1D9C
....................   
.................... VDD_ON_LBL: 
....................       #ASM 
....................          BCF   Vdd_TGT_P 
2498:  BCF    F8A.4
....................       #ENDASM 
....................       si++;  
249A:  INCF   x0A,F
....................       continue; 
249C:  BRA    1D9C
....................        
.................... VDD_OFF_LBL: 
....................       #ASM 
....................          BSF   Vdd_TGT_P 
249E:  BSF    F8A.4
....................       #ENDASM 
....................       si++;  
24A0:  INCF   x0A,F
....................       continue; 
24A2:  BRA    1D9C
24A4:  BRA    1D9C
....................        
....................    } //end of while loop 
24A6:  MOVLB  0
24A8:  GOTO   26E0 (RETURN)
.................... } 
....................  
....................  
.................... /*  
....................  * FOR PIC24F 
....................  * Reads N bits and copy them in the upload buffer  
....................  * **read_n_bits_24(n)** 
.................... */ 
.................... unsigned int8 read_n_bits_24(unsigned int8 numberOfBits) 
*
1C02:  MOVLB  2
1C04:  CLRF   x1A
.................... { 
....................    unsigned int8 bitsBuff = 0; //Bits are shifted in here  
....................    //unsigned int8 iteration = numberOfBits; 
....................    #ASM 
....................       BSF      tris_ICSPDAT  //Set PGD pin as input 
1C06:  BSF    F92.2
....................       //MOVLW 0x01        //this will be used to set the bits  
....................    READBITSLOOP: 
....................       BTFSC    ICSPDAT_in  //read PGD pin 
1C08:  BTFSC  F80.2
....................       BSF      bitsBuff,0      //If PGD was high, set the corresponding bit starting from LSB 
1C0A:  BSF    x1A.0
....................       BSF      ICSPCLK_out       //Clock rising edge 
1C0C:  BSF    F89.3
1C0E:  NOP   
....................       //RLNCF    W,W               //Rotate W left, (no carry) 
....................       NOP 
1C10:  NOP   
....................       NOP 
1C12:  NOP   
....................       NOP 
....................       BCF      ICSPCLK_out    //Clock falling edge  
1C14:  BCF    F89.3
1C16:  NOP   
....................       NOP 
....................       RRNCF    bitsBuff, f    //Rotate right (no carry) 
1C18:  RRNCF  x1A,F
....................       DECFSZ   numberOfBits, f 
1C1A:  DECFSZ x19,F
....................       BRA      READBITSLOOP 
1C1C:  BRA    1C08
....................    #ENDASM 
....................    return bitsBuff; 
1C1E:  MOVFF  21A,01
1C22:  MOVLB  0
1C24:  RETURN 0
.................... } 
....................  
....................  
.................... void write_upload_buff(unsigned int8 wrByte) 
.................... { 
....................    if (DOM_mngnt.nbr_bytes > 127)  
1C26:  MOVF   xED,W
1C28:  SUBLW  7F
1C2A:  BC    1C2E
....................    { 
....................       return; 
1C2C:  BRA    1C4C
....................    } 
....................    DATA_Out_Buffer[DOM_mngnt.wr_idx++] = wrByte; 
1C2E:  MOVF   xEC,W
1C30:  INCF   xEC,F
1C32:  CLRF   03
1C34:  ADDLW  6B
1C36:  MOVWF  FE9
1C38:  MOVLW  00
1C3A:  ADDWFC 03,W
1C3C:  MOVWF  FEA
1C3E:  MOVFF  218,FEF
....................    if (DOM_mngnt.wr_idx > 127) 
1C42:  MOVF   xEC,W
1C44:  SUBLW  7F
1C46:  BC    1C4A
....................       DOM_mngnt.wr_idx = 0; 
1C48:  CLRF   xEC
....................     
....................    DOM_mngnt.nbr_bytes++; 
1C4A:  INCF   xED,F
1C4C:  RETURN 0
.................... } 
....................  
.................... /* 
....................  * Note: ICSP pins must be set to outputs 
....................  * 
....................  * 
.................... */ 
.................... void shiftBitsOutICSP (unsigned int8 charToBeShifted, unsigned int8 numberOfBits) 
.................... { 
....................    //unsigned int8 tempChar = charToBeShifted; 
....................     
....................     
....................    #ASM 
....................       BITSOUTLOOP: 
....................          BTFSS    charToBeShifted,0 
1C4E:  MOVLB  2
1C50:  BTFSS  x19.0
....................          BCF      ICSPDAT_out    //If LSB of charToBeShifted is 0, clear PGD pin 
1C52:  BCF    F89.2
....................          BTFSC    charToBeShifted,0 
1C54:  BTFSC  x19.0
....................          BCF      ICSPDAT_out 
1C56:  BCF    F89.2
1C58:  NOP   
....................          NOP 
....................          BSF      ICSPCLK_out    //Clock rising edge  
1C5A:  BSF    F89.3
1C5C:  NOP   
....................          NOP 
....................          BCF      ICSPCLK_out 
1C5E:  BCF    F89.3
....................          RRNCF    charToBeShifted,f 
1C60:  RRNCF  x19,F
....................          DECFSZ   numberOfBits 
1C62:  DECFSZ x1A,F
....................          BRA      BITSOUTLOOP 
1C64:  BRA    1C50
....................    #ENDASM 
1C66:  MOVLB  0
1C68:  RETURN 0
.................... } 
....................  
.................... unsigned int8 getICSP_States(void) 
*
1C98:  MOVLB  2
1C9A:  CLRF   x17
.................... { 
....................    unsigned int8 state = 0; 
....................    if (ICSPDAT_in == 1)    //ICSPDAT_in = PORTA.2 
1C9C:  BTFSS  F80.2
1C9E:  BRA    1CA2
....................       state |= 0x02; 
1CA0:  BSF    x17.1
....................    if (ICSPCLK_in == 1)    //ICSPCLK_in = PORTA.3 
1CA2:  BTFSS  F80.3
1CA4:  BRA    1CA8
....................       state |= 0x01; 
1CA6:  BSF    x17.0
....................        
....................    return state; 
1CA8:  MOVFF  217,01
1CAC:  MOVLB  0
1CAE:  GOTO   1FF8 (RETURN)
.................... } 
....................  
.................... //Return a byte from the DATA_In_Buffer 
.................... unsigned int8 pop_down_buff (void) 
.................... { 
....................    unsigned int8 popped;  
....................    if (DIB_mngnt.nbr_bytes == 0) 
*
1C6A:  MOVLB  1
1C6C:  MOVF   xF0,F
1C6E:  BNZ   1C76
....................    { 
....................       return 0; 
1C70:  MOVLW  00
1C72:  MOVWF  01
1C74:  BRA    1C94
....................    } 
....................    popped = DATA_In_Buffer[DIB_mngnt.rd_idx++]; 
1C76:  MOVF   xEE,W
1C78:  INCF   xEE,F
1C7A:  CLRF   03
1C7C:  ADDLW  EE
1C7E:  MOVWF  FE9
1C80:  MOVLW  00
1C82:  ADDWFC 03,W
1C84:  MOVWF  FEA
1C86:  MOVFF  FEF,217
....................    DIB_mngnt.nbr_bytes--; 
1C8A:  DECF   xF0,F
....................    if (DIB_mngnt.rd_idx > 255) 
....................       DIB_mngnt.rd_idx = 0; 
....................     
....................    return popped; 
1C8C:  MOVLB  2
1C8E:  MOVFF  217,01
1C92:  MOVLB  1
1C94:  MOVLB  0
1C96:  RETURN 0
.................... } 
....................  
.................... //Each Timer0's lower byte increment is 21.3 uS, there's a delay of 12 uS between script commands, it is ignored here 
.................... void delay_short (unsigned int8 duration) 
.................... { 
....................    #ASM 
....................       BCF   TMR0IF   //Clear timer0 interrupt flag 
*
1CB2:  BCF    FF2.2
....................       MOVLW    0xFF     //So that the timer will overflow when TMR0L does 
1CB4:  MOVLW  FF
....................       MOVWF    TMR0H 
1CB6:  MOVWF  FD7
....................    #ENDASM 
....................    TMR0L = 0 - duration; 
1CB8:  MOVLB  2
1CBA:  COMF   x19,W
1CBC:  MOVWF  FD6
1CBE:  INCF   FD6,F
....................    TMR0ON = 1; //start Timer0, DS page 127 
1CC0:  BSF    FD5.7
....................    while (TMR0IF == 0); //Wait for overflow flag to be set 
1CC2:  BTFSS  FF2.2
1CC4:  BRA    1CC2
....................    TMR0ON = 0; //Stop Timer0 
1CC6:  BCF    FD5.7
1CC8:  MOVLB  0
1CCA:  GOTO   2210 (RETURN)
....................     
.................... } 
....................  
.................... //Each Timer0's upper byte increment is 5.46mS 
.................... void delay_long (unsigned int8 duration) 
.................... { 
....................    TMR0IF = 0; 
1CCE:  BCF    FF2.2
....................    TMR0H = 0 - duration; 
1CD0:  MOVLB  2
1CD2:  COMF   x19,W
1CD4:  MOVWF  FD7
1CD6:  INCF   FD7,F
....................    TMR0L = 0; 
1CD8:  CLRF   FD6
....................    TMR0ON = 1; //Start Timer0 
1CDA:  BSF    FD5.7
....................    while (TMR0IF == 0); //Wait for overflow flag to be set 
1CDC:  BTFSS  FF2.2
1CDE:  BRA    1CDC
....................    TMR0ON = 0; //Stop Timer0 
1CE0:  BCF    FD5.7
1CE2:  MOVLB  0
1CE4:  GOTO   223E (RETURN)
.................... } 
....................  
.................... unsigned int8 shift_bits_in (unsigned int8 number_of_bits) 
1CE8:  MOVLB  2
1CEA:  CLRF   x1A
.................... { 
....................     
....................    unsigned int8 bits_buff = 0; //Bits are shifted in here  
....................    #ASM 
....................       BSF      tris_ICSPDAT  //Set PGD pin as input 
1CEC:  BSF    F92.2
....................    READBITSLOOP: 
....................       BSF      ICSPCLK_out       //Clock rising edge 
1CEE:  BSF    F89.3
1CF0:  NOP   
....................       NOP 
1CF2:  NOP   
....................       NOP 
1CF4:  NOP   
....................       NOP 
....................       BTFSC    ICSPDAT_in  //read PGD pin 
1CF6:  BTFSC  F80.2
....................       BSF      bits_buff,0      //If PGD was high, set the corresponding bit starting from LSB 
1CF8:  BSF    x1A.0
....................       BCF      ICSPCLK_out    //Clock falling edge  
1CFA:  BCF    F89.3
1CFC:  NOP   
....................       NOP 
....................       RRNCF    bits_buff, f    //Rotate right (no carry) 
1CFE:  RRNCF  x1A,F
....................       DECFSZ   number_of_bits, f 
1D00:  DECFSZ x19,F
....................       BRA      READBITSLOOP 
1D02:  BRA    1CEE
....................       BCF      tris_ICSPDAT //PGD set as output 
1D04:  BCF    F92.2
....................    #ENDASM 
....................    bits_buff >>= (8 - number_of_bits); //right justified 
1D06:  MOVLW  08
1D08:  BSF    FD8.0
1D0A:  SUBFWB x19,W
1D0C:  MOVWF  01
1D0E:  MOVF   01,F
1D10:  BZ    1D1A
1D12:  BCF    FD8.0
1D14:  RRCF   x1A,F
1D16:  DECFSZ 01,F
1D18:  BRA    1D12
....................    return bits_buff; 
1D1A:  MOVFF  21A,01
1D1E:  MOVLB  0
1D20:  RETURN 0
.................... } 
....................  
.................... void shift_bits_out (unsigned int8  outb, unsigned int8 number_of_bits) 
.................... { 
....................    #ASM 
....................       BCF   tris_ICSPDAT   //Make sure PGD pin is set as output 
1D22:  BCF    F92.2
....................       WRITELOOP: 
....................          BTFSS    outb,0 
1D24:  MOVLB  2
1D26:  BTFSS  x1B.0
....................          BCF      ICSPDAT_out 
1D28:  BCF    F89.2
....................          BTFSC    outb,0 
1D2A:  BTFSC  x1B.0
....................          BSF      ICSPDAT_out 
1D2C:  BSF    F89.2
1D2E:  NOP   
....................          NOP 
....................          BSF      ICSPCLK_out //Clock rising edge 
1D30:  BSF    F89.3
1D32:  NOP   
....................          NOP 
....................          BCF      ICSPCLK_out  //Clock falling edge  
1D34:  BCF    F89.3
....................          RRNCF    outb 
1D36:  RRNCF  x1B,F
....................          DECFSZ   number_of_bits 
1D38:  DECFSZ x1C,F
....................          BRA      WRITELOOP 
1D3A:  BRA    1D26
....................    #ENDASM 
1D3C:  MOVLB  0
1D3E:  RETURN 0
.................... } 
....................  
.................... void set_icsp_pins(unsigned int8 state) 
.................... { 
....................    ICSPCLK_out  = (state & 0x04) ? 1 : 0; //state[0] = Clock state 
1D40:  MOVLB  2
1D42:  BTFSS  x17.2
1D44:  BRA    1D4A
1D46:  MOVLW  01
1D48:  BRA    1D4C
1D4A:  MOVLW  00
1D4C:  BCF    F89.3
1D4E:  BTFSC  FE8.0
1D50:  BSF    F89.3
....................    ICSPDAT_out  = (state & 0x08) ? 1 : 0; //state[0] = Data state 
1D52:  BTFSS  x17.3
1D54:  BRA    1D5A
1D56:  MOVLW  01
1D58:  BRA    1D5C
1D5A:  MOVLW  00
1D5C:  BCF    F89.2
1D5E:  BTFSC  FE8.0
1D60:  BSF    F89.2
....................    tris_ICSPCLK = (state & 0x01) ? 1 : 0; //state[0] = Clock direction 
1D62:  BTFSS  x17.0
1D64:  BRA    1D6A
1D66:  MOVLW  01
1D68:  BRA    1D6C
1D6A:  MOVLW  00
1D6C:  BCF    F92.3
1D6E:  BTFSC  FE8.0
1D70:  BSF    F92.3
....................    tris_ICSPDAT = (state & 0x02) ? 1 : 0; //state[1] = Data direction 
1D72:  BTFSS  x17.1
1D74:  BRA    1D7A
1D76:  MOVLW  01
1D78:  BRA    1D7C
1D7A:  MOVLW  00
1D7C:  BCF    F92.2
1D7E:  BTFSC  FE8.0
1D80:  BSF    F92.2
1D82:  MOVLB  0
1D84:  GOTO   245E (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #ENDIF 
....................  
....................  
....................  
....................  
....................  
.................... void main() 
*
2700:  CLRF   FF8
2702:  BCF    FD0.7
2704:  BSF    07.7
2706:  MOVF   FC1,W
2708:  ANDLW  C0
270A:  IORLW  0F
270C:  MOVWF  FC1
270E:  MOVLW  07
2710:  MOVWF  FB4
2712:  MOVLW  02
2714:  MOVWF  28
2716:  MOVLW  34
2718:  MOVWF  27
271A:  MOVLW  01
271C:  MOVLB  2
271E:  MOVWF  x35
2720:  MOVLW  C8
2722:  MOVWF  x34
2724:  MOVLW  05
2726:  MOVWF  x37
2728:  MOVLW  10
272A:  MOVWF  x36
272C:  MOVLW  02
272E:  MOVLB  5
2730:  MOVWF  x11
2732:  MOVLW  EC
2734:  MOVWF  x10
2736:  CLRF   x13
2738:  CLRF   x12
273A:  MOVLB  0
273C:  CLRF   1B
273E:  MOVLW  04
2740:  MOVWF  1C
2742:  MOVLW  0C
2744:  MOVWF  1D
.................... { 
....................    usb_init_cs();  
2746:  GOTO   0FE6
....................    pgm_init(); 
274A:  GOTO   0FEC
....................     
....................    #ASM  
....................    BSF LATC,0  //Busy LED 
274E:  BSF    F8B.0
....................    #ENDASM 
....................    delay_ms(500); 
2750:  MOVLW  02
2752:  MOVLB  1
2754:  MOVWF  xFE
2756:  MOVLW  FA
2758:  MOVLB  2
275A:  MOVWF  x06
275C:  MOVLB  0
275E:  CALL   1068
2762:  MOVLB  1
2764:  DECFSZ xFE,F
2766:  BRA    2756
....................    #ASM  
....................    BCF LATC,0 
2768:  BCF    F8B.0
....................    #ENDASM 
....................     
....................    while(TRUE) 
....................    { 
....................       usb_task(); 
276A:  MOVLB  0
276C:  GOTO   10B4
....................       if(usb_enumerated()){// If the device has been enumerated by the PC 
2770:  GOTO   10D8
2774:  MOVF   01,F
2776:  BZ    278A
....................          if(usb_kbhit(1)) 
2778:  MOVLW  01
277A:  MOVLB  1
277C:  MOVWF  xFE
277E:  MOVLB  0
2780:  GOTO   10E0
2784:  MOVF   01,F
2786:  BZ    278A
....................          {                  // If endpoint1 has data in its receive buffer 
....................           
....................          Process_Input (); 
2788:  BRA    24AC
....................           
....................           
....................           
....................          /* 
....................            usb_get_packet(1, data, 64); 
....................            delay_ms(1);                          // Wait 1 second 
....................            for (int8 i = 0; i < 64; i++) 
....................            { 
....................                data[i] *= 2; 
....................            } 
....................            // Return the received bytes back 
....................            usb_put_packet(1, data, 64, USB_DTS_TOGGLE);*/ 
....................          } 
....................        } 
278A:  BRA    276C
....................    } 
.................... } 
....................  
278C:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CE2C   PLL5 CPUDIV2 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
