CCS PCH C Compiler, Version 5.008, 5967               17-mars-19 20:42

               Filename:   N:\Should be on the desktop\_PFE\Firmware\PGM Firmware\main.lst

               ROM used:   11068 bytes (34%)
                           Largest free fragment is 14116
               RAM used:   846 (41%) at main() level
                           896 (44%) worst case
               Stack used: 15 locations (6 in main + 9 for interrupts)
               Stack size: 31

*
0000:  GOTO   286C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0FD6
0054:  BTFSS  F9D.6
0056:  GOTO   0060
005A:  BTFSC  F9E.6
005C:  GOTO   1014
0060:  BTFSS  FA0.5
0062:  GOTO   006C
0066:  BTFSC  FA1.5
0068:  GOTO   0F58
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <main.h> 
.................... #IFNDEF MAIN_H 
.................... #DEFINE MAIN_H 
....................  
....................  
.................... #include <18F2550.h> 
.................... //////// Standard Header file for the PIC18F2550 device //////////////// 
.................... #device PIC18F2550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 00,03
00C0:  DATA FF,FF
00C2:  DATA FF,FF
00C4:  DATA FF,FF
00C6:  DATA FF,FF
00C8:  DATA FF,FF
00CA:  DATA FF,FF
00CC:  DATA FF,FF
00CE:  BTFSS  07.7
00D0:  BRA    00D8
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  F0
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSS  07.7
00E8:  BRA    00EE
00EA:  BTFSC  0D.7
00EC:  BSF    FF2.7
00EE:  RETURN 0
00F0:  DATA 40,00
00F2:  DATA 40,00
00F4:  DATA 00,00
00F6:  DATA 00,00
00F8:  DATA 00,00
00FA:  DATA 00,00
00FC:  DATA 00,00
00FE:  DATA 00,00
0100:  DATA 00,00
0102:  DATA 00,00
0104:  DATA 00,00
0106:  DATA 00,00
0108:  DATA 00,00
010A:  DATA 00,00
010C:  DATA 00,00
010E:  DATA 00,00
0110:  CLRF   FF7
0112:  ADDLW  20
0114:  MOVWF  FF6
0116:  MOVLW  01
0118:  ADDWFC FF7,F
011A:  TBLRD*+
011C:  MOVF   FF5,W
011E:  RETURN 0
0120:  DATA 06,00
0122:  DATA FF,09
0124:  DATA 01,A1
0126:  DATA 01,19
0128:  DATA 01,29
012A:  DATA 08,15
012C:  DATA 80,25
012E:  DATA 7F,75
0130:  DATA 08,95
0132:  DATA 40,81
0134:  DATA 02,19
0136:  DATA 01,29
0138:  DATA 08,75
013A:  DATA 08,95
013C:  DATA 40,91
013E:  DATA 02,C0
0140:  CLRF   FF7
0142:  ADDLW  50
0144:  MOVWF  FF6
0146:  MOVLW  01
0148:  ADDWFC FF7,F
014A:  TBLRD*+
014C:  MOVF   FF5,W
014E:  RETURN 0
0150:  DATA 00,00
0152:  CLRF   FF7
0154:  ADDLW  62
0156:  MOVWF  FF6
0158:  MOVLW  01
015A:  ADDWFC FF7,F
015C:  TBLRD*+
015E:  MOVF   FF5,W
0160:  RETURN 0
0162:  DATA 20,00
0164:  CLRF   FF7
0166:  ADDLW  74
0168:  MOVWF  FF6
016A:  MOVLW  01
016C:  ADDWFC FF7,F
016E:  TBLRD*+
0170:  MOVF   FF5,W
0172:  RETURN 0
0174:  DATA 09,02
0176:  DATA 29,00
0178:  DATA 01,01
017A:  DATA 02,80
017C:  DATA 32,09
017E:  DATA 04,00
0180:  DATA 00,02
0182:  DATA 03,00
0184:  DATA 00,00
0186:  DATA 09,21
0188:  DATA 00,01
018A:  DATA 00,01
018C:  DATA 22,20
018E:  DATA 00,07
0190:  DATA 05,81
0192:  DATA 03,40
0194:  DATA 00,01
0196:  DATA 07,05
0198:  DATA 01,03
019A:  DATA 40,00
019C:  DATA 01,00
019E:  CLRF   FF7
01A0:  ADDLW  AE
01A2:  MOVWF  FF6
01A4:  MOVLW  01
01A6:  ADDWFC FF7,F
01A8:  TBLRD*+
01AA:  MOVF   FF5,W
01AC:  RETURN 0
01AE:  DATA 01,00
01B0:  CLRF   FF7
01B2:  ADDLW  C0
01B4:  MOVWF  FF6
01B6:  MOVLW  01
01B8:  ADDWFC FF7,F
01BA:  TBLRD*+
01BC:  MOVF   FF5,W
01BE:  RETURN 0
01C0:  DATA 12,00
01C2:  CLRF   FF7
01C4:  ADDLW  D2
01C6:  MOVWF  FF6
01C8:  MOVLW  01
01CA:  ADDWFC FF7,F
01CC:  TBLRD*+
01CE:  MOVF   FF5,W
01D0:  RETURN 0
01D2:  DATA 12,01
01D4:  DATA 02,00
01D6:  DATA 00,00
01D8:  DATA 00,40
01DA:  DATA 25,00
01DC:  DATA 01,00
01DE:  DATA 02,00
01E0:  DATA 01,02
01E2:  DATA 00,01
01E4:  CLRF   FF7
01E6:  ADDLW  F4
01E8:  MOVWF  FF6
01EA:  MOVLW  01
01EC:  ADDWFC FF7,F
01EE:  TBLRD*+
01F0:  MOVF   FF5,W
01F2:  RETURN 0
01F4:  DATA 04,03
01F6:  DATA 09,04
01F8:  DATA 08,03
01FA:  DATA 50,00
01FC:  DATA 47,00
01FE:  DATA 4D,00
0200:  DATA 1C,03
0202:  DATA 42,00
0204:  DATA 65,00
0206:  DATA 6C,00
0208:  DATA 61,00
020A:  DATA 72,00
020C:  DATA 62,00
020E:  DATA 69,00
0210:  DATA 27,00
0212:  DATA 73,00
0214:  DATA 20,00
0216:  DATA 50,00
0218:  DATA 49,00
021A:  DATA 43,00
*
02C4:  MOVLB  2
02C6:  MOVF   x6B,W
02C8:  MULWF  x6D
02CA:  MOVFF  FF3,01
02CE:  MOVFF  FF4,00
02D2:  MULWF  x6E
02D4:  MOVF   FF3,W
02D6:  ADDWF  00,F
02D8:  MOVF   x6C,W
02DA:  MULWF  x6D
02DC:  MOVF   FF3,W
02DE:  ADDWFC 00,W
02E0:  MOVWF  02
02E2:  MOVLB  0
02E4:  RETURN 0
*
04A0:  ADDWF  FE8,W
04A2:  CLRF   FF7
04A4:  RLCF   FF7,F
04A6:  ADDLW  BB
04A8:  MOVWF  FF6
04AA:  MOVLW  04
04AC:  ADDWFC FF7,F
04AE:  TBLRD*-
04B0:  MOVF   FF5,W
04B2:  MOVWF  FFA
04B4:  TBLRD*
04B6:  MOVF   FF5,W
04B8:  MOVWF  FF9
04BA:  DATA 02,04
04BC:  DATA 1A,04
04BE:  DATA 32,04
04C0:  DATA 4A,04
*
1440:  MOVLB  2
1442:  MOVF   x4D,W
1444:  XORWF  x4F,W
1446:  ANDLW  80
1448:  MOVWF  x51
144A:  BTFSS  x4D.7
144C:  BRA    1458
144E:  COMF   x4C,F
1450:  COMF   x4D,F
1452:  INCF   x4C,F
1454:  BTFSC  FD8.2
1456:  INCF   x4D,F
1458:  BTFSS  x4F.7
145A:  BRA    1466
145C:  COMF   x4E,F
145E:  COMF   x4F,F
1460:  INCF   x4E,F
1462:  BTFSC  FD8.2
1464:  INCF   x4F,F
1466:  MOVF   x4C,W
1468:  MULWF  x4E
146A:  MOVFF  FF3,01
146E:  MOVFF  FF4,00
1472:  MULWF  x4F
1474:  MOVF   FF3,W
1476:  ADDWF  00,F
1478:  MOVF   x4D,W
147A:  MULWF  x4E
147C:  MOVF   FF3,W
147E:  ADDWFC 00,W
1480:  MOVWF  02
1482:  BTFSS  x51.7
1484:  BRA    1490
1486:  COMF   01,F
1488:  COMF   02,F
148A:  INCF   01,F
148C:  BTFSC  FD8.2
148E:  INCF   02,F
1490:  MOVLB  0
1492:  GOTO   1514 (RETURN)
*
1586:  MOVLB  2
1588:  CLRF   x55
158A:  CLRF   x56
158C:  MOVLW  01
158E:  MOVWF  x57
1590:  CLRF   FDA
1592:  CLRF   FD9
1594:  MOVLW  02
1596:  MOVWF  x5A
1598:  MOVLW  4D
159A:  MOVWF  x59
159C:  MOVLW  02
159E:  MOVWF  FEA
15A0:  MOVLW  51
15A2:  MOVWF  FE9
15A4:  MOVFF  25A,FE2
15A8:  MOVFF  259,FE1
15AC:  MOVFF  257,258
15B0:  BCF    FD8.0
15B2:  MOVF   FE5,W
15B4:  MULWF  FEE
15B6:  MOVF   FF3,W
15B8:  ADDWFC x55,F
15BA:  MOVF   FF4,W
15BC:  ADDWFC x56,F
15BE:  DECFSZ x58,F
15C0:  BRA    15B0
15C2:  MOVFF  255,FDE
15C6:  MOVFF  256,255
15CA:  CLRF   x56
15CC:  BTFSC  FD8.0
15CE:  INCF   x56,F
15D0:  INCF   x59,F
15D2:  BTFSC  FD8.2
15D4:  INCF   x5A,F
15D6:  INCF   x57,F
15D8:  MOVF   x57,W
15DA:  SUBLW  05
15DC:  BNZ   159C
15DE:  MOVLB  0
15E0:  GOTO   1612 (RETURN)
*
1956:  MOVFF  247,01
195A:  MOVFF  246,00
195E:  TSTFSZ 00
1960:  INCF   01,F
1962:  TBLRD*+
1964:  MOVFF  FF5,FEE
1968:  DECFSZ 00,F
196A:  BRA    1962
196C:  DECFSZ 01,F
196E:  BRA    1962
1970:  CLRF   FF8
1972:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #fuses  HSPLL PLL5 CPUDIV2 USBDIV VREGEN NOMCLR 
.................... #use delay(clock=48000000) 
....................  
.................... //#USE fast_io(C) 
....................  
....................  
.................... #include "usb/pic18_usb.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////     PIC18FxxK50                                                 //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   1 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==0 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(unsigned int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(unsigned int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(unsigned int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(unsigned int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(unsigned int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(unsigned int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "usb/usb_desc_hid.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ///                          usb_desc_hid.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's HID Demo example (see ex_usb_hid.c)                         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////   PIC18Fxx5x initial release                                      //// 
.................... ////                                                                   //// 
.................... //// March 21st, 2005:                                                 //// 
.................... ////   EP 0x01 and EP 0x81 now use USB_EP1_TX_SIZE and USB_EP1_RX_SIZE //// 
.................... ////      to define max packet size, to make it easier for dynamically //// 
.................... ////      changed code.                                                //// 
.................... ////   EP 0x01 and EP 0x81 will now use 1ms polling interval if using  //// 
.................... ////      a full speed device.                                         //// 
.................... ////                                                                   //// 
.................... //// May 4th, 2004: Optimization and cleanup.                          //// 
.................... ////                Some definitions may have changed.                 //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed non-HID descriptors pointing to faulty       //// 
.................... ////                strings                                            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #ifndef USB_CONFIG_PID 
....................    #define USB_CONFIG_PID  0x0001 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_VID 
....................    #define  USB_CONFIG_VID 0x0025 
.................... #endif 
....................  
....................  
.................... #ifndef USB_CONFIG_VERSION 
....................    //version number that is stored into descriptor, in bcd. 
....................    //range is 00.00 to 99.99 
....................    #define  USB_CONFIG_VERSION   0x0002      //01.00 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_TX_SIZE 
....................    //valid range is 0-255 
....................    #define USB_CONFIG_HID_TX_SIZE   0x40     //compatible with hiddemo.exe 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_RX_SIZE 
....................    //valid range is 0-255 
....................    #define USB_CONFIG_HID_RX_SIZE   0x40     //compatible with hiddemo.exe 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_TX_POLL 
....................    // for full speed devices, valid range is 1-255 
....................    // for slow speed devices, valid range is 10-255 
....................    #define USB_CONFIG_HID_TX_POLL   1 
.................... #endif 
....................  
.................... #ifndef USB_CONFIG_HID_RX_POLL 
....................    // for full speed devices, valid range is 1-255 
....................    // for slow speed devices, valid range is 10-255 
....................    #define USB_CONFIG_HID_RX_POLL   1 
.................... #endif 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #ifdef USB_HID_DEVICE 
.................... #undef USB_HID_DEVICE 
.................... #endif 
....................  
.................... #DEFINE USB_HID_DEVICE  TRUE 
....................  
.................... //the following defines needed for the CCS USB PIC driver to enable the TX endpoint 1 
.................... // and allocate buffer space on the peripheral 
.................... #ifdef USB_EP1_TX_ENABLE 
.................... #undef USB_EP1_TX_ENABLE 
.................... #endif 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT   //turn on EP1 for IN bulk/interrupt transfers 
....................  
.................... #ifndef USB_EP1_TX_SIZE 
....................  #if (USB_CONFIG_HID_TX_SIZE >= 64) 
....................    // interrupt endpoint max packet size is 64. 
....................    #define USB_EP1_TX_SIZE    64 
....................  #else 
....................    // by making EP packet size larger than message size, we can send message in one packet. 
....................    #define USB_EP1_TX_SIZE    (USB_CONFIG_HID_TX_SIZE+1) 
....................  #endif 
.................... #endif 
....................  
.................... #ifdef USB_EP1_RX_ENABLE 
.................... #undef USB_EP1_RX_ENABLE 
.................... #endif 
.................... #define USB_EP1_RX_ENABLE  USB_ENABLE_INTERRUPT   //turn on EP1 for OUT bulk/interrupt transfers 
....................  
.................... #ifndef USB_EP1_RX_SIZE 
....................  #if (USB_CONFIG_HID_RX_SIZE >= 64) 
....................    // interrupt endpoint max packet size is 64. 
....................    #define USB_EP1_RX_SIZE    64 
....................  #else 
....................    // by making EP packet size larger than message size, we can send message in one packet. 
....................    #define USB_EP1_RX_SIZE    (USB_CONFIG_HID_RX_SIZE+1) 
....................  #endif 
.................... #endif 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................    ////////////////////////////////////////////////////////////////// 
....................    /// 
....................    ///  HID Report.  Tells HID driver how to handle and deal with 
....................    ///  received data.  HID Reports can be extremely complex, 
....................    ///  see HID specifcation for help on writing your own. 
....................    /// 
....................    ///  CCS example uses a vendor specified usage, that sends and 
....................    ///  receives 2 absolute bytes ranging from 0 to 0xFF. 
....................    /// 
....................    ////////////////////////////////////////////////////////////////// 
....................  
.................... const char USB_CLASS_SPECIFIC_DESC[] =  
.................... { 
....................       6, 0, 255,        // Usage Page = Vendor Defined 
....................       9, 1,             // Usage = IO device 
....................       0xa1, 1,          // Collection = Application 
....................       0x19, 1,          // Usage minimum 
....................       0x29, 8,          // Usage maximum 
....................  
....................       0x15, 0x80,       // Logical minimum (-128) 
....................       0x25, 0x7F,       // Logical maximum (127) 
....................  
....................       0x75, 8,          // Report size = 8 (bits) 
....................       0x95, USB_CONFIG_HID_TX_SIZE,        // Report count = 16 bits (2 bytes) 
....................       0x81, 2,          // Input (Data, Var, Abs) 
....................       0x19, 1,          // Usage minimum 
....................       0x29, 8,          // Usage maximum 
....................       0x75, 8,          // Report size = 8 (bits) 
....................       0x95, USB_CONFIG_HID_RX_SIZE,        // Report count = 16 bits (2 bytes) 
....................       0x91, 2,          // Output (Data, Var, Abs) 
....................       0xc0              // End Collection 
.................... }; 
....................  
....................    //if a class has an extra descriptor not part of the config descriptor, 
....................    // this lookup table defines where to look for it in the const 
....................    // USB_CLASS_SPECIFIC_DESC[] array. 
....................    //first element is the config number (if your device has more than one config) 
....................    //second element is which interface number 
....................    //set element to 0xFFFF if this config/interface combo doesn't exist 
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          0 
....................    }; 
....................     
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          32 
....................    }; 
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN      41  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
.................... const char USB_CONFIG_DESC[] = { 
.................... //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................    //    config(s) 
....................    //    interface(s) 
....................    //    class(es) 
....................    //    endpoint(s) 
....................  
.................... //config_descriptor for config index 1 
....................       USB_DESC_CONFIG_LEN, //length of descriptor size          ==1 
....................       USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==2 
....................       USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==3,4 
....................       1, //number of interfaces this device supports       ==5 
....................       0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==6 
....................       0x02, //index of string descriptor for this configuration      ==7 
....................       0x80, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==8 
....................       50, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA) 
....................  
.................... //interface descriptor 1 
....................       USB_DESC_INTERFACE_LEN, //length of descriptor      =10 
....................       USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =11 
....................       0x00, //number defining this interface (IF we had more than one interface)    ==12 
....................       0x00, //alternate setting     ==13 
....................       2, //number of endpoins, except 0 (pic167xx has 3, but we dont have to use all).       ==14 
....................       0x03, //class code, 03 = HID     ==15 
....................       0x00, //subclass code //boot     ==16 
....................       0x00, //protocol code      ==17 
....................       0x00, //index of string descriptor for interface      ==18 
....................  
.................... //class descriptor 1  (HID) 
....................       USB_DESC_CLASS_LEN, //length of descriptor    ==19 
....................       0x21, //dscriptor type (0x21 == HID)      ==20 
....................       0x00,0x01, //hid class release number (1.0)      ==21,22 
....................       0x00, //localized country code (0 = none)       ==23 
....................       0x01, //number of hid class descrptors that follow (1)      ==24 
....................       0x22, //report descriptor type (0x22 == HID)                ==25 
....................       32, 0x00, //length of report descriptor            ==26,27 
....................  
.................... //endpoint descriptor 
....................       USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==28 
....................       USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==29 
....................       0x81, //endpoint number and direction (0x81 = EP1 IN)       ==30 
....................       USB_EP1_TX_ENABLE, //transfer type supported (0x03 is interrupt)         ==31 
....................       USB_EP1_TX_SIZE,0x00, //maximum packet size supported                  ==32,33 
....................       USB_CONFIG_HID_TX_POLL,  //polling interval, in ms.  (cant be smaller than 10 for slow speed)      ==34 
....................  
.................... //endpoint descriptor 
....................       USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==35 
....................       USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==36 
....................       0x01, //endpoint number and direction (0x01 = EP1 OUT)      ==37 
....................       USB_EP1_RX_ENABLE, //transfer type supported (0x03 is interrupt)         ==38 
....................       USB_EP1_RX_SIZE,0x00, //maximum packet size supported                  ==39,40 
....................       USB_CONFIG_HID_RX_POLL //polling interval, in ms.  (cant be smaller than 10 for slow speed)    ==41 
.................... }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
....................    //      FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
....................    #define USB_NUM_HID_INTERFACES   1 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   1 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][1][1]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1 
....................          18 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................    //starts of with device configuration. only one possible 
....................       USB_DESC_DEVICE_LEN, //the length of this report   ==1 
....................       0x01, //the constant DEVICE (DEVICE 0x01)  ==2 
....................       0x02,0x00, //usb version in bcd ==3,4 
....................       0x00, //class code ==5 
....................       0x00, //subclass code ==6 
....................       0x00, //protocol code ==7 
....................       USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==8 
....................       USB_CONFIG_VID & 0xFF, ((USB_CONFIG_VID >> 8) & 0xFF), //vendor id       ==9, 10 
....................       USB_CONFIG_PID & 0xFF, ((USB_CONFIG_PID >> 8) & 0xFF), //product id, don't use 0xffff       ==11, 12 
....................       USB_CONFIG_VERSION & 0xFF, ((USB_CONFIG_VERSION >> 8) & 0xFF), //device release number  ==13,14 
....................       0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==15 
....................       0x02, //index of string descriptor of the product  ==16 
....................       0x00, //index of string descriptor of serial number  ==17 
....................       USB_NUM_CONFIGURATIONS  //number of possible configurations  ==18 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
.................... // Here is where the "CCS" Manufacturer string and "CCS HID Demo" are stored. 
.................... // Strings are saved as unicode. 
.................... // These strings are mostly only displayed during the add hardware wizard. 
.................... // Once the operating system drivers have been installed it will usually display 
.................... // the name from the drivers .INF. 
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          8, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'P',0, 
....................          'G',0, 
....................          'M',0, 
....................    //string 2 
....................          28, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'B',0, 
....................          'e',0, 
....................          'l',0, 
....................          'a',0, 
....................          'r',0, 
....................          'b',0, 
....................          'i',0, 
....................          '\'',0, 
....................          's',0, 
....................          ' ',0, 
....................          'P',0, 
....................          'I',0, 
....................          'C',0, 
....................           
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include "usb/usb.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// June 8th, 2011:                                                   //// 
.................... ////  Problem with usb_gets() and usb_puts() and specifying timeout=0  //// 
.................... ////     (for no timeout) resolved.                                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #if defined(__DO_DEBUG_USB) 
....................    #define debug_usb printf 
....................    void debug_putc(char c) {uart_putc(c);} 
....................    void debug_display_ram(unsigned int8 len, unsigned int8 *ptr) { 
....................       unsigned int8 max=16; 
....................       debug_usb(debug_putc,"[%U - ",len); 
....................       //if (max>len) {max=len;} 
....................       max = len; 
....................       while(max--) { 
....................          debug_usb(debug_putc,"%02X",*ptr); 
....................          len--; 
....................          ptr++; 
....................       } 
....................       if (len) {debug_usb(debug_putc,"...");} 
....................       debug_usb(debug_putc,"] "); 
....................    } 
....................     
.................... #else 
....................    #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
....................    #define debug_putc(c) 
....................    #define debug_display_ram(x,y) 
.................... #endif 
....................  
.................... #include "usb.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16F_USB_H__) 
....................  #include <pic16f_usb.c> 
.................... #endif 
....................  
.................... //#if defined(__PIC18_USB_H__) 
....................  #include "pic18_usb.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Feb 22, 2013:                                                   //// 
.................... ////  Added support for 18F45K50 family.                             //// 
.................... ////                                                                 //// 
.................... //// July 9th, 2012:                                                 //// 
.................... ////  Removed the clearing of the UOWN bit inside token done ISR     //// 
.................... ////     for non-setup packets on endpoint 0 or all other            //// 
.................... ////     endpoints.  This really only affects people using           //// 
.................... ////     usb_put_packet() or usb_get_packet() inside of other        //// 
.................... ////     interrupts.                                                 //// 
.................... ////                                                                 //// 
.................... //// Sep 22, 2011:                                                   //// 
.................... ////  Added USB_NO_ISR_PREPROCESSOR.  This is a rarely used option   //// 
.................... ////     primarily developed for users developing code where         //// 
.................... ////     usb_isr() is called by a #int_global instead of #int_usb.   //// 
.................... ////                                                                 //// 
.................... //// Dec 16, 2010:                                                   //// 
.................... ////  PIC18LF13K50 and PIC18LF14K50 added.                           //// 
.................... ////                                                                 //// 
.................... //// Oct 15th, 2010:                                                 //// 
.................... ////  Added initial 18F47J53 family support.                         //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts     //// 
.................... ////     will not be used.  usb_task() must be called periodically   //// 
.................... ////     in your main loop.  If it is not called faster than once    //// 
.................... ////     per millisecond, USB may not work.                          //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_keyboard.c - A HID Keyboard.                             //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense macro               //// 
.................... ////        (USB_CABLE_IS_ATTACHED) is not defined the usb_task()      ////  
.................... ////        assumes that USB is always connected.                      //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... ////  Feb 18th, 2013                                                   //// 
.................... ////     Added some extra checks to make sure packet size are legal    //// 
.................... ////        for USB speed.                                             //// 
.................... ////                                                                   //// 
.................... ////  April 2nd, 2012                                                  //// 
.................... ////     Initial version of CDC+HID composite device support           //// 
.................... ////                                                                   //// 
.................... //// Oct 15th, 2010:                                                   //// 
.................... ////  Potential bug in CDC that causes lost PIC->PC chars resolved?    //// 
.................... ////  Added initial 18F47J53 family support.                           //// 
.................... ////  Added USB_ISR_POLLING support.  Define this and interrupts       //// 
.................... ////     will not be used.  usb_task() must be called periodically     //// 
.................... ////     in your main loop.  If it is not called faster than once      //// 
.................... ////     per millisecond, USB may not work (PIC18 and PIC24 only).     //// 
.................... ////                                                                   //// 
.................... //// September 24th, 2010:                                             //// 
.................... ////  Many descriptor files had the self powered bit set incorrectly   //// 
.................... ////     based on USB_CONFIG_BUS_POWER.                                //// 
.................... ////                                                                   //// 
.................... //// September 9th, 2010:                                              //// 
.................... ////  USB_CONFIG_HID_TX_SIZE and USB_CONFIG_HID_RX_SIZE were backwards //// 
.................... ////     in HID report descriptor of usb_desc_hid.h                    //// 
.................... ////                                                                   //// 
.................... //// September 2nd, 2010:                                              //// 
.................... ////  Problem with descriptors larger than 127 bytes on 16-bit PICs    //// 
.................... ////     (dsPIC, PIC24) resolved.                                      //// 
.................... ////                                                                   //// 
.................... //// August 31st, 2010:                                                //// 
.................... ////  Added USB_HW_MCHP_18F46J50, USB_HW_MCHP_18F14K50 and             //// 
.................... ////  USB_HW_GENERIC_18F67J50 hardware.                                //// 
.................... ////                                                                   //// 
.................... //// April 28th, 2010:                                                 //// 
.................... ////  USB_CON_SENSE_PIN replaced with USB_CABLE_IS_ATTACHED()          //// 
.................... ////     macro.  If USB_CON_SENSE_PIN is defined, it will create       //// 
.................... ////     USB_CABLE_IS_ATTACHED() macro for you (for backwards          //// 
.................... ////     compatibility).                                               //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #if defined(USB_CON_SENSE_PIN) 
....................  #undef USB_CABLE_IS_ATTACHED 
....................  #define USB_CABLE_IS_ATTACHED() input(USB_CON_SENSE_PIN) 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if defined(USB_CABLE_IS_ATTACHED) 
....................  #define usb_attached() USB_CABLE_IS_ATTACHED() 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
.................... #define USB_DESC_IAD_TYPE        0x0b 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
.................... #define USB_DESC_IAD_LEN         8 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif   
.................... #endif 
....................  
.................... const unsigned int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const unsigned int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #bit USBIE=getenv("BIT:USBIE") 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F45K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F25K50") ||  \ 
....................        (getenv("DEVICE")=="PIC18F24K50")) 
....................  #define __USB_45K50__ 
....................  #define USB_TOTAL_RAM_SPACE  1024 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16  
....................  #define USB_PIC_NO_USB_GPIO  //D+ and D- are not shared with any GPIO 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50") || \ 
....................        (getenv("DEVICE")=="PIC18LF13K50") || (getenv("DEVICE")=="PIC18LF14K50")) 
....................  #define __USB_K50__ //backwards compatability 
....................  #define __USB_14K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((unsigned int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F26J53") || (getenv("DEVICE")=="PIC18F27J53") || \ 
....................        (getenv("DEVICE")=="PIC18F46J53") || (getenv("DEVICE")=="PIC18F47J53") \ 
....................        ) 
....................  #define __USB_18FJ53__ 
....................  #define USB_TOTAL_RAM_SPACE  (0xE00) //0x000:0xDFF.  save 0x00:0xFF for compiler use 
....................  #define USB_BDT_START  0xD00 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if !defined(USB_BDT_START) 
.................... #define USB_BDT_START   USB_RAM_START 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if defined(USB_RAM_START) 
....................    #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
.................... #else 
....................    #if (USB_DATA_BUFFER_NEEDED > USB_TOTAL_RAM_SPACE) 
....................       #error You are trying to allocate more memory for endpoints than the PIC can handle 
....................    #endif 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying to use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #if defined(USB_RAM_START) 
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
.................... #else 
.................... #define USB_DATA_BUFFER_LOCATION ((int8*)&g_USBRAM) 
.................... #endif 
....................  
.................... typedef struct 
.................... { 
....................    unsigned int8 stat; 
....................    unsigned int8 cnt; 
....................    unsigned int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... #if defined(USB_RAM_START) 
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
.................... #define g_USBBDT g_USBRAM.bd 
.................... #else 
.................... struct 
.................... { 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          unsigned int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          unsigned int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          unsigned int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          unsigned int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          unsigned int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          unsigned int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       unsigned int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... struct 
.................... { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
.................... } g_USBBDT[USB_LAST_DEFINED_ENDPOINT+1]; 
.................... #locate g_USBBDT=USB_BDT_START 
.................... #endif 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    unsigned int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_14K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #elif defined(__USB_18FJ53__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #else 
....................    #byte UFRML = getenv("SFR:UFRML") 
....................    #byte UFRMH = getenv("SFR:UFRMH") 
....................    #byte UIR = getenv("SFR:UIR") 
....................    #byte UIE = getenv("SFR:UIE") 
....................    #byte UEIR = getenv("SFR:UEIR") 
....................    #byte UEIE = getenv("SFR:UEIE") 
....................    #byte U1STAT = getenv("SFR:USTAT") 
....................    #byte UCON = getenv("SFR:UCON") 
....................    #byte UADDR = getenv("SFR:UADDR") 
....................    #byte UCFG = getenv("SFR:UCFG") 
.................... #endif 
....................  
.................... unsigned int8 USTATCopy; 
....................  
.................... unsigned int8 g_UEP[USB_NUM_UEP]; 
.................... #if defined(UEP0_LOC) 
.................... #locate g_UEP=UEP0_LOC 
.................... #else 
.................... #locate g_UEP=getenv("SFR:UEP0") 
.................... #endif 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBBDT[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBBDT[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBBDT[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBBDT[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBBDT[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBBDT[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_14K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... unsigned int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... #if defined(USB_ISR_POLLING) 
.................... void usb_isr(void); 
.................... #endif 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
119A:  CLRF   03
119C:  MOVLB  2
119E:  MOVF   x3E,W
11A0:  ADDLW  70
11A2:  MOVWF  FE9
11A4:  MOVLW  0F
11A6:  ADDWFC 03,W
11A8:  MOVWF  FEA
11AA:  MOVF   FEF,F
11AC:  BZ    11E8
11AE:  CLRF   16
11B0:  BTFSC  FF2.7
11B2:  BSF    16.7
11B4:  BCF    FF2.7
11B6:  CLRF   x6C
11B8:  MOVFF  23E,26B
11BC:  CLRF   x6E
11BE:  MOVLW  08
11C0:  MOVWF  x6D
11C2:  MOVLB  0
11C4:  CALL   02C4
11C8:  BTFSC  16.7
11CA:  BSF    FF2.7
11CC:  MOVFF  02,240
11D0:  MOVFF  01,23F
11D4:  MOVLB  2
11D6:  MOVFF  01,FE9
11DA:  MOVLW  04
11DC:  ADDWF  02,W
11DE:  MOVWF  FEA
11E0:  MOVFF  FEF,241
11E4:  BTFSS  x41.7
11E6:  BRA    11EC
11E8:  MOVLW  00
11EA:  BRA    11EE
11EC:  MOVLW  01
11EE:  MOVWF  01
11F0:  MOVLB  0
11F2:  GOTO   28D2 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(unsigned int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
0C90:  CLRF   03
0C92:  MOVLB  2
0C94:  MOVF   x66,W
0C96:  ADDLW  70
0C98:  MOVWF  FE9
0C9A:  MOVLW  0F
0C9C:  ADDWFC 03,W
0C9E:  MOVWF  FEA
0CA0:  MOVF   FEF,F
0CA2:  BZ    0CDA
0CA4:  CLRF   x6C
0CA6:  MOVFF  266,26B
0CAA:  CLRF   x6E
0CAC:  MOVLW  08
0CAE:  MOVWF  x6D
0CB0:  MOVLB  0
0CB2:  CALL   02C4
0CB6:  MOVFF  02,268
0CBA:  MOVFF  01,267
0CBE:  MOVLW  04
0CC0:  MOVLB  2
0CC2:  ADDWF  x67,F
0CC4:  MOVLW  00
0CC6:  ADDWFC x68,F
0CC8:  MOVFF  267,FE9
0CCC:  MOVLW  04
0CCE:  ADDWF  x68,W
0CD0:  MOVWF  FEA
0CD2:  MOVFF  FEF,269
0CD6:  BTFSS  x69.7
0CD8:  BRA    0CDE
0CDA:  MOVLW  00
0CDC:  BRA    0CE0
0CDE:  MOVLW  01
0CE0:  MOVWF  01
0CE2:  MOVLB  0
0CE4:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
111E:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1120:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1122:  MOVLW  08
1124:  MOVWF  F6F
....................  
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_14K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #elif !defined(USB_PIC_NO_USB_GPIO) 
....................    set_tris_c(get_tris_c() | 0x30); //pin_c4 and pin_c5 
1126:  MOVF   F94,W
1128:  IORLW  30
112A:  MOVLB  2
112C:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
112E:  CLRF   1F
1130:  CLRF   16
1132:  BTFSC  FF2.7
1134:  BSF    16.7
1136:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
1138:  MOVLB  0
113A:  CALL   0374
113E:  BTFSC  16.7
1140:  BSF    FF2.7
1142:  GOTO   1148 (RETURN)
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
*
114C:  CLRF   16
114E:  BTFSC  FF2.7
1150:  BSF    16.7
1152:  BCF    FF2.7
.................... { 
....................    usb_token_reset(); 
1154:  CALL   0374
1158:  BTFSC  16.7
115A:  BSF    FF2.7
....................    UCON = 0; 
115C:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
115E:  MOVLW  14
1160:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
1162:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
1164:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
1166:  MOVLW  01
1168:  MOVWF  1F
116A:  GOTO   1174 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1146:  BRA    111E
1148:  GOTO   28BA (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................   #if defined(USB_ISR_POLLING) 
....................    if (interrupt_active(INT_USB)) 
....................    { 
....................       usb_isr(); 
....................    } 
....................   #endif 
....................  
....................   #if defined(USB_CDC_DELAYED_FLUSH) 
....................    if (usb_enumerated()) 
....................    { 
....................       usb_cdc_flush_out_buffer(); 
....................    } 
....................   #endif 
....................  
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
116E:  BTFSC  F6D.3
1170:  BRA    1174
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
1172:  BRA    114C
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
1174:  DECFSZ 1F,W
1176:  BRA    118E
1178:  BTFSC  F6D.5
117A:  BRA    118E
....................    { 
....................       UIR=0; 
117C:  CLRF   F68
....................       UIE=0; 
117E:  CLRF   F69
....................      #if !defined(USB_ISR_POLLING) 
....................       enable_interrupts(INT_USB); 
1180:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
1182:  MOVLW  C0
1184:  IORWF  FF2,F
....................      #endif 
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
1186:  MOVLW  11
1188:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
118A:  MOVLW  02
118C:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
118E:  GOTO   28BE (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
....................  
....................    do  
....................    { 
....................       usb_task(); 
....................    } while (usb_state != USB_STATE_POWERED); 
.................... } 
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0CE6:  MOVFF  261,266
0CEA:  RCALL  0C90
0CEC:  MOVF   01,F
0CEE:  BTFSC  FD8.2
0CF0:  BRA    0E00
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0CF2:  MOVLB  2
0CF4:  CLRF   x6C
0CF6:  MOVFF  261,26B
0CFA:  CLRF   x6E
0CFC:  MOVLW  08
0CFE:  MOVWF  x6D
0D00:  MOVLB  0
0D02:  CALL   02C4
0D06:  MOVFF  02,267
0D0A:  MOVFF  01,266
0D0E:  MOVLW  04
0D10:  MOVLB  2
0D12:  ADDWF  x66,F
0D14:  MOVLW  00
0D16:  ADDWFC x67,F
0D18:  MOVLW  01
0D1A:  ADDWF  x66,W
0D1C:  MOVWF  01
0D1E:  MOVLW  00
0D20:  ADDWFC x67,W
0D22:  MOVWF  03
0D24:  MOVFF  01,FE9
0D28:  MOVLW  04
0D2A:  ADDWF  03,W
0D2C:  MOVWF  FEA
0D2E:  MOVFF  262,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0D32:  MOVF   x64,W
0D34:  SUBLW  02
0D36:  BNZ   0D78
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0D38:  CLRF   x6C
0D3A:  MOVFF  261,26B
0D3E:  CLRF   x6E
0D40:  MOVLW  08
0D42:  MOVWF  x6D
0D44:  MOVLB  0
0D46:  CALL   02C4
0D4A:  MOVFF  02,267
0D4E:  MOVFF  01,266
0D52:  MOVLW  04
0D54:  MOVLB  2
0D56:  ADDWF  x66,F
0D58:  MOVLW  00
0D5A:  ADDWFC x67,F
0D5C:  MOVFF  266,FE9
0D60:  MOVLW  04
0D62:  ADDWF  x67,W
0D64:  MOVWF  FEA
0D66:  MOVFF  FEF,265
....................          if (bit_test(i,6)) 
0D6A:  BTFSS  x65.6
0D6C:  BRA    0D72
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0D6E:  CLRF   x64
0D70:  BRA    0D76
....................          else 
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0D72:  MOVLW  01
0D74:  MOVWF  x64
....................       } 
0D76:  BRA    0DAC
....................       else if (tgl == USB_DTS_USERX)  
0D78:  MOVF   x64,W
0D7A:  SUBLW  04
0D7C:  BNZ   0DAC
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0D7E:  CLRF   x6C
0D80:  MOVFF  261,26B
0D84:  CLRF   x6E
0D86:  MOVLW  08
0D88:  MOVWF  x6D
0D8A:  MOVLB  0
0D8C:  CALL   02C4
0D90:  MOVLB  2
0D92:  MOVFF  01,FE9
0D96:  MOVLW  04
0D98:  ADDWF  02,W
0D9A:  MOVWF  FEA
0D9C:  MOVFF  FEF,265
....................          if (bit_test(i,6)) 
0DA0:  BTFSS  x65.6
0DA2:  BRA    0DAA
....................             tgl = USB_DTS_DATA1; 
0DA4:  MOVLW  01
0DA6:  MOVWF  x64
0DA8:  BRA    0DAC
....................          else 
....................             tgl = USB_DTS_DATA0; 
0DAA:  CLRF   x64
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0DAC:  DECFSZ x64,W
0DAE:  BRA    0DB6
....................          i=0xC8;  //DATA1, UOWN 
0DB0:  MOVLW  C8
0DB2:  MOVWF  x65
0DB4:  BRA    0DBA
....................       else //if (tgl == USB_DTS_DATA0)  
....................          i=0x88; //DATA0, UOWN 
0DB6:  MOVLW  88
0DB8:  MOVWF  x65
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0DBA:  BTFSS  x63.0
0DBC:  BRA    0DC0
0DBE:  BSF    x65.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0DC0:  BTFSS  x63.1
0DC2:  BRA    0DC6
0DC4:  BSF    x65.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0DC6:  CLRF   x6C
0DC8:  MOVFF  261,26B
0DCC:  CLRF   x6E
0DCE:  MOVLW  08
0DD0:  MOVWF  x6D
0DD2:  MOVLB  0
0DD4:  CALL   02C4
0DD8:  MOVFF  02,267
0DDC:  MOVFF  01,266
0DE0:  MOVLW  04
0DE2:  MOVLB  2
0DE4:  ADDWF  x66,F
0DE6:  MOVLW  00
0DE8:  ADDWFC x67,F
0DEA:  MOVFF  266,FE9
0DEE:  MOVLW  04
0DF0:  ADDWF  x67,W
0DF2:  MOVWF  FEA
0DF4:  MOVFF  265,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0DF8:  MOVLW  01
0DFA:  MOVWF  01
0DFC:  BRA    0E06
....................    } 
0DFE:  MOVLB  0
....................    else  
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0E00:  MOVLW  00
0E02:  MOVWF  01
0E04:  MOVLB  2
0E06:  MOVLB  0
0E08:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl)  
*
1352:  CLRF   16
1354:  BTFSC  FF2.7
1356:  BSF    16.7
1358:  BCF    FF2.7
.................... { 
....................    unsigned int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
135A:  MOVFF  247,266
135E:  RCALL  0C90
1360:  BTFSC  16.7
1362:  BSF    FF2.7
1364:  MOVF   01,F
1366:  BZ    140E
1368:  CLRF   16
136A:  BTFSC  FF2.7
136C:  BSF    16.7
136E:  BCF    FF2.7
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
1370:  MOVLB  2
1372:  CLRF   x6C
1374:  MOVFF  247,26B
1378:  CLRF   x6E
137A:  MOVLW  08
137C:  MOVWF  x6D
137E:  MOVLB  0
1380:  CALL   02C4
1384:  BTFSC  16.7
1386:  BSF    FF2.7
1388:  MOVFF  02,250
138C:  MOVFF  01,24F
1390:  MOVLW  04
1392:  MOVLB  2
1394:  ADDWF  x4F,F
1396:  MOVLW  00
1398:  ADDWFC x50,F
139A:  MOVLW  02
139C:  ADDWF  x4F,W
139E:  MOVWF  01
13A0:  MOVLW  00
13A2:  ADDWFC x50,W
13A4:  MOVWF  03
13A6:  MOVFF  01,FE9
13AA:  MOVLW  04
13AC:  ADDWF  03,W
13AE:  MOVWF  FEA
13B0:  MOVFF  FEC,24E
13B4:  MOVF   FED,F
13B6:  MOVFF  FEF,24D
....................       memcpy(buff_add, ptr, len);      
13BA:  MOVFF  24E,FEA
13BE:  MOVFF  24D,FE9
13C2:  MOVFF  249,FE2
13C6:  MOVFF  248,FE1
13CA:  MOVFF  24B,02
13CE:  MOVFF  24A,01
13D2:  MOVF   01,F
13D4:  BZ    13DA
13D6:  INCF   02,F
13D8:  BRA    13DE
13DA:  MOVF   02,F
13DC:  BZ    13EA
13DE:  MOVFF  FE6,FEE
13E2:  DECFSZ 01,F
13E4:  BRA    13DE
13E6:  DECFSZ 02,F
13E8:  BRA    13DE
13EA:  CLRF   16
13EC:  BTFSC  FF2.7
13EE:  BSF    16.7
13F0:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
13F2:  MOVFF  247,261
13F6:  MOVFF  24B,263
13FA:  MOVFF  24A,262
13FE:  MOVFF  24C,264
1402:  MOVLB  0
1404:  RCALL  0CE6
1406:  BTFSC  16.7
1408:  BSF    FF2.7
140A:  MOVF   01,W
140C:  BRA    1412
....................    } 
....................    else  
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
140E:  MOVLW  00
1410:  MOVWF  01
1412:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0B86:  MOVLB  2
0B88:  CLRF   x6C
0B8A:  MOVFF  261,26B
0B8E:  CLRF   x6E
0B90:  MOVLW  08
0B92:  MOVWF  x6D
0B94:  MOVLB  0
0B96:  CALL   02C4
0B9A:  MOVLB  2
0B9C:  MOVFF  01,FE9
0BA0:  MOVLW  04
0BA2:  ADDWF  02,W
0BA4:  MOVWF  FEA
0BA6:  MOVFF  FEF,263
....................    if (tgl == USB_DTS_TOGGLE)  
0BAA:  MOVF   x62,W
0BAC:  SUBLW  02
0BAE:  BNZ   0BBC
....................    { 
....................       if (bit_test(i,6)) 
0BB0:  BTFSS  x63.6
0BB2:  BRA    0BB8
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0BB4:  CLRF   x62
0BB6:  BRA    0BBC
....................       else 
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0BB8:  MOVLW  01
0BBA:  MOVWF  x62
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0BBC:  MOVF   x62,W
0BBE:  SUBLW  03
0BC0:  BNZ   0BFA
....................    { 
....................       i = 0x84; 
0BC2:  MOVLW  84
0BC4:  MOVWF  x63
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
0BC6:  CLRF   x6C
0BC8:  MOVFF  261,26B
0BCC:  CLRF   x6E
0BCE:  MOVLW  08
0BD0:  MOVWF  x6D
0BD2:  MOVLB  0
0BD4:  CALL   02C4
0BD8:  MOVFF  02,267
0BDC:  MOVFF  01,266
0BE0:  MOVLW  04
0BE2:  MOVLB  2
0BE4:  ADDWF  x66,F
0BE6:  MOVLW  00
0BE8:  ADDWFC x67,F
0BEA:  MOVFF  266,FE9
0BEE:  MOVLW  04
0BF0:  ADDWF  x67,W
0BF2:  MOVWF  FEA
0BF4:  MOVLW  84
0BF6:  MOVWF  FEF
....................    } 
0BF8:  BRA    0C08
....................    else if (tgl == USB_DTS_DATA1) 
0BFA:  DECFSZ x62,W
0BFC:  BRA    0C04
....................       i = 0xC8;  //DATA1, UOWN 
0BFE:  MOVLW  C8
0C00:  MOVWF  x63
0C02:  BRA    0C08
....................    else //if (tgl == USB_DTS_DATA0)  
....................       i = 0x88; //DATA0, UOWN 
0C04:  MOVLW  88
0C06:  MOVWF  x63
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
0C08:  BCF    FD8.0
0C0A:  RLCF   x61,W
0C0C:  CLRF   03
0C0E:  MOVFF  FF2,266
0C12:  BCF    FF2.7
0C14:  MOVLB  0
0C16:  CALL   00CE
0C1A:  TBLRD*+
0C1C:  MOVFF  FF5,03
0C20:  MOVLB  2
0C22:  BTFSC  x66.7
0C24:  BSF    FF2.7
0C26:  MOVWF  x64
0C28:  MOVFF  03,265
....................    EP_BDxCNT_O(endpoint) = len; 
0C2C:  CLRF   x6C
0C2E:  MOVFF  261,26B
0C32:  CLRF   x6E
0C34:  MOVLW  08
0C36:  MOVWF  x6D
0C38:  MOVLB  0
0C3A:  CALL   02C4
0C3E:  MOVFF  01,266
0C42:  MOVLW  01
0C44:  MOVLB  2
0C46:  ADDWF  01,W
0C48:  MOVWF  01
0C4A:  MOVLW  00
0C4C:  ADDWFC 02,W
0C4E:  MOVWF  03
0C50:  MOVFF  01,FE9
0C54:  MOVLW  04
0C56:  ADDWF  03,W
0C58:  MOVWF  FEA
0C5A:  MOVFF  264,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
0C5E:  BTFSS  x65.0
0C60:  BRA    0C64
0C62:  BSF    x63.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
0C64:  BTFSS  x65.1
0C66:  BRA    0C6A
0C68:  BSF    x63.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
0C6A:  CLRF   x6C
0C6C:  MOVFF  261,26B
0C70:  CLRF   x6E
0C72:  MOVLW  08
0C74:  MOVWF  x6D
0C76:  MOVLB  0
0C78:  CALL   02C4
0C7C:  MOVLB  2
0C7E:  MOVFF  01,FE9
0C82:  MOVLW  04
0C84:  ADDWF  02,W
0C86:  MOVWF  FEA
0C88:  MOVFF  263,FEF
0C8C:  MOVLB  0
0C8E:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... unsigned int16 usb_rx_packet_size(unsigned int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
*
11F6:  CLRF   16
11F8:  BTFSC  FF2.7
11FA:  BSF    16.7
11FC:  BCF    FF2.7
.................... { 
....................    unsigned int8 * al; 
....................    unsigned int8 st; 
....................    unsigned int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
11FE:  MOVLB  2
1200:  CLRF   x6C
1202:  MOVFF  24A,26B
1206:  CLRF   x6E
1208:  MOVLW  08
120A:  MOVWF  x6D
120C:  MOVLB  0
120E:  CALL   02C4
1212:  BTFSC  16.7
1214:  BSF    FF2.7
1216:  MOVFF  01,254
121A:  MOVLW  02
121C:  MOVLB  2
121E:  ADDWF  01,W
1220:  MOVWF  01
1222:  MOVLW  00
1224:  ADDWFC 02,W
1226:  MOVWF  03
1228:  MOVFF  01,FE9
122C:  MOVLW  04
122E:  ADDWF  03,W
1230:  MOVWF  FEA
1232:  MOVFF  FEC,250
1236:  MOVF   FED,F
1238:  MOVFF  FEF,24F
123C:  CLRF   16
123E:  BTFSC  FF2.7
1240:  BSF    16.7
1242:  BCF    FF2.7
....................    i = EP_BDxCNT_O(endpoint); 
1244:  CLRF   x6C
1246:  MOVFF  24A,26B
124A:  CLRF   x6E
124C:  MOVLW  08
124E:  MOVWF  x6D
1250:  MOVLB  0
1252:  CALL   02C4
1256:  BTFSC  16.7
1258:  BSF    FF2.7
125A:  MOVFF  01,254
125E:  MOVLW  01
1260:  MOVLB  2
1262:  ADDWF  01,W
1264:  MOVWF  01
1266:  MOVLW  00
1268:  ADDWFC 02,W
126A:  MOVWF  03
126C:  MOVFF  01,FE9
1270:  MOVLW  04
1272:  ADDWF  03,W
1274:  MOVWF  FEA
1276:  CLRF   x53
1278:  MOVFF  FEF,252
127C:  CLRF   16
127E:  BTFSC  FF2.7
1280:  BSF    16.7
1282:  BCF    FF2.7
....................    st = EP_BDxST_O(endpoint); 
1284:  CLRF   x6C
1286:  MOVFF  24A,26B
128A:  CLRF   x6E
128C:  MOVLW  08
128E:  MOVWF  x6D
1290:  MOVLB  0
1292:  CALL   02C4
1296:  BTFSC  16.7
1298:  BSF    FF2.7
129A:  MOVLB  2
129C:  MOVFF  01,FE9
12A0:  MOVLW  04
12A2:  ADDWF  02,W
12A4:  MOVWF  FEA
12A6:  MOVFF  FEF,251
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
12AA:  BTFSS  x51.0
12AC:  BRA    12B0
12AE:  BSF    x53.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
12B0:  BTFSS  x51.1
12B2:  BRA    12B6
12B4:  BSF    x53.1
....................  
....................    if (i < max) {max = i;} 
12B6:  MOVF   x53,W
12B8:  SUBWF  x4E,W
12BA:  BNC   12CC
12BC:  BNZ   12C4
12BE:  MOVF   x4D,W
12C0:  SUBWF  x52,W
12C2:  BC    12CC
12C4:  MOVFF  253,24E
12C8:  MOVFF  252,24D
....................     
....................    memcpy(ptr, al ,max); 
12CC:  MOVFF  24C,FEA
12D0:  MOVFF  24B,FE9
12D4:  MOVFF  250,FE2
12D8:  MOVFF  24F,FE1
12DC:  MOVFF  24E,02
12E0:  MOVFF  24D,01
12E4:  MOVF   01,F
12E6:  BZ    12EC
12E8:  INCF   02,F
12EA:  BRA    12F0
12EC:  MOVF   02,F
12EE:  BZ    12FC
12F0:  MOVFF  FE6,FEE
12F4:  DECFSZ 01,F
12F6:  BRA    12F0
12F8:  DECFSZ 02,F
12FA:  BRA    12F0
....................  
....................    return(max); 
12FC:  MOVFF  24D,01
1300:  MOVFF  24E,02
1304:  MOVLB  0
1306:  GOTO   1320 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(unsigned int8 endpoint, unsigned int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
130A:  MOVFF  245,24A
130E:  MOVFF  247,24C
1312:  MOVFF  246,24B
1316:  MOVFF  249,24E
131A:  MOVFF  248,24D
131E:  BRA    11F6
1320:  MOVFF  02,249
1324:  MOVFF  01,248
1328:  CLRF   16
132A:  BTFSC  FF2.7
132C:  BSF    16.7
132E:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
1330:  MOVFF  245,261
1334:  MOVLW  02
1336:  MOVLB  2
1338:  MOVWF  x62
133A:  MOVLB  0
133C:  RCALL  0B86
133E:  BTFSC  16.7
1340:  BSF    FF2.7
....................  
....................    return(max); 
1342:  MOVLB  2
1344:  MOVFF  248,01
1348:  MOVFF  249,02
134C:  MOVLB  0
134E:  GOTO   249E (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0A00:  MOVLB  2
0A02:  BCF    x62.0
0A04:  BTFSC  x61.7
0A06:  BSF    x62.0
....................    endpoint &= 0x7F; 
0A08:  BCF    x61.7
....................     
....................    if (direction)  
0A0A:  BTFSS  x62.0
0A0C:  BRA    0A40
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
0A0E:  CLRF   x6C
0A10:  MOVFF  261,26B
0A14:  CLRF   x6E
0A16:  MOVLW  08
0A18:  MOVWF  x6D
0A1A:  MOVLB  0
0A1C:  RCALL  02C4
0A1E:  MOVFF  02,264
0A22:  MOVFF  01,263
0A26:  MOVLW  04
0A28:  MOVLB  2
0A2A:  ADDWF  x63,F
0A2C:  MOVLW  00
0A2E:  ADDWFC x64,F
0A30:  MOVFF  263,FE9
0A34:  MOVLW  04
0A36:  ADDWF  x64,W
0A38:  MOVWF  FEA
0A3A:  MOVLW  84
0A3C:  MOVWF  FEF
....................    } 
0A3E:  BRA    0A60
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0A40:  CLRF   x6C
0A42:  MOVFF  261,26B
0A46:  CLRF   x6E
0A48:  MOVLW  08
0A4A:  MOVWF  x6D
0A4C:  MOVLB  0
0A4E:  RCALL  02C4
0A50:  MOVLB  2
0A52:  MOVFF  01,FE9
0A56:  MOVLW  04
0A58:  ADDWF  02,W
0A5A:  MOVWF  FEA
0A5C:  MOVLW  84
0A5E:  MOVWF  FEF
....................    } 
0A60:  MOVLB  0
0A62:  GOTO   0B12 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
099C:  MOVLB  2
099E:  BCF    x62.0
09A0:  BTFSC  x61.7
09A2:  BSF    x62.0
....................    endpoint &= 0x7F; 
09A4:  BCF    x61.7
....................     
....................    if (direction)  
09A6:  BTFSS  x62.0
09A8:  BRA    09DC
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
09AA:  CLRF   x6C
09AC:  MOVFF  261,26B
09B0:  CLRF   x6E
09B2:  MOVLW  08
09B4:  MOVWF  x6D
09B6:  MOVLB  0
09B8:  RCALL  02C4
09BA:  MOVFF  02,264
09BE:  MOVFF  01,263
09C2:  MOVLW  04
09C4:  MOVLB  2
09C6:  ADDWF  x63,F
09C8:  MOVLW  00
09CA:  ADDWFC x64,F
09CC:  MOVFF  263,FE9
09D0:  MOVLW  04
09D2:  ADDWF  x64,W
09D4:  MOVWF  FEA
09D6:  MOVLW  88
09D8:  MOVWF  FEF
....................      #endif 
....................    } 
09DA:  BRA    09FA
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
09DC:  CLRF   x6C
09DE:  MOVFF  261,26B
09E2:  CLRF   x6E
09E4:  MOVLW  08
09E6:  MOVWF  x6D
09E8:  MOVLB  0
09EA:  RCALL  02C4
09EC:  MOVLB  2
09EE:  MOVFF  01,FE9
09F2:  MOVLW  04
09F4:  ADDWF  02,W
09F6:  MOVWF  FEA
09F8:  CLRF   FEF
....................    } 
09FA:  MOVLB  0
09FC:  GOTO   0B02 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    unsigned int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0A66:  MOVLB  2
0A68:  BCF    x62.0
0A6A:  BTFSC  x61.7
0A6C:  BSF    x62.0
....................    endpoint &= 0x7F; 
0A6E:  BCF    x61.7
....................     
....................    if (direction)  
0A70:  BTFSS  x62.0
0A72:  BRA    0AA6
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0A74:  CLRF   x6C
0A76:  MOVFF  261,26B
0A7A:  CLRF   x6E
0A7C:  MOVLW  08
0A7E:  MOVWF  x6D
0A80:  MOVLB  0
0A82:  RCALL  02C4
0A84:  MOVFF  02,265
0A88:  MOVFF  01,264
0A8C:  MOVLW  04
0A8E:  MOVLB  2
0A90:  ADDWF  x64,F
0A92:  MOVLW  00
0A94:  ADDWFC x65,F
0A96:  MOVFF  264,FE9
0A9A:  MOVLW  04
0A9C:  ADDWF  x65,W
0A9E:  MOVWF  FEA
0AA0:  MOVFF  FEF,263
....................    } 
0AA4:  BRA    0AC6
....................    else  
....................    { 
....................       st=EP_BDxST_O(endpoint); 
0AA6:  CLRF   x6C
0AA8:  MOVFF  261,26B
0AAC:  CLRF   x6E
0AAE:  MOVLW  08
0AB0:  MOVWF  x6D
0AB2:  MOVLB  0
0AB4:  RCALL  02C4
0AB6:  MOVLB  2
0AB8:  MOVFF  01,FE9
0ABC:  MOVLW  04
0ABE:  ADDWF  02,W
0AC0:  MOVWF  FEA
0AC2:  MOVFF  FEF,263
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
0AC6:  BTFSS  x63.7
0AC8:  BRA    0ACE
0ACA:  BTFSC  x63.2
0ACC:  BRA    0AD2
0ACE:  MOVLW  00
0AD0:  BRA    0AD4
0AD2:  MOVLW  01
0AD4:  MOVWF  01
0AD6:  MOVLB  0
0AD8:  GOTO   0B2A (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(unsigned int8 address)  
.................... { 
....................    UADDR = address; 
*
0E14:  MOVFF  262,F6E
....................     
....................    if (address)  
0E18:  MOVLB  2
0E1A:  MOVF   x62,F
0E1C:  BZ    0E24
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0E1E:  MOVLW  04
0E20:  MOVWF  1F
....................    } 
0E22:  BRA    0E28
....................    else  
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0E24:  MOVLW  02
0E26:  MOVWF  1F
....................    } 
0E28:  MOVLB  0
0E2A:  GOTO   0E38 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(unsigned int8 config)  
.................... { 
....................    unsigned int8 en; 
....................    unsigned int16 addy; 
....................    unsigned int8 new_uep; 
....................    unsigned int16 len; 
....................    unsigned int8 i; 
....................     
....................    if (config == 0) 
*
0612:  MOVLB  2
0614:  MOVF   x61,F
0616:  BNZ   0624
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0618:  MOVLW  04
061A:  MOVWF  1F
....................       usb_disable_endpoints(); 
061C:  MOVLB  0
061E:  RCALL  0356
....................    } 
0620:  BRA    0826
0622:  MOVLB  2
....................    else  
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
0624:  MOVLW  05
0626:  MOVWF  1F
....................       addy = (unsigned int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0628:  MOVLW  04
062A:  MOVWF  x64
062C:  MOVLW  90
062E:  MOVWF  x63
....................       for (en=1; en<USB_NUM_UEP; en++)  
0630:  MOVLW  01
0632:  MOVWF  x62
0634:  MOVF   x62,W
0636:  SUBLW  0F
0638:  BTFSS  FD8.0
063A:  BRA    0826
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
063C:  MOVFF  262,26A
0640:  MOVLB  0
0642:  RCALL  02E6
....................          new_uep = 0; 
0644:  MOVLB  2
0646:  CLRF   x65
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
0648:  CLRF   03
064A:  MOVF   x62,W
064C:  MOVFF  FF2,269
0650:  BCF    FF2.7
0652:  MOVLB  0
0654:  RCALL  00AE
0656:  MOVLB  2
0658:  BTFSC  x69.7
065A:  BSF    FF2.7
065C:  SUBLW  FF
065E:  BZ    073E
....................          { 
....................             new_uep = 0x04; 
0660:  MOVLW  04
0662:  MOVWF  x65
....................             len = usb_ep_rx_size[en]; 
0664:  BCF    FD8.0
0666:  RLCF   x62,W
0668:  CLRF   03
066A:  MOVFF  FF2,269
066E:  BCF    FF2.7
0670:  MOVLB  0
0672:  RCALL  00CE
0674:  TBLRD*+
0676:  MOVFF  FF5,03
067A:  MOVLB  2
067C:  BTFSC  x69.7
067E:  BSF    FF2.7
0680:  MOVWF  x66
0682:  MOVFF  03,267
....................             EP_BDxCNT_O(en) = len; 
0686:  CLRF   x6C
0688:  MOVFF  262,26B
068C:  CLRF   x6E
068E:  MOVLW  08
0690:  MOVWF  x6D
0692:  MOVLB  0
0694:  RCALL  02C4
0696:  MOVFF  01,269
069A:  MOVLW  01
069C:  MOVLB  2
069E:  ADDWF  01,W
06A0:  MOVWF  01
06A2:  MOVLW  00
06A4:  ADDWFC 02,W
06A6:  MOVWF  03
06A8:  MOVFF  01,FE9
06AC:  MOVLW  04
06AE:  ADDWF  03,W
06B0:  MOVWF  FEA
06B2:  MOVFF  266,FEF
....................             EP_BDxADR_O(en) = addy; 
06B6:  CLRF   x6C
06B8:  MOVFF  262,26B
06BC:  CLRF   x6E
06BE:  MOVLW  08
06C0:  MOVWF  x6D
06C2:  MOVLB  0
06C4:  RCALL  02C4
06C6:  MOVFF  01,269
06CA:  MOVLW  02
06CC:  MOVLB  2
06CE:  ADDWF  01,W
06D0:  MOVWF  01
06D2:  MOVLW  00
06D4:  ADDWFC 02,W
06D6:  MOVWF  03
06D8:  MOVFF  01,FE9
06DC:  MOVLW  04
06DE:  ADDWF  03,W
06E0:  MOVWF  FEA
06E2:  MOVFF  264,FEC
06E6:  MOVF   FED,F
06E8:  MOVFF  263,FEF
....................             addy += usb_ep_rx_size[en]; 
06EC:  BCF    FD8.0
06EE:  RLCF   x62,W
06F0:  CLRF   03
06F2:  MOVFF  FF2,269
06F6:  BCF    FF2.7
06F8:  MOVLB  0
06FA:  RCALL  00CE
06FC:  TBLRD*+
06FE:  MOVFF  FF5,03
0702:  MOVLB  2
0704:  BTFSC  x69.7
0706:  BSF    FF2.7
0708:  ADDWF  x63,F
070A:  MOVF   03,W
070C:  ADDWFC x64,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
070E:  MOVLW  88
0710:  MOVWF  x68
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0712:  BTFSS  x67.0
0714:  BRA    0718
0716:  BSF    x68.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0718:  BTFSS  x67.1
071A:  BRA    071E
071C:  BSF    x68.1
....................             EP_BDxST_O(en) = i; 
071E:  CLRF   x6C
0720:  MOVFF  262,26B
0724:  CLRF   x6E
0726:  MOVLW  08
0728:  MOVWF  x6D
072A:  MOVLB  0
072C:  RCALL  02C4
072E:  MOVLB  2
0730:  MOVFF  01,FE9
0734:  MOVLW  04
0736:  ADDWF  02,W
0738:  MOVWF  FEA
073A:  MOVFF  268,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
073E:  CLRF   03
0740:  MOVF   x62,W
0742:  MOVFF  FF2,269
0746:  BCF    FF2.7
0748:  MOVLB  0
074A:  RCALL  00AE
074C:  MOVLB  2
074E:  BTFSC  x69.7
0750:  BSF    FF2.7
0752:  SUBLW  FF
0754:  BZ    07EC
....................          { 
....................             new_uep |= 0x02; 
0756:  BSF    x65.1
....................             EP_BDxADR_I(en) = addy; 
0758:  CLRF   x6C
075A:  MOVFF  262,26B
075E:  CLRF   x6E
0760:  MOVLW  08
0762:  MOVWF  x6D
0764:  MOVLB  0
0766:  RCALL  02C4
0768:  MOVFF  02,26A
076C:  MOVFF  01,269
0770:  MOVLW  04
0772:  MOVLB  2
0774:  ADDWF  x69,F
0776:  MOVLW  00
0778:  ADDWFC x6A,F
077A:  MOVLW  02
077C:  ADDWF  x69,W
077E:  MOVWF  01
0780:  MOVLW  00
0782:  ADDWFC x6A,W
0784:  MOVWF  03
0786:  MOVFF  01,FE9
078A:  MOVLW  04
078C:  ADDWF  03,W
078E:  MOVWF  FEA
0790:  MOVFF  264,FEC
0794:  MOVF   FED,F
0796:  MOVFF  263,FEF
....................             addy += usb_ep_tx_size[en]; 
079A:  BCF    FD8.0
079C:  RLCF   x62,W
079E:  CLRF   03
07A0:  MOVFF  FF2,269
07A4:  BCF    FF2.7
07A6:  MOVLB  0
07A8:  RCALL  00CE
07AA:  TBLRD*+
07AC:  MOVFF  FF5,03
07B0:  MOVLB  2
07B2:  BTFSC  x69.7
07B4:  BSF    FF2.7
07B6:  ADDWF  x63,F
07B8:  MOVF   03,W
07BA:  ADDWFC x64,F
....................             EP_BDxST_I(en) = 0x40; 
07BC:  CLRF   x6C
07BE:  MOVFF  262,26B
07C2:  CLRF   x6E
07C4:  MOVLW  08
07C6:  MOVWF  x6D
07C8:  MOVLB  0
07CA:  RCALL  02C4
07CC:  MOVFF  02,26A
07D0:  MOVFF  01,269
07D4:  MOVLW  04
07D6:  MOVLB  2
07D8:  ADDWF  x69,F
07DA:  MOVLW  00
07DC:  ADDWFC x6A,F
07DE:  MOVFF  269,FE9
07E2:  MOVLW  04
07E4:  ADDWF  x6A,W
07E6:  MOVWF  FEA
07E8:  MOVLW  40
07EA:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
07EC:  MOVF   x65,W
07EE:  SUBLW  06
07F0:  BNZ   07F6
07F2:  MOVLW  0E
07F4:  MOVWF  x65
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
07F6:  CLRF   03
07F8:  MOVF   x62,W
07FA:  MOVFF  FF2,269
07FE:  BCF    FF2.7
0800:  MOVLB  0
0802:  RCALL  00AE
0804:  MOVLB  2
0806:  BTFSC  x69.7
0808:  BSF    FF2.7
080A:  SUBLW  01
080C:  BZ    0810
080E:  BSF    x65.4
....................           
....................          UEP(en) = new_uep; 
0810:  CLRF   03
0812:  MOVF   x62,W
0814:  ADDLW  70
0816:  MOVWF  FE9
0818:  MOVLW  0F
081A:  ADDWFC 03,W
081C:  MOVWF  FEA
081E:  MOVFF  265,FEF
0822:  INCF   x62,F
0824:  BRA    0634
0826:  MOVLB  0
....................       } 
....................    } 
0828:  GOTO   08D4 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(unsigned int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
02E6:  CLRF   03
02E8:  MOVLB  2
02EA:  MOVF   x6A,W
02EC:  ADDLW  70
02EE:  MOVWF  FE9
02F0:  MOVLW  0F
02F2:  ADDWFC 03,W
02F4:  MOVWF  FEA
02F6:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
02F8:  MOVFF  26A,26B
02FC:  MOVLB  0
02FE:  RCALL  0262
0300:  MOVF   01,F
0302:  BZ    0354
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
0304:  MOVLB  2
0306:  CLRF   x6C
0308:  MOVFF  26A,26B
030C:  CLRF   x6E
030E:  MOVLW  08
0310:  MOVWF  x6D
0312:  MOVLB  0
0314:  RCALL  02C4
0316:  MOVLB  2
0318:  MOVFF  01,FE9
031C:  MOVLW  04
031E:  ADDWF  02,W
0320:  MOVWF  FEA
0322:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
0324:  CLRF   x6C
0326:  MOVFF  26A,26B
032A:  CLRF   x6E
032C:  MOVLW  08
032E:  MOVWF  x6D
0330:  MOVLB  0
0332:  RCALL  02C4
0334:  MOVFF  02,26C
0338:  MOVFF  01,26B
033C:  MOVLW  04
033E:  MOVLB  2
0340:  ADDWF  x6B,F
0342:  MOVLW  00
0344:  ADDWFC x6C,F
0346:  MOVFF  26B,FE9
034A:  MOVLW  04
034C:  ADDWF  x6C,W
034E:  MOVWF  FEA
0350:  CLRF   FEF
0352:  MOVLB  0
....................    } 
0354:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    unsigned int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
0356:  MOVLW  01
0358:  MOVLB  2
035A:  MOVWF  x69
035C:  MOVF   x69,W
035E:  SUBLW  0F
0360:  BNC   0370
....................       usb_disable_endpoint(i); 
0362:  MOVFF  269,26A
0366:  MOVLB  0
0368:  RCALL  02E6
036A:  MOVLB  2
036C:  INCF   x69,F
036E:  BRA    035C
0370:  MOVLB  0
0372:  RETURN 0
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
0006:  RETURN 0
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #if !defined(USB_ISR_POLLING) && !defined(USB_NO_ISR_PREPROCESSOR) 
.................... #int_usb NOCLEAR 
.................... #endif 
.................... void usb_isr(void) 
.................... { 
....................    unsigned int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0F58:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0F5A:  MOVF   1F,F
0F5C:  BTFSC  FD8.2
0F5E:  BRA    0FD2
....................    if (UIR)  
0F60:  MOVF   F68,F
0F62:  BTFSC  FD8.2
0F64:  BRA    0FD2
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0F66:  BTFSS  F68.2
0F68:  BRA    0F70
0F6A:  BTFSC  F69.2
0F6C:  GOTO   021C
....................  
....................       if (UCON_SUSPND) return; 
0F70:  BTFSC  F6D.1
0F72:  BRA    0FD2
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0F74:  BTFSS  F68.5
0F76:  BRA    0F7E
0F78:  BTFSC  F69.5
0F7A:  GOTO   024C
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0F7E:  BTFSS  F68.1
0F80:  BRA    0F88
0F82:  BTFSC  F69.1
0F84:  GOTO   025A
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0F88:  BTFSS  F68.0
0F8A:  BRA    0F92
0F8C:  BTFSC  F69.0
0F8E:  GOTO   03A0
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0F92:  BTFSS  F68.4
0F94:  BRA    0F9C
0F96:  BTFSC  F69.4
0F98:  GOTO   03CA
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0F9C:  BTFSS  F68.6
0F9E:  BRA    0FA6
0FA0:  BTFSC  F69.6
0FA2:  GOTO   03D4
....................  
....................       TRNAttempts = 0; 
0FA6:  MOVLB  2
0FA8:  CLRF   x5E
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0FAA:  BTFSS  F68.3
0FAC:  BRA    0FC2
0FAE:  BTFSS  F69.3
0FB0:  BRA    0FC2
....................          { 
....................             USTATCopy = U1STAT; 
0FB2:  MOVFF  F6C,1E
....................             usb_clear_trn(); 
0FB6:  MOVLB  0
0FB8:  CALL   0004
....................             usb_isr_tok_dne(); 
0FBC:  BRA    0E60
....................          } 
0FBE:  BRA    0FC6
0FC0:  MOVLB  2
....................          else 
....................             break; 
0FC2:  BRA    0FD0
0FC4:  MOVLB  0
....................       } while (TRNAttempts++ < 4); 
0FC6:  MOVLB  2
0FC8:  MOVF   x5E,W
0FCA:  INCF   x5E,F
0FCC:  SUBLW  03
0FCE:  BC    0FAA
0FD0:  MOVLB  0
....................  
....................      #if defined(USB_CDC_ISR) 
....................       //has to be done here, can't be done until TRN is empty. 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          USB_CDC_ISR(); 
....................       } 
....................      #endif 
....................    } 
0FD2:  GOTO   006C
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
03D4:  BCF    F68.6
03D6:  GOTO   0FA6 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
03A0:  CLRF   F6A
....................    UIR = 0; 
03A2:  CLRF   F68
....................    UEIE = 0x9F; 
03A4:  MOVLW  9F
03A6:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
03A8:  MOVLW  3D
03AA:  MOVWF  F69
....................  
....................    UADDR = 0; 
03AC:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
03AE:  RCALL  0356
....................     
....................    usb_token_reset(); 
03B0:  RCALL  0374
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
03B2:  MOVLW  16
03B4:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
03B6:  BTFSS  F68.3
03B8:  BRA    03BE
....................    { 
....................       usb_clear_trn(); 
03BA:  RCALL  0004
03BC:  BRA    03B6
....................    } 
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
03BE:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
03C0:  RCALL  022C
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
03C2:  MOVLW  03
03C4:  MOVWF  1F
03C6:  GOTO   0F92 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
022C:  MOVLW  40
022E:  MOVLB  4
0230:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
0232:  MOVLW  04
0234:  MOVWF  x03
0236:  MOVLW  10
0238:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
023A:  MOVLW  88
023C:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
023E:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
0240:  MOVLW  04
0242:  MOVWF  x07
0244:  MOVLW  50
0246:  MOVWF  x06
0248:  MOVLB  0
024A:  RETURN 0
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
025A:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
025C:  BCF    F68.1
025E:  GOTO   0F88 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
03CA:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
03CC:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
03CE:  BSF    F6D.1
03D0:  GOTO   0F9C (RETURN)
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
021C:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
021E:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
0220:  BTFSS  F68.2
0222:  BRA    0228
....................    { 
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
0224:  BCF    F68.2
0226:  BRA    0220
....................    } 
0228:  GOTO   0F70 (RETURN)
.................... } 
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
024C:  BTFSS  F70.0
024E:  BRA    0254
....................    { 
....................       usb_init_ep0_setup(); 
0250:  RCALL  022C
....................       bit_clear(UEP(0), 0); 
0252:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0254:  BCF    F68.5
0256:  GOTO   0F7E (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
03DA:  MOVFF  264,20
03DE:  RETURN 0
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
03E0:  SETF   20
03E2:  RETURN 0
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    unsigned int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0E60:  RRCF   1E,W
0E62:  MOVLB  2
0E64:  MOVWF  x5F
0E66:  RRCF   x5F,F
0E68:  RRCF   x5F,F
0E6A:  MOVLW  1F
0E6C:  ANDWF  x5F,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0E6E:  MOVF   1E,F
0E70:  BNZ   0F0E
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0E72:  MOVLB  4
0E74:  MOVF   x00,W
0E76:  ANDLW  3C
0E78:  MOVLB  2
0E7A:  MOVWF  x60
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0E7C:  MOVLW  43
0E7E:  MOVLB  4
0E80:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0E82:  MOVLB  2
0E84:  MOVF   x60,W
0E86:  SUBLW  34
0E88:  BNZ   0ED4
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0E8A:  MOVLB  4
0E8C:  MOVF   x04,W
0E8E:  ANDLW  80
0E90:  BZ    0E94
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0E92:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0E94:  MOVLB  0
0E96:  BRA    0B54
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0E98:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0E9A:  INCFSZ 20,W
0E9C:  BRA    0EAC
....................             usb_flush_out(0, USB_DTS_STALL); 
0E9E:  MOVLB  2
0EA0:  CLRF   x61
0EA2:  MOVLW  03
0EA4:  MOVWF  x62
0EA6:  MOVLB  0
0EA8:  RCALL  0B86
0EAA:  BRA    0ED0
....................          else  
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0EAC:  MOVLB  2
0EAE:  CLRF   x61
0EB0:  MOVLW  02
0EB2:  MOVWF  x62
0EB4:  MOVLB  0
0EB6:  RCALL  0B86
....................             if (__setup_0_tx_size != 0xFE) 
0EB8:  MOVF   20,W
0EBA:  SUBLW  FE
0EBC:  BZ    0ED0
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0EBE:  MOVLB  2
0EC0:  CLRF   x61
0EC2:  CLRF   x63
0EC4:  MOVFF  20,262
0EC8:  MOVLW  04
0ECA:  MOVWF  x64
0ECC:  MOVLB  0
0ECE:  RCALL  0CE6
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
0ED0:  BRA    0F0A
0ED2:  MOVLB  2
....................       else if (pidKey == USB_PIC_PID_OUT)  
0ED4:  MOVF   x60,W
0ED6:  SUBLW  04
0ED8:  BNZ   0F0C
....................       { 
....................          usb_isr_tok_out_dne(0); 
0EDA:  CLRF   x61
0EDC:  MOVLB  0
0EDE:  RCALL  0E0A
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0EE0:  MOVLB  2
0EE2:  CLRF   x61
0EE4:  MOVLW  02
0EE6:  MOVWF  x62
0EE8:  MOVLB  0
0EEA:  RCALL  0B86
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0EEC:  MOVF   20,W
0EEE:  SUBLW  FE
0EF0:  BZ    0F0A
0EF2:  INCFSZ 20,W
0EF4:  BRA    0EF8
0EF6:  BRA    0F0A
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0EF8:  MOVLB  2
0EFA:  CLRF   x61
0EFC:  CLRF   x63
0EFE:  MOVFF  20,262
0F02:  MOVLW  01
0F04:  MOVWF  x64
0F06:  MOVLB  0
0F08:  RCALL  0CE6
....................          } 
....................       } 
0F0A:  MOVLB  2
....................       else 
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
0F0C:  BRA    0F52
....................    else if (USTATCopy == USTAT_IN_E0)  
0F0E:  MOVF   1E,W
0F10:  SUBLW  04
0F12:  BNZ   0F38
....................    {    
....................       //pic -> host transfer completed 
....................       //EP_BDxST_I(0) = EP_BDxST_I(0) & 0xC3;   //clear up any BDSTAL confusion 
....................       __setup_0_tx_size = 0xFF; 
0F14:  SETF   20
....................       usb_isr_tok_in_dne(0); 
0F16:  CLRF   x61
0F18:  MOVLB  0
0F1A:  RCALL  0E3C
....................       if (__setup_0_tx_size!=0xFF) 
0F1C:  INCFSZ 20,W
0F1E:  BRA    0F22
0F20:  BRA    0F34
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0F22:  MOVLB  2
0F24:  CLRF   x61
0F26:  CLRF   x63
0F28:  MOVFF  20,262
0F2C:  MOVLW  02
0F2E:  MOVWF  x64
0F30:  MOVLB  0
0F32:  RCALL  0CE6
....................       else 
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
0F34:  BRA    0F50
0F36:  MOVLB  2
....................    else  
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0F38:  BTFSC  1E.2
0F3A:  BRA    0F48
....................       { 
....................          //EP_BDxST_O(en) = EP_BDxST_O(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_out_dne(en); 
0F3C:  MOVFF  25F,261
0F40:  MOVLB  0
0F42:  RCALL  0E0A
....................       } 
0F44:  BRA    0F50
0F46:  MOVLB  2
....................       else  
....................       { 
....................          //EP_BDxST_I(en) = EP_BDxST_I(en) & 0xC3;   //clear up any BDSTAL confusion 
....................          usb_isr_tok_in_dne(en); 
0F48:  MOVFF  25F,261
0F4C:  MOVLB  0
0F4E:  RCALL  0E3C
0F50:  MOVLB  2
....................       } 
....................    } 
0F52:  MOVLB  0
0F54:  GOTO   0FBE (RETURN)
.................... } 
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... //#endif 
.................... /* 
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
.................... */ 
.................... //#if (defined(USB_USE_FULL_SPEED) && (USB_USE_FULL_SPEED==1)) 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  64 
.................... /* 
.................... #else 
....................    #define USB_ISO_PACKET_MAX_SIZE     1023 
....................    #define USB_NONISO_PACKET_MAX_SIZE  8 
.................... #endif 
.................... */ 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #if USB_EP1_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP1_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP1_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP1_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #if USB_EP2_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP2_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP2_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP2_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #if USB_EP3_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP3_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP3_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP3_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #if USB_EP4_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP4_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP4_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP4_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #if USB_EP5_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP5_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP5_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP5_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #if USB_EP6_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP6_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP6_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP6_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #if USB_EP7_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP7_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP7_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP7_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #if USB_EP8_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP8_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP8_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP8_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #if USB_EP9_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP9_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP9_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP9_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #if USB_EP10_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP10_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP10_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP10_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #if USB_EP11_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP11_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP11_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP11_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #if USB_EP12_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP12_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP12_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP12_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #if USB_EP13_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP13_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP13_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP13_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #if USB_EP14_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif  
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP14_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP14_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP14_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #if USB_EP15_RX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_RX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_RX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_RX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif   
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE!=USB_ENABLE_DISABLED 
....................  #if (((USB_EP15_TX_ENABLE==USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_ISO_PACKET_MAX_SIZE)) || \ 
....................       ((USB_EP15_TX_ENABLE!=USB_ENDPOINT_TYPE_ISOCHRONOUS) &&   \ 
....................       (USB_EP15_TX_SIZE > USB_NONISO_PACKET_MAX_SIZE))) 
....................    #error Packet size is too big 
....................  #endif    
.................... #endif 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... unsigned int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... unsigned int16 usb_getdesc_ptr; unsigned int16 usb_getdesc_len;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... unsigned int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1192:  MOVF   18,W
1194:  MOVWF  01
1196:  GOTO   28C2 (RETURN)
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(unsigned int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && (!timeout || timeout_1us)); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(unsigned int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (!timeout || (to!=timeout)) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    usb_getdesc_len = 0; 
*
0374:  CLRF   25
0376:  CLRF   24
....................     
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
0378:  MOVLB  2
037A:  CLRF   x5F
037C:  MOVF   x5F,F
037E:  BNZ   0394
....................       USB_Interface[i] = 0;   //reset each interface to default 
0380:  CLRF   03
0382:  MOVF   x5F,W
0384:  ADDLW  26
0386:  MOVWF  FE9
0388:  MOVLW  00
038A:  ADDWFC 03,W
038C:  MOVWF  FEA
038E:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
0390:  INCF   x5F,F
0392:  BRA    037C
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0394:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0396:  MOVLW  01
0398:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
039A:  CLRF   17
039C:  MOVLB  0
039E:  RETURN 0
.................... } 
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(unsigned int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0262:  MOVLB  2
0264:  BCF    x6C.0
0266:  BTFSC  x6B.7
0268:  BSF    x6C.0
....................     
....................    endpoint &= 0x7F; 
026A:  BCF    x6B.7
....................     
....................    if (endpoint > 16) 
026C:  MOVF   x6B,W
026E:  SUBLW  10
0270:  BC    0278
....................       return(FALSE); 
0272:  MOVLW  00
0274:  MOVWF  01
0276:  BRA    02C0
....................     
....................    if (direction) { //IN 
0278:  BTFSS  x6C.0
027A:  BRA    02A0
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
027C:  CLRF   03
027E:  MOVF   x6B,W
0280:  MOVFF  FF2,26D
0284:  BCF    FF2.7
0286:  MOVLB  0
0288:  RCALL  00AE
028A:  MOVLB  2
028C:  BTFSC  x6D.7
028E:  BSF    FF2.7
0290:  SUBLW  FF
0292:  BNZ   0298
0294:  MOVLW  00
0296:  BRA    029A
0298:  MOVLW  01
029A:  MOVWF  01
029C:  BRA    02C0
....................    } 
029E:  BRA    02C0
....................    else {   //OUT 
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
02A0:  CLRF   03
02A2:  MOVF   x6B,W
02A4:  MOVFF  FF2,26D
02A8:  BCF    FF2.7
02AA:  MOVLB  0
02AC:  RCALL  00AE
02AE:  MOVLB  2
02B0:  BTFSC  x6D.7
02B2:  BSF    FF2.7
02B4:  SUBLW  FF
02B6:  BNZ   02BC
02B8:  MOVLW  00
02BA:  BRA    02BE
02BC:  MOVLW  01
02BE:  MOVWF  01
....................    } 
02C0:  MOVLB  0
02C2:  RETURN 0
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(unsigned int8 endpoint) { 
....................    if (endpoint==0) { 
*
0E3C:  MOVLB  2
0E3E:  MOVF   x61,F
0E40:  BNZ   0E5C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0E42:  DECFSZ 17,W
0E44:  BRA    0E50
0E46:  MOVLB  0
0E48:  CALL   03E4
0E4C:  BRA    0E5A
0E4E:  MOVLB  2
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0E50:  MOVF   17,W
0E52:  SUBLW  02
0E54:  BNZ   0E5C
0E56:  MOVLB  0
0E58:  BRA    0E2E
0E5A:  MOVLB  2
....................    } 
....................   #if USB_CDC_DEVICE 
0E5C:  MOVLB  0
0E5E:  RETURN 0
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(unsigned int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0E0A:  MOVLB  2
0E0C:  MOVF   x61,F
0E0E:  BNZ   0E10
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
0E10:  MOVLB  0
0E12:  RETURN 0
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0B54:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0B56:  MOVLB  4
0B58:  MOVF   x10,W
0B5A:  ANDLW  7F
0B5C:  XORLW  00
0B5E:  MOVLB  0
0B60:  BZ    0B70
0B62:  XORLW  01
0B64:  BZ    0B74
0B66:  XORLW  03
0B68:  BZ    0B78
0B6A:  XORLW  23
0B6C:  BZ    0B7C
0B6E:  BRA    0B80
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0B70:  BRA    082C
....................          break; 
0B72:  BRA    0B82
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0B74:  BRA    08E8
....................          break; 
0B76:  BRA    0B82
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0B78:  BRA    0ADC
....................          break; 
0B7A:  BRA    0B82
....................           
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc, " class"); 
....................         #if USB_HID_DEVICE && USB_CDC_DEVICE 
....................          if (usb_ep0_rx_buffer[4] == USB_HID_INTERFACE) 
....................          { 
....................             usb_isr_tkn_setup_ClassInterface(); 
....................          } 
....................          else 
....................          { 
....................             usb_isr_tkn_cdc(); 
....................          } 
....................         #elif USB_HID_DEVICE 
....................          usb_isr_tkn_setup_ClassInterface(); 
0B7C:  BRA    0B48
....................         #else 
....................          usb_isr_tkn_cdc(); 
....................         #endif 
....................          break; 
0B7E:  BRA    0B82
.................... #endif 
....................  
....................  
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0B80:  RCALL  03E0
....................          break; 
....................    } 
0B82:  GOTO   0E98 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
082C:  MOVLB  4
082E:  MOVF   x11,W
0830:  XORLW  00
0832:  MOVLB  0
0834:  BZ    0850
0836:  XORLW  01
0838:  BZ    0864
083A:  XORLW  02
083C:  BZ    0880
083E:  XORLW  06
0840:  BZ    089A
0842:  XORLW  03
0844:  BZ    08AC
0846:  XORLW  0E
0848:  BZ    08B0
084A:  XORLW  01
084C:  BZ    08C0
084E:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0850:  MOVFF  19,450
....................             usb_ep0_tx_buffer[1]=0; 
0854:  MOVLB  4
0856:  CLRF   x51
....................             usb_request_send_response(2); 
0858:  MOVLW  02
085A:  MOVLB  2
085C:  MOVWF  x64
085E:  MOVLB  0
0860:  RCALL  03DA
....................             break; 
0862:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0864:  MOVLB  4
0866:  DECFSZ x12,W
0868:  BRA    087A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
086A:  MOVLW  01
086C:  ANDWF  19,F
....................                usb_put_0len_0(); 
086E:  MOVLB  2
0870:  CLRF   x64
0872:  MOVLB  0
0874:  RCALL  03DA
....................             } 
0876:  BRA    087E
0878:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
087A:  MOVLB  0
087C:  RCALL  03E0
....................             break; 
087E:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0880:  MOVLB  4
0882:  DECFSZ x12,W
0884:  BRA    0894
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
0886:  BSF    19.1
....................                usb_put_0len_0(); 
0888:  MOVLB  2
088A:  CLRF   x64
088C:  MOVLB  0
088E:  RCALL  03DA
....................             } 
0890:  BRA    0898
0892:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
0894:  MOVLB  0
0896:  RCALL  03E0
....................             break; 
0898:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
089A:  MOVLW  02
089C:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
089E:  MOVFF  412,21
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
08A2:  MOVLB  2
08A4:  CLRF   x64
08A6:  MOVLB  0
08A8:  RCALL  03DA
....................             break; 
08AA:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
08AC:  RCALL  04C2
....................             break; 
08AE:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
08B0:  MOVFF  18,450
....................             usb_request_send_response(1); 
08B4:  MOVLW  01
08B6:  MOVLB  2
08B8:  MOVWF  x64
08BA:  MOVLB  0
08BC:  RCALL  03DA
....................             break; 
08BE:  BRA    08E4
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
08C0:  MOVLB  4
08C2:  MOVF   x12,W
08C4:  SUBLW  01
08C6:  BNC   08DE
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
08C8:  MOVFF  412,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
08CC:  MOVFF  412,261
08D0:  MOVLB  0
08D2:  BRA    0612
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
08D4:  MOVLB  2
08D6:  CLRF   x64
08D8:  MOVLB  0
08DA:  RCALL  03DA
08DC:  MOVLB  4
....................             } 
....................             break; 
08DE:  MOVLB  0
08E0:  BRA    08E4
....................  
....................       default: 
....................             usb_request_stall(); 
08E2:  RCALL  03E0
....................             break; 
....................    } 
08E4:  GOTO   0B82 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    unsigned int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
08E8:  MOVFF  18,261
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
08EC:  MOVLB  4
08EE:  MOVF   x11,W
08F0:  XORLW  00
08F2:  MOVLB  0
08F4:  BZ    0904
08F6:  XORLW  0A
08F8:  BZ    0916
08FA:  XORLW  01
08FC:  BZ    0966
08FE:  XORLW  0D
0900:  BZ    0992
0902:  BRA    0996
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0904:  MOVLB  4
0906:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0908:  CLRF   x51
....................             usb_request_send_response(2); 
090A:  MOVLW  02
090C:  MOVLB  2
090E:  MOVWF  x64
0910:  MOVLB  0
0912:  RCALL  03DA
....................             break; 
0914:  BRA    0998
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0916:  MOVLB  2
0918:  MOVF   x61,F
091A:  BZ    0960
091C:  MOVLW  01
091E:  SUBWF  x61,W
0920:  CLRF   03
0922:  MOVFF  FF2,262
0926:  BCF    FF2.7
0928:  MOVLB  0
092A:  RCALL  019E
092C:  MOVLB  2
092E:  BTFSC  x62.7
0930:  BSF    FF2.7
0932:  MOVWF  01
0934:  MOVLB  4
0936:  SUBWF  x14,W
0938:  BTFSS  FD8.0
093A:  BRA    0940
093C:  MOVLB  2
093E:  BRA    0960
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0940:  CLRF   03
0942:  MOVF   x14,W
0944:  ADDLW  26
0946:  MOVWF  FE9
0948:  MOVLW  00
094A:  ADDWFC 03,W
094C:  MOVWF  FEA
094E:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
0952:  MOVLW  01
0954:  MOVLB  2
0956:  MOVWF  x64
0958:  MOVLB  0
095A:  RCALL  03DA
....................             } 
095C:  BRA    0964
095E:  MOVLB  2
....................             else 
....................                usb_request_stall(); 
0960:  MOVLB  0
0962:  RCALL  03E0
....................             break; 
0964:  BRA    0998
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0966:  MOVLB  2
0968:  MOVF   x61,F
096A:  BZ    098C
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
096C:  CLRF   03
096E:  MOVLB  4
0970:  MOVF   x14,W
0972:  ADDLW  26
0974:  MOVWF  FE9
0976:  MOVLW  00
0978:  ADDWFC 03,W
097A:  MOVWF  FEA
097C:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0980:  MOVLB  2
0982:  CLRF   x64
0984:  MOVLB  0
0986:  RCALL  03DA
....................             } 
0988:  BRA    0990
098A:  MOVLB  2
....................             else 
....................                usb_request_stall(); 
098C:  MOVLB  0
098E:  RCALL  03E0
....................             break; 
0990:  BRA    0998
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GDh"); 
....................             usb_Get_Descriptor(); 
0992:  RCALL  04C2
....................             break; 
0994:  BRA    0998
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
0996:  RCALL  03E0
....................             break; 
....................    } 
0998:  GOTO   0B82 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0ADC:  MOVFF  414,26B
0AE0:  CALL   0262
0AE4:  MOVF   01,F
0AE6:  BZ    0B44
....................       switch(usb_ep0_rx_buffer[1]) { 
0AE8:  MOVLB  4
0AEA:  MOVF   x11,W
0AEC:  XORLW  01
0AEE:  MOVLB  0
0AF0:  BZ    0AFC
0AF2:  XORLW  02
0AF4:  BZ    0B0C
0AF6:  XORLW  03
0AF8:  BZ    0B1C
0AFA:  BRA    0B42
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
0AFC:  MOVFF  414,261
0B00:  BRA    099C
....................                usb_put_0len_0(); 
0B02:  MOVLB  2
0B04:  CLRF   x64
0B06:  MOVLB  0
0B08:  RCALL  03DA
....................                break; 
0B0A:  BRA    0B44
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
0B0C:  MOVFF  414,261
0B10:  BRA    0A00
....................                      usb_put_0len_0(); 
0B12:  MOVLB  2
0B14:  CLRF   x64
0B16:  MOVLB  0
0B18:  RCALL  03DA
....................                      break; 
0B1A:  BRA    0B44
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
0B1C:  MOVLB  4
0B1E:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
0B20:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
0B22:  MOVFF  414,261
0B26:  MOVLB  0
0B28:  BRA    0A66
0B2A:  MOVF   01,F
0B2C:  BZ    0B36
....................                   usb_ep0_tx_buffer[0]=1; 
0B2E:  MOVLW  01
0B30:  MOVLB  4
0B32:  MOVWF  x50
0B34:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
0B36:  MOVLW  02
0B38:  MOVLB  2
0B3A:  MOVWF  x64
0B3C:  MOVLB  0
0B3E:  RCALL  03DA
....................                break; 
0B40:  BRA    0B44
....................  
....................          default: 
....................             usb_request_stall(); 
0B42:  RCALL  03E0
....................             break; 
....................       } 
....................    } 
0B44:  GOTO   0B82 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
0B48:  MOVLB  4
0B4A:  MOVF   x11,W
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
0B4C:  MOVLB  0
0B4E:  RCALL  03E0
....................             break; 
....................    } 
0B50:  GOTO   0B82 (RETURN)
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
04C2:  CLRF   23
04C4:  CLRF   22
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
04C6:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
04C8:  MOVLB  4
04CA:  MOVF   x13,W
04CC:  XORLW  01
04CE:  MOVLB  0
04D0:  BZ    04E4
04D2:  XORLW  03
04D4:  BZ    04F0
04D6:  XORLW  01
04D8:  BZ    04F8
04DA:  XORLW  22
04DC:  BZ    0534
04DE:  XORLW  03
04E0:  BZ    058C
04E2:  BRA    05EE
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
04E4:  CLRF   25
04E6:  MOVLW  12
04E8:  MOVWF  24
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
04EA:  MOVLW  03
04EC:  MOVWF  1A
....................             break; 
04EE:  BRA    05F2
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
04F0:  CLRF   25
04F2:  MOVLW  29
04F4:  MOVWF  24
....................             break; 
04F6:  BRA    05F2
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
04F8:  MOVLW  02
04FA:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
04FC:  CLRF   03
04FE:  MOVLB  4
0500:  MOVF   x12,W
0502:  ADDLW  1B
0504:  MOVWF  FE9
0506:  MOVLW  00
0508:  ADDWFC 03,W
050A:  MOVWF  FEA
050C:  CLRF   23
050E:  MOVFF  FEF,22
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0512:  MOVFF  23,03
0516:  MOVF   22,W
0518:  MOVFF  FF2,262
051C:  BCF    FF2.7
051E:  MOVLB  0
0520:  RCALL  01E4
0522:  MOVLB  2
0524:  BTFSC  x62.7
0526:  BSF    FF2.7
0528:  CLRF   03
052A:  MOVWF  24
052C:  MOVFF  03,25
....................             break; 
0530:  MOVLB  0
0532:  BRA    05F2
....................  
....................       //case USB_DESC_DEVICE_QUALIFIER_TYPE:   //0x06 
....................       // this is needed so host can find out about differences about this 
....................       // devices ability to handle full speed verses fast speed. 
....................       // since we don't support fast speed then we ignore this. 
....................       //      break; 
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
0534:  BCF    FD8.0
0536:  MOVLB  4
0538:  RLCF   x12,W
053A:  CLRF   03
053C:  MOVFF  FF2,262
0540:  BCF    FF2.7
0542:  MOVLB  0
0544:  RCALL  01B0
0546:  TBLRD*+
0548:  MOVFF  FF5,03
054C:  MOVLB  2
054E:  BTFSC  x62.7
0550:  BSF    FF2.7
0552:  MOVWF  22
0554:  MOVFF  03,23
....................             if (usb_getdesc_ptr!=0xFF) { 
0558:  INCFSZ 22,W
055A:  BRA    0560
055C:  MOVF   23,F
055E:  BZ    0586
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0560:  MOVFF  23,03
0564:  MOVF   22,W
0566:  MOVFF  FF2,262
056A:  BCF    FF2.7
056C:  MOVLB  0
056E:  RCALL  0164
0570:  MOVLB  2
0572:  BTFSC  x62.7
0574:  BSF    FF2.7
0576:  CLRF   03
0578:  MOVWF  24
057A:  MOVFF  03,25
....................                break; 
057E:  MOVLB  0
0580:  BRA    05F2
....................             } 
0582:  BRA    058C
0584:  MOVLB  2
....................             else { 
....................                usb_request_stall(); 
0586:  MOVLB  0
0588:  RCALL  03E0
....................                return; 
058A:  BRA    0610
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
058C:  BCF    FD8.0
058E:  MOVLB  4
0590:  RLCF   x14,W
0592:  CLRF   03
0594:  MOVFF  FF2,262
0598:  BCF    FF2.7
059A:  MOVLB  0
059C:  RCALL  0140
059E:  TBLRD*+
05A0:  MOVFF  FF5,03
05A4:  MOVLB  2
05A6:  BTFSC  x62.7
05A8:  BSF    FF2.7
05AA:  MOVWF  22
05AC:  MOVFF  03,23
....................             if (usb_getdesc_ptr !=0xFF) { 
05B0:  INCFSZ 22,W
05B2:  BRA    05B8
05B4:  MOVF   23,F
05B6:  BZ    05E8
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
05B8:  MOVLW  01
05BA:  MOVWF  1A
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
05BC:  BCF    FD8.0
05BE:  MOVLB  4
05C0:  RLCF   x14,W
05C2:  CLRF   03
05C4:  MOVFF  FF2,262
05C8:  BCF    FF2.7
05CA:  MOVLB  0
05CC:  RCALL  0152
05CE:  TBLRD*+
05D0:  MOVFF  FF5,03
05D4:  MOVLB  2
05D6:  BTFSC  x62.7
05D8:  BSF    FF2.7
05DA:  MOVWF  24
05DC:  MOVFF  03,25
....................                break; 
05E0:  MOVLB  0
05E2:  BRA    05F2
....................             } 
05E4:  BRA    05EE
05E6:  MOVLB  2
....................             else { 
....................                usb_request_stall(); 
05E8:  MOVLB  0
05EA:  RCALL  03E0
....................                return; 
05EC:  BRA    0610
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
05EE:  RCALL  03E0
....................             return; 
05F0:  BRA    0610
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
05F2:  MOVLB  4
05F4:  MOVF   x17,F
05F6:  BNZ   0608
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
05F8:  MOVF   25,F
05FA:  BNZ   0602
05FC:  MOVF   24,W
05FE:  SUBWF  x16,W
0600:  BC    0608
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
0602:  CLRF   25
0604:  MOVFF  416,24
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0608:  MOVLW  01
060A:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
060C:  MOVLB  0
060E:  RCALL  03E4
0610:  RETURN 0
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0E2E:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0E30:  CLRF   17
....................    usb_set_address(USB_address_pending); 
0E32:  MOVFF  21,262
0E36:  BRA    0E14
....................    #endif 
0E38:  GOTO   0E5A (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
03E4:  MOVLB  2
03E6:  CLRF   x62
....................    unsigned int i=0; 
....................    char c; 
....................     
....................    //debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]); 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
03E8:  MOVF   24,W
03EA:  IORWF  25,W
03EC:  BZ    0488
03EE:  MOVF   x62,W
03F0:  SUBLW  3F
03F2:  BNC   0488
....................    { 
....................       switch(USB_stack_status.getdesc_type) { 
03F4:  MOVF   1A,W
03F6:  ADDLW  FC
03F8:  BC    0464
03FA:  ADDLW  04
03FC:  MOVLB  0
03FE:  GOTO   04A0
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0402:  MOVFF  23,03
0406:  MOVF   22,W
0408:  MOVFF  FF2,264
040C:  BCF    FF2.7
040E:  RCALL  0164
0410:  MOVLB  2
0412:  BTFSC  x64.7
0414:  BSF    FF2.7
0416:  MOVWF  x63
....................             break; 
0418:  BRA    0464
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
041A:  MOVFF  23,03
041E:  MOVF   22,W
0420:  MOVFF  FF2,264
0424:  BCF    FF2.7
0426:  RCALL  0110
0428:  MOVLB  2
042A:  BTFSC  x64.7
042C:  BSF    FF2.7
042E:  MOVWF  x63
....................             break; 
0430:  BRA    0464
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
0432:  MOVFF  23,03
0436:  MOVF   22,W
0438:  MOVFF  FF2,264
043C:  BCF    FF2.7
043E:  RCALL  01E4
0440:  MOVLB  2
0442:  BTFSC  x64.7
0444:  BSF    FF2.7
0446:  MOVWF  x63
....................             break; 
0448:  BRA    0464
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
044A:  MOVFF  23,03
044E:  MOVF   22,W
0450:  MOVFF  FF2,264
0454:  BCF    FF2.7
0456:  RCALL  01C2
0458:  MOVLB  2
045A:  BTFSC  x64.7
045C:  BSF    FF2.7
045E:  MOVWF  x63
....................             //debug_usb(debug_putc, "-%X- ", c); 
....................             break; 
0460:  BRA    0464
0462:  MOVLB  2
....................       } 
....................       usb_getdesc_ptr++; 
0464:  INCF   22,F
0466:  BTFSC  FD8.2
0468:  INCF   23,F
....................       usb_getdesc_len--; 
046A:  MOVF   24,W
046C:  BTFSC  FD8.2
046E:  DECF   25,F
0470:  DECF   24,F
....................       usb_ep0_tx_buffer[i++]=c; 
0472:  MOVF   x62,W
0474:  INCF   x62,F
0476:  ADDLW  50
0478:  MOVWF  FE9
047A:  MOVLW  04
047C:  MOVWF  FEA
047E:  BTFSC  FD8.0
0480:  INCF   FEA,F
0482:  MOVFF  263,FEF
0486:  BRA    03E8
....................    } 
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
0488:  MOVF   24,W
048A:  IORWF  25,W
048C:  BNZ   0496
048E:  MOVF   x62,W
0490:  SUBLW  40
0492:  BZ    0496
....................          USB_stack_status.dev_req = NONE; 
0494:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
0496:  MOVFF  262,264
049A:  MOVLB  0
049C:  RCALL  03DA
049E:  RETURN 0
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... #include "pgm_lib.c" 
.................... /* This file contains all programmer functions */ 
.................... #include "pgm_lib.h"   
.................... #IFNDEF PGM_LIB_H 
.................... #DEFINE PGM_LIB_H 
....................  
.................... //SFR Addresses  
.................... #BYTE HLVDCON  = 0xFD2 
.................... #BYTE PIR2     = 0xFA1 
.................... #BYTE PIE2     = 0xFA0 
.................... #BYTE TRISA    = 0xF92 
.................... #BYTE ADCON1   = 0xFC1 
.................... #BYTE ADCON2   = 0xFC0 
.................... #BYTE PORTA    = 0xF80 
.................... #BYTE LATA     = 0xF89 
.................... #BYTE TRISB    = 0xF93 
.................... #BYTE LATB     = 0xF8A 
.................... #BYTE TRISC    = 0xF94 
.................... #BYTE LATC     = 0xF8B 
.................... #BYTE CCPR1L   = 0xFBE 
.................... #BYTE CCPR2L   = 0xFBB 
.................... #BYTE T0CON    = 0xFD5 
.................... #BYTE T2CON    = 0xFCA 
.................... #BYTE PR2      = 0xFCB 
.................... #BYTE CCP1CON  = 0xFBD 
.................... #BYTE CMCON    = 0xFB4 
.................... #BYTE CVRCON   = 0xFB5 
.................... #BYTE INTCON   = 0xFF2 
.................... #BYTE INTCON2  = 0xFF1 
.................... #BYTE PORTB    = 0xF81 
.................... #BYTE PCL      = 0xFF9 
.................... #BYTE PCLATH   = 0xFFA 
.................... //#BYTE WREG     = 0xFE8 
.................... #BYTE STATUS   = 0xFD8 
.................... #BYTE PIE1     = 0xF9D 
.................... #BYTE PIR1     = 0xF9E 
.................... #BYTE T1CON    = 0xFCD 
.................... #BYTE ADCON0   = 0xFC2 
.................... #BYTE TMR1H    = 0xFCF 
.................... #BYTE TMR1L    = 0xFCE 
.................... #BYTE ADRESH   = 0xFC4 
.................... #BYTE ADRESL   = 0xFC3 
.................... #BYTE TMR0H    = 0xFD7 
.................... #BYTE TMR0L    = 0xFD6 
.................... #BYTE CCP2CON  = 0xFBA 
....................  
....................  
.................... //STATUS Reg Bits // 
.................... #BIT C      = STATUS.0 
.................... #BIT DC     = STATUS.1 
.................... #BIT Z      = STATUS.2 
.................... #BIT OV     = STATUS.3 
.................... #BIT N      = STATUS.4 
....................  
....................  
.................... //  PORT A  // 
.................... #BIT tris_ICSPDAT   =  TRISA.2 
.................... #BIT ICSPDAT_in     =  PORTA.2 
.................... #BIT ICSPDAT_out    =  LATA.2 
.................... #BIT tris_ICSPCLK   =  TRISA.3    
.................... #BIT ICSPCLK_in     =  PORTA.3 
.................... #BIT ICSPCLK_out    =  LATA.3 
.................... #BIT tris_AUX       =  TRISA.4     
.................... //#define AUX_in              PORTA, 4, 1 
.................... #BIT AUX            =  LATA.4 
....................  
.................... #BIT tris_MCLR_TGT  =  TRISA.5    
.................... #BIT MCLR_TGT       =  LATA.5 
.................... //#define MCLR_TGT_pin        PORTA, 5    
....................  
.................... //  PORT B  // 
.................... #BIT tris_Vpp_ON      =   TRISB.2 
.................... #BIT Vpp_ON           =   LATB.2 
.................... #define Vpp_ON_pin    PORTB, 2  
....................  
.................... #BIT tris_Vdd_TGT_N =  TRISB.3    // RB3 Output 
.................... #BIT Vdd_TGT_N      =  LATB.3 
.................... //#define Vdd_TGT_N_pin      PORTB, 3  
....................  
.................... #BIT tris_Vdd_TGT_P =  TRISB.4  // RB4 Output 
.................... #BIT Vdd_TGT_P      =  LATB.4 
.................... #define Vdd_TGT_P_pin      PORTB, 4 
....................  
.................... #BIT tris_PROG_SWITCH =   TRISB.5    
.................... #BIT PROG_SWITCH_pin  =   PORTB.5 
....................  
.................... //  PORT C  // 
.................... #BIT tris_BUSY_LED    =   TRISC.0 
.................... #BIT BUSY_LED         =   LATC.0 
.................... #BIT tris_Vpp_PUMP    =   TRISC.1    
.................... #BIT Vpp_PUMP         =   LATC.1 
.................... #BIT tris_Vdd_TGT_ADJ =   TRISC.2 
.................... #BIT Vdd_TGT_ADJ      =   LATC.2 
.................... #BIT tris_WP          =  TRISC.6 
.................... #BIT WP               =  LATC.6 
....................  
....................  
.................... #BIT HLVDIF = PIR2.2 
.................... #BIT HLVDIE = PIE2.2 
.................... #BIT TRISA0 = TRISA.0 
.................... #BIT TRISA1 = TRISA.1 
....................  
.................... #BIT RBPU   = INTCON2.7 
....................  
.................... #BIT TMR0IF = INTCON.2 
.................... #BIT INT0IE = INTCON.4 
.................... #BIT TMR0IE = INTCON.5 
.................... #BIT PEIE   = INTCON.6 
.................... #BIT GIE    = INTCON.7 
....................  
....................  
.................... #BIT TMR0ON = T0CON.7 
....................  
....................  
.................... //PIE1 Bits 
.................... #BIT TMR1IE = PIE1.0 
.................... #BIT TMR2IE = PIE1.1 
.................... #BIT CCP1IE = PIE1.2 
.................... #BIT SSPIE  = PIE1.3 
.................... #BIT TXIE   = PIE1.4 
.................... #BIT RCIE   = PIE1.5 
.................... #BIT ADIE   = PIE1.6 
.................... #BIT SPPIE  = PIE1.7 
....................  
.................... //PIR1 Bits 
.................... #BIT TMR1IF = PIR1.0 
.................... #BIT TMR2IF = PIR1.1 
.................... #BIT CCP1IF = PIR1.2 
.................... #BIT SSPIF  = PIR1.3 
.................... #BIT TXIF   = PIR1.4 
.................... #BIT RCIF   = PIR1.5 
.................... #BIT ADIF   = PIR1.6 
.................... #BIT SPPIF  = PIR1.7 
....................  
.................... //T1CON Bits 
.................... #BIT TMR1ON = T1CON.0 
.................... #BIT TMR1CS = T1CON.1 
.................... #BIT T1SYNC = T1CON.2 
.................... #BIT T1OSCEN= T1CON.3 
.................... #BIT T1CKPS0= T1CON.4 
.................... #BIT T1CKPS1= T1CON.5 
.................... #BIT T1RUN  = T1CON.6 
.................... #BIT RD16   = T1CON.7 
....................  
.................... //ADCON0 Bits 
.................... #BIT GO     = ADCON0.1 
....................  
....................  
.................... //DEFINITIONS  
.................... #define PWM_150kHz  79   
....................  
.................... // PWM duty cycle for (CCPR1L register value) 
.................... #define Vdd_5V0     (192/4)         //  5.0V Vdd 
.................... #define Vdd_3V3     (116/4)         //  3.3V Vdd 
.................... #define Vdd_2V5     ( 88/4)         //  2.5V Vdd 
.................... #define Vdd_1V8     ( 64/4)         //  1.8V Vdd 
....................  
....................  
.................... //Prototypes 
.................... void get_version_number (void); 
.................... void cal_and_set_ccp (unsigned int8 ccph, unsigned int8 ccpl); 
.................... unsigned int8 cal_threshold_byte(unsigned int8 voltageVal); 
.................... void send_voltages (void); 
.................... void adc_vpp_vdd_control (int1 state); 
.................... void get_adc (unsigned int8 channel); 
.................... unsigned int16 cal_adc_word(unsigned int16 Val); 
.................... void execute_script(unsigned int8 scrpt_len, unsigned int8 *script_location); 
.................... unsigned int8 read_n_bits_24(unsigned int8 numberOfBits); 
.................... void write_upload_buff(unsigned int8 wr_byte); 
.................... void shift_bits_out_ICSP (unsigned int8 char_to_be_shifted, unsigned int8 number_of_bits); 
.................... //void downloadScriptArgs (void); 
.................... unsigned int8 getICSP_States(void); 
.................... unsigned int8 pop_down_buff (void); 
.................... void delay_short (unsigned int8 duration); 
.................... void delay_long (unsigned int8 duration); 
.................... unsigned int8 shift_bits_in (unsigned int8 number_of_bits); 
.................... void shift_bits_out (unsigned int8 outb, unsigned int8 number_of_bits); 
.................... void set_icsp_pins(int8 state);  
.................... void write_down_buff(void); 
.................... void send_data_usb(void); 
.................... #ENDIF 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <stdlibm.h> //necessary for malloc  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
.................... { 
....................    node_t *result; 
....................    result =ptr; 
*
1732:  MOVFF  255,257
1736:  MOVFF  254,256
....................    result->size=size; 
173A:  MOVLB  2
173C:  MOVFF  256,FE9
1740:  MOVFF  257,FEA
1744:  MOVFF  253,FEC
1748:  MOVF   FED,F
174A:  MOVFF  252,FEF
....................    result->next = NULL; 
174E:  MOVLW  02
1750:  ADDWF  x56,W
1752:  MOVWF  FE9
1754:  MOVLW  00
1756:  ADDWFC x57,W
1758:  MOVWF  FEA
175A:  CLRF   FEC
175C:  MOVF   FED,F
175E:  CLRF   FEF
....................    return result; 
1760:  MOVFF  256,01
1764:  MOVFF  257,02
1768:  MOVLB  0
176A:  GOTO   18BE (RETURN)
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
.................... { 
....................    node->size=size; 
*
17F4:  MOVLB  2
17F6:  MOVFF  253,FE9
17FA:  MOVFF  254,FEA
17FE:  MOVFF  256,FEC
1802:  MOVF   FED,F
1804:  MOVFF  255,FEF
1808:  MOVLB  0
180A:  RETURN 0
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
.................... { 
....................     if (place->next==NULL) 
*
176E:  MOVLW  02
1770:  MOVLB  2
1772:  ADDWF  x4E,W
1774:  MOVWF  FE9
1776:  MOVLW  00
1778:  ADDWFC x4F,W
177A:  MOVWF  FEA
177C:  MOVFF  FEC,253
1780:  MOVF   FED,F
1782:  MOVFF  FEF,252
1786:  MOVF   x52,F
1788:  BNZ   17A2
178A:  MOVF   x53,F
178C:  BNZ   17A2
....................        node->next= NULL; 
178E:  MOVLW  02
1790:  ADDWF  x50,W
1792:  MOVWF  FE9
1794:  MOVLW  00
1796:  ADDWFC x51,W
1798:  MOVWF  FEA
179A:  CLRF   FEC
179C:  MOVF   FED,F
179E:  CLRF   FEF
17A0:  BRA    17D8
....................     else 
....................        node->next=place->next; 
17A2:  MOVLW  02
17A4:  ADDWF  x50,W
17A6:  MOVWF  01
17A8:  MOVLW  00
17AA:  ADDWFC x51,W
17AC:  MOVWF  03
17AE:  MOVWF  x53
17B0:  MOVLW  02
17B2:  ADDWF  x4E,W
17B4:  MOVWF  FE9
17B6:  MOVLW  00
17B8:  ADDWFC x4F,W
17BA:  MOVWF  FEA
17BC:  MOVFF  FEC,03
17C0:  MOVF   FED,F
17C2:  MOVFF  FEF,254
17C6:  MOVFF  253,FEA
17CA:  MOVFF  01,FE9
17CE:  MOVFF  03,FEC
17D2:  MOVF   FED,F
17D4:  MOVFF  254,FEF
....................     place->next=node; 
17D8:  MOVLW  02
17DA:  ADDWF  x4E,W
17DC:  MOVWF  FE9
17DE:  MOVLW  00
17E0:  ADDWFC x4F,W
17E2:  MOVWF  FEA
17E4:  MOVFF  251,FEC
17E8:  MOVF   FED,F
17EA:  MOVFF  250,FEF
17EE:  MOVLB  0
17F0:  GOTO   18D8 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
*
217E:  MOVFF  28,256
2182:  MOVFF  27,255
2186:  MOVLW  02
2188:  MOVLB  2
218A:  ADDWF  x55,W
218C:  MOVWF  FE9
218E:  MOVLW  00
2190:  ADDWFC x56,W
2192:  MOVWF  FEA
2194:  MOVFF  FEC,258
2198:  MOVF   FED,F
219A:  MOVFF  FEF,257
219E:  MOVF   x53,W
21A0:  SUBWF  x57,W
21A2:  BNZ   21AA
21A4:  MOVF   x54,W
21A6:  SUBWF  x58,W
21A8:  BZ    21C6
21AA:  MOVLW  02
21AC:  ADDWF  x55,W
21AE:  MOVWF  FE9
21B0:  MOVLW  00
21B2:  ADDWFC x56,W
21B4:  MOVWF  FEA
21B6:  MOVFF  FEC,256
21BA:  MOVF   FED,F
21BC:  MOVFF  FEF,255
21C0:  MOVLB  0
21C2:  BRA    2186
21C4:  MOVLB  2
....................    ptr->next=node->next; 
21C6:  MOVLW  02
21C8:  ADDWF  x55,W
21CA:  MOVWF  01
21CC:  MOVLW  00
21CE:  ADDWFC x56,W
21D0:  MOVWF  03
21D2:  MOVWF  x58
21D4:  MOVLW  02
21D6:  ADDWF  x53,W
21D8:  MOVWF  FE9
21DA:  MOVLW  00
21DC:  ADDWFC x54,W
21DE:  MOVWF  FEA
21E0:  MOVFF  FEC,03
21E4:  MOVF   FED,F
21E6:  MOVFF  FEF,259
21EA:  MOVFF  258,FEA
21EE:  MOVFF  01,FE9
21F2:  MOVFF  03,FEC
21F6:  MOVF   FED,F
21F8:  MOVFF  259,FEF
....................    node=NULL; 
21FC:  CLRF   x54
21FE:  CLRF   x53
2200:  MOVLB  0
2202:  GOTO   22C4 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
2206:  MOVFF  28,24C
220A:  MOVFF  27,24B
....................    while(node!=NULL) 
220E:  MOVLB  2
2210:  MOVF   x4B,F
2212:  BNZ   221A
2214:  MOVF   x4C,F
2216:  BTFSC  FD8.2
2218:  BRA    2314
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
221A:  MOVFF  24B,FE9
221E:  MOVFF  24C,FEA
2222:  MOVFF  FEC,254
2226:  MOVF   FED,F
2228:  MOVFF  FEF,253
222C:  BTFSC  x54.7
222E:  BRA    22F8
....................       { 
....................          nsize=node->size; 
2230:  MOVFF  24B,FE9
2234:  MOVFF  24C,FEA
2238:  MOVFF  FEC,250
223C:  MOVF   FED,F
223E:  MOVFF  FEF,24F
....................          temp=(unsigned int16)node->next; 
2242:  MOVLW  02
2244:  ADDWF  x4B,W
2246:  MOVWF  FE9
2248:  MOVLW  00
224A:  ADDWFC x4C,W
224C:  MOVWF  FEA
224E:  MOVFF  FEC,24E
2252:  MOVF   FED,F
2254:  MOVFF  FEF,24D
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
2258:  MOVFF  24D,FE9
225C:  MOVFF  24E,FEA
2260:  MOVFF  FEC,254
2264:  MOVF   FED,F
2266:  MOVFF  FEF,253
226A:  BTFSC  x54.7
226C:  BRA    22DC
226E:  MOVF   x4F,W
2270:  ADDWF  x4B,W
2272:  MOVWF  x55
2274:  MOVF   x50,W
2276:  ADDWFC x4C,W
2278:  MOVWF  x56
227A:  MOVLW  04
227C:  ADDWF  x55,W
227E:  MOVWF  01
2280:  MOVLW  00
2282:  ADDWFC x56,W
2284:  MOVWF  03
2286:  MOVF   01,W
2288:  SUBWF  x4D,W
228A:  BNZ   22DC
228C:  MOVF   03,W
228E:  SUBWF  x4E,W
2290:  BNZ   22DC
....................          { 
....................             nextsize=temp->size; 
2292:  MOVFF  24D,FE9
2296:  MOVFF  24E,FEA
229A:  MOVFF  FEC,252
229E:  MOVF   FED,F
22A0:  MOVFF  FEF,251
....................             nsize+=nextsize+sizeof(node_t); 
22A4:  MOVLW  04
22A6:  ADDWF  x51,W
22A8:  MOVWF  01
22AA:  MOVLW  00
22AC:  ADDWFC x52,W
22AE:  MOVWF  03
22B0:  MOVF   01,W
22B2:  ADDWF  x4F,F
22B4:  MOVF   03,W
22B6:  ADDWFC x50,F
....................             remove_node(temp); 
22B8:  MOVFF  24E,254
22BC:  MOVFF  24D,253
22C0:  MOVLB  0
22C2:  BRA    217E
....................             update_node(node,nsize); 
22C4:  MOVFF  24C,254
22C8:  MOVFF  24B,253
22CC:  MOVFF  250,256
22D0:  MOVFF  24F,255
22D4:  CALL   17F4
....................          } 
22D8:  BRA    22F4
22DA:  MOVLB  2
....................          else 
....................          node=node->next; 
22DC:  MOVLW  02
22DE:  ADDWF  x4B,W
22E0:  MOVWF  FE9
22E2:  MOVLW  00
22E4:  ADDWFC x4C,W
22E6:  MOVWF  FEA
22E8:  MOVFF  FEC,24C
22EC:  MOVF   FED,F
22EE:  MOVFF  FEF,24B
22F2:  MOVLB  0
....................       } 
22F4:  BRA    2310
22F6:  MOVLB  2
....................       else 
....................       node=node->next; 
22F8:  MOVLW  02
22FA:  ADDWF  x4B,W
22FC:  MOVWF  FE9
22FE:  MOVLW  00
2300:  ADDWFC x4C,W
2302:  MOVWF  FEA
2304:  MOVFF  FEC,24C
2308:  MOVF   FED,F
230A:  MOVFF  FEF,24B
230E:  MOVLB  0
2310:  BRA    220E
2312:  MOVLB  2
....................    } 
2314:  MOVLB  0
2316:  GOTO   2390 (RETURN)
.................... } 
....................  
.................... char *malloc(size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
....................       size++; 
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
*
180C:  MOVFF  28,249
1810:  MOVFF  27,248
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
1814:  MOVLB  2
1816:  MOVF   x48,F
1818:  BNZ   1820
181A:  MOVF   x49,F
181C:  BTFSC  FD8.2
181E:  BRA    1932
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
1820:  MOVFF  248,FE9
1824:  MOVFF  249,FEA
1828:  MOVFF  FEC,24F
182C:  MOVF   FED,F
182E:  MOVFF  FEF,24E
1832:  BTFSC  x4F.7
1834:  BRA    191A
1836:  MOVFF  248,FE9
183A:  MOVFF  249,FEA
183E:  MOVFF  FEC,251
1842:  MOVF   FED,F
1844:  MOVFF  FEF,250
1848:  MOVF   x47,W
184A:  SUBWF  x51,W
184C:  BNC   191A
184E:  BNZ   1856
1850:  MOVF   x46,W
1852:  SUBWF  x50,W
1854:  BNC   191A
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
1856:  MOVFF  248,FE9
185A:  MOVFF  249,FEA
185E:  MOVFF  FEC,24D
1862:  MOVF   FED,F
1864:  MOVFF  FEF,24C
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
1868:  MOVLW  04
186A:  ADDWF  x46,W
186C:  MOVWF  01
186E:  MOVLW  00
1870:  ADDWFC x47,W
1872:  MOVWF  03
1874:  MOVF   03,W
1876:  SUBWF  x4D,W
1878:  BNC   18FA
187A:  BNZ   1882
187C:  MOVF   x4C,W
187E:  SUBWF  01,W
1880:  BC    18FA
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
1882:  MOVF   x46,W
1884:  SUBWF  x4C,W
1886:  MOVWF  x4E
1888:  MOVF   x47,W
188A:  SUBWFB x4D,W
188C:  MOVWF  x4F
188E:  MOVLW  04
1890:  SUBWF  x4E,F
1892:  MOVLW  00
1894:  SUBWFB x4F,F
1896:  MOVLW  04
1898:  ADDWF  x48,W
189A:  MOVWF  x50
189C:  MOVLW  00
189E:  ADDWFC x49,W
18A0:  MOVWF  x51
18A2:  MOVF   x46,W
18A4:  ADDWF  x50,F
18A6:  MOVF   x47,W
18A8:  ADDWFC x51,F
18AA:  MOVFF  24F,253
18AE:  MOVFF  24E,252
18B2:  MOVFF  251,255
18B6:  MOVFF  250,254
18BA:  MOVLB  0
18BC:  BRA    1732
18BE:  MOVFF  02,24B
18C2:  MOVFF  01,24A
....................             insert_node_after(node,new); 
18C6:  MOVFF  249,24F
18CA:  MOVFF  248,24E
18CE:  MOVFF  24B,251
18D2:  MOVFF  24A,250
18D6:  BRA    176E
....................             update_node(node,size+_MEMMGMT_CSIZE); 
18D8:  MOVLB  2
18DA:  MOVFF  246,24E
18DE:  MOVLW  80
18E0:  ADDWF  x47,W
18E2:  MOVWF  x4F
18E4:  MOVFF  249,254
18E8:  MOVFF  248,253
18EC:  MOVWF  x56
18EE:  MOVFF  246,255
18F2:  MOVLB  0
18F4:  RCALL  17F4
....................          } 
18F6:  BRA    1916
18F8:  MOVLB  2
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
18FA:  MOVFF  24C,24E
18FE:  MOVLW  80
1900:  ADDWF  x4D,W
1902:  MOVWF  x4F
1904:  MOVFF  249,254
1908:  MOVFF  248,253
190C:  MOVWF  x56
190E:  MOVFF  24C,255
1912:  MOVLB  0
1914:  RCALL  17F4
....................          //end if 
....................          break; 
1916:  MOVLB  2
1918:  BRA    1932
....................       }//end if 
....................       node=node->next; 
191A:  MOVLW  02
191C:  ADDWF  x48,W
191E:  MOVWF  FE9
1920:  MOVLW  00
1922:  ADDWFC x49,W
1924:  MOVWF  FEA
1926:  MOVFF  FEC,249
192A:  MOVF   FED,F
192C:  MOVFF  FEF,248
1930:  BRA    1816
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
1932:  MOVF   x48,F
1934:  BNZ   1944
1936:  MOVF   x49,F
1938:  BNZ   1944
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
193A:  MOVLW  00
193C:  MOVWF  01
193E:  MOVWF  02
1940:  BRA    1952
....................    } 
1942:  BRA    1952
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
1944:  MOVLW  04
1946:  ADDWF  x48,W
1948:  MOVWF  01
194A:  MOVLW  00
194C:  ADDWFC x49,W
194E:  MOVWF  03
1950:  MOVWF  02
1952:  MOVLB  0
1954:  RETURN 0
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
*
231A:  MOVLB  2
231C:  MOVF   x45,F
231E:  BNZ   2328
2320:  MOVF   x46,F
2322:  BNZ   2328
....................       return; 
2324:  BRA    2392
2326:  BRA    238C
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
2328:  MOVLW  04
232A:  SUBWF  x45,W
232C:  MOVWF  x47
232E:  MOVLW  00
2330:  SUBWFB x46,W
2332:  MOVWF  x48
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
2334:  MOVFF  247,FE9
2338:  MOVFF  248,FEA
233C:  MOVFF  FEC,24C
2340:  MOVF   FED,F
2342:  MOVFF  FEF,24B
2346:  BTFSS  x4C.7
2348:  BRA    2386
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
234A:  MOVFF  247,FE9
234E:  MOVFF  248,FEA
2352:  MOVFF  FEC,24C
2356:  MOVF   FED,F
2358:  MOVFF  FEF,24B
235C:  MOVLW  00
235E:  SUBWF  x4B,W
2360:  MOVWF  x49
2362:  MOVLW  80
2364:  SUBWFB x4C,W
2366:  MOVWF  x4A
....................          update_node(node,nsize); 
2368:  MOVFF  248,254
236C:  MOVFF  247,253
2370:  MOVFF  24A,256
2374:  MOVFF  249,255
2378:  MOVLB  0
237A:  CALL   17F4
....................          ptr=NULL; 
237E:  MOVLB  2
2380:  CLRF   x46
2382:  CLRF   x45
....................  
....................       } 
2384:  BRA    238C
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
2386:  CLRF   x46
2388:  CLRF   x45
....................          return; 
238A:  BRA    2392
....................       } 
....................    } 
....................    traverse(); 
238C:  MOVLB  0
238E:  BRA    2206
2390:  MOVLB  2
2392:  MOVLB  0
2394:  RETURN 0
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
....................  
.................... volatile unsigned int8 data_in[64];  //USB packet is copied here when received  
.................... unsigned int8 i;     //used to iterate through data_in in Process_Input() 
....................  
.................... unsigned int8 data_out[64]; //Data is read from here by USB 
....................  
.................... //unsigned int8 icsp_rate; //period in multiples of 1uS  
.................... unsigned int8 icsp_pins_states;  
....................  
.................... unsigned int8 DATA_Out_Buffer[128]; //Data is stored here by scripts and will be copied to data_out to be read by USB 
.................... struct  
.................... { 
....................    unsigned int8 rd_idx; 
....................    unsigned int8 wr_idx; 
....................    unsigned int8 nbr_bytes; //number of bytes in DATA_On_Buffer 
.................... } DOB_mngnt;   //DATA_Out_Buffer Management 
....................  
.................... unsigned int8 DATA_In_Buffer[256]; 
.................... struct  
.................... { 
....................    unsigned int8 rd_idx; 
....................    unsigned int8 wr_idx; 
....................    unsigned int8 nbr_bytes; //number of bytes in DATA_In_Buffer 
.................... } DIB_mngnt;   //DATA_In_Buffer Management  
....................  
.................... //unsigned int8 scrpt_args[20]; 
.................... //unsigned int8  scrpt_rd_idx = 0; //scrpt_args_num_bytes = 0, 
....................  
.................... struct { 
....................    unsigned int8   VddThreshold;   // error detect threshold 
....................    unsigned int8   VppThreshold;   // error detect threshold 
....................     unsigned int8   VddErrCount; 
....................     unsigned int8   VppErrCount; 
....................     unsigned int16    BlinkClount;    // counter for blinking Busy on VDD/VPP error 
.................... } VddVppLevels; 
....................  
.................... struct { 
....................    unsigned int8 CCPRSetPoint; 
....................    unsigned int8 UppperLimit; 
....................    unsigned int8 LowerLimit;    
.................... } Vpp_PWM; 
....................  
.................... struct { 
....................     unsigned int16    adc_calfactor;      // CalibratedResult = (ADRES * adc_calfactor) >> 8 
....................     signed int8       vdd_offset; 
....................     unsigned int8   vdd_calfactor;      // Calibrated CCP value = (((CCP >> 6) + vdd_offset) * vdd_calfactor) >> 7 
.................... } VoltageCalibration;  
....................  
....................  
.................... void pgm_init() 
.................... { 
....................    // Configure HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER, See datasheet page 281 
....................    HLVDCON = 0x13; 
*
107A:  MOVLW  13
107C:  MOVWF  FD2
....................     
....................    // Clear High/Low-Voltage Detect Interrupt Flag bit, Datasheet page 105 
....................    HLVDIF  = 0; 
107E:  BCF    FA1.2
....................     
....................    // Enable High/Low-Voltage Detect Interrupt, datasheet page 107 
....................    HLVDIE = 0; 
1080:  BCF    FA0.2
....................     
....................    // Set pin A0 as input, datasheet page 113 
....................    TRISA0 = 1; 
1082:  BSF    F92.0
....................     
....................    // Set pin A1 as input 
....................    TRISA1 = 1; 
1084:  BSF    F92.1
....................     
....................    // Only AN0 and AN1 analog inputs, DS page 262 
....................    ADCON1 = 0b00001101;  
1086:  MOVLW  0D
1088:  MOVWF  FC1
....................     
....................    // A/D Conversion Clock Select bits, clock derived from A/D RC oscillator, DS page 263 
....................    ADCON2 = 0x03; 
108A:  MOVLW  03
108C:  MOVWF  FC0
....................     
....................    // Pin A2 set as input and initialized to 0 
....................    tris_ICSPDAT = 1; 
108E:  BSF    F92.2
....................    ICSPDAT_in = 0; 
1090:  BCF    F80.2
....................    ICSPDAT_out = 0; 
1092:  BCF    F89.2
....................     
....................    // Pin A3 set as input and initialized to 0 
....................    tris_ICSPCLK = 1; 
1094:  BSF    F92.3
....................    ICSPCLK_in = 0; 
1096:  BCF    F80.3
....................    ICSPCLK_out = 0; 
1098:  BCF    F89.3
....................     
....................    // Pin A4 set as input and initialized to 0 
....................    tris_AUX = 1; 
109A:  BSF    F92.4
....................    AUX = 0; 
109C:  BCF    F89.4
....................     
....................    // Pin A5 Set as output and initialized to 0 
....................    MCLR_TGT = 0; 
109E:  BCF    F89.5
....................    tris_MCLR_TGT = 0; 
10A0:  BCF    F92.5
....................     
....................    // Initialize half-bridge N-gate off 
....................    Vdd_TGT_N = 0; 
10A2:  BCF    F8A.3
....................    tris_Vdd_TGT_N =0; 
10A4:  BCF    F93.3
....................     
....................    // Initialize half-bridge P-gate off 
....................    Vdd_TGT_P = 1; 
10A6:  BSF    F8A.4
....................    tris_Vdd_TGT_P = 0; 
10A8:  BCF    F93.4
....................     
....................    // Pin B5 set as input, initialize to 1 
....................    tris_PROG_SWITCH = 1; 
10AA:  BSF    F93.5
....................    PROG_SWITCH_pin = 1; 
10AC:  BSF    F81.5
....................     
....................    // PORTB pull-ups are enabled by individual port latch value, DS page 102 
....................    RBPU = 0; 
10AE:  BCF    FF1.7
....................     
....................    // Initialize Vpp to off, set pin B2 set as output 
....................    Vpp_ON = 0; 
10B0:  BCF    F8A.2
....................    tris_Vpp_ON = 0; 
10B2:  BCF    F93.2
....................     
....................    // Initialize BUSY_LED pin to 0, and set it as output 
....................    BUSY_LED = 0; 
10B4:  BCF    F8B.0
....................    tris_BUSY_LED = 0; 
10B6:  BCF    F94.0
....................     
....................    // Initialize C1 (CCP2) to 0 and set it as output  
....................    Vpp_PUMP = 0; 
10B8:  BCF    F8B.1
....................    tris_Vpp_PUMP = 0; 
10BA:  BCF    F94.1
....................     
....................    // Initialize C2 (CCP1) to 0 and set it as output  
....................    Vdd_TGT_ADJ = 0; 
10BC:  BCF    F8B.2
....................    tris_Vdd_TGT_ADJ = 0; 
10BE:  BCF    F94.2
....................     
....................    // Timer0 off, 16-bit timer, internal clock, prescaler not assigned 
....................    T0CON = 0x08; 
10C0:  MOVLW  08
10C2:  MOVWF  FD5
....................     
....................    //Timer1 is used by VddVpp voltage monitoring interrupt or UART RX. 
....................     
....................    // Configure Timer2 (used by CCP1 and CCP2) 
....................    // 1:1 Postscale, 1:1 Prescale, Timer2 on 
....................    T2CON = 0x04; 
10C4:  MOVLW  04
10C6:  MOVWF  FCA
....................     
....................    // Set PWM freq to 150kHz 
....................    PR2 = PWM_150kHz; 
10C8:  MOVLW  4F
10CA:  MOVWF  FCB
....................     
....................    // Select PWM mode, datasheet page 151 
....................    CCP1CON = 0x0C; 
10CC:  MOVLW  0C
10CE:  MOVWF  FBD
....................     
....................    // Set VDD Duty cycle 
....................    CCPR1L = Vdd_3V3; 
10D0:  MOVLW  1D
10D2:  MOVWF  FBE
....................     
....................    // Initialize CCP2 for VPP  
....................    Vpp_PWM.CCPRSetPoint = 64; 
10D4:  MOVLW  40
10D6:  MOVLB  2
10D8:  MOVWF  x37
....................    Vpp_PWM.UppperLimit = 62;   
10DA:  MOVLW  3E
10DC:  MOVWF  x38
....................    Vpp_PWM.LowerLimit = 60; 
10DE:  MOVLW  3C
10E0:  MOVWF  x39
....................    VddVppLevels.VddThreshold = 126;    
10E2:  MOVLW  7E
10E4:  MOVWF  x31
....................    VddVppLevels.VppThreshold = 45; 
10E6:  MOVLW  2D
10E8:  MOVWF  x32
....................     
....................    // Comparators off, DS page 271 
....................    CMCON = 0x07; 
10EA:  MOVLW  07
10EC:  MOVWF  FB4
....................     
....................    // Voltage Reference off, DS page 277 
....................    CVRCON = 0; 
10EE:  CLRF   FB5
....................     
....................    // Set up Interrupts 
....................    // Enable Peripheral Interrupt Enable 
....................    PEIE = 1; 
10F0:  BSF    FF2.6
....................     
....................    // Enable global interrupts 
....................    GIE = 1; 
10F2:  BSF    FF2.7
....................     
....................    // Start VDD and VPP voltage monitoring 
....................    adc_vpp_vdd_control (1); 
10F4:  MOVLW  01
10F6:  MOVWF  x47
10F8:  MOVLB  0
10FA:  RCALL  1040
....................     
....................    // Initialize buffers 
....................    DOB_mngnt.nbr_bytes = 0;  
10FC:  MOVLB  1
10FE:  CLRF   x2D
....................    DOB_mngnt.wr_idx    = 0; 
1100:  CLRF   x2C
....................    DOB_mngnt.rd_idx    = 0; 
1102:  CLRF   x2B
....................    DIB_mngnt.nbr_bytes = 0;  
1104:  MOVLB  2
1106:  CLRF   x30
....................    DIB_mngnt.wr_idx    = 0; 
1108:  CLRF   x2F
....................    DIB_mngnt.rd_idx    = 0; 
110A:  CLRF   x2E
....................     
....................    // Set default values for ADC voltage calibration 
....................    VoltageCalibration.adc_calfactor = 0x0100;   
110C:  MOVLW  01
110E:  MOVWF  x3B
1110:  CLRF   x3A
....................    VoltageCalibration.vdd_offset = 0x00; 
1112:  CLRF   x3C
....................    VoltageCalibration.vdd_calfactor = 0x80; 
1114:  MOVLW  80
1116:  MOVWF  x3D
1118:  MOVLB  0
111A:  GOTO   28B6 (RETURN)
.................... } 
....................  
.................... void Process_Input () 
.................... {   
....................    BUSY_LED = 1; 
*
2482:  BSF    F8B.0
....................    i = 1;   // Initialize index 
2484:  MOVLW  01
2486:  MOVWF  x69
....................    usb_get_packet(1, data_in, 64); 
2488:  MOVLB  2
248A:  MOVWF  x45
248C:  CLRF   x47
248E:  MOVLW  29
2490:  MOVWF  x46
2492:  CLRF   x49
2494:  MOVLW  40
2496:  MOVWF  x48
2498:  MOVLB  0
249A:  GOTO   130A
....................    //usb_flush_out(1, USB_DTS_TOGGLE); 
....................    unsigned int8 packet_length = data_in[0]; 
....................    unsigned int8 offset; 
....................    unsigned int8 *script_buffer; 
....................    unsigned int16 address; 
249E:  MOVFF  29,23E
....................     
....................    while (i <= packet_length) 
24A2:  MOVF   x69,W
24A4:  MOVLB  2
24A6:  SUBWF  x3E,W
24A8:  BTFSS  FD8.0
24AA:  BRA    2864
....................    { 
....................       offset = data_in[i]; 
24AC:  CLRF   03
24AE:  MOVLB  0
24B0:  MOVF   x69,W
24B2:  ADDLW  29
24B4:  MOVWF  FE9
24B6:  MOVLW  00
24B8:  ADDWFC 03,W
24BA:  MOVWF  FEA
24BC:  MOVFF  FEF,23F
....................       if (offset < 0x01) break; //unknown instruction 
24C0:  MOVLB  2
24C2:  MOVF   x3F,F
24C4:  BTFSC  FD8.2
24C6:  BRA    2864
....................        
....................       offset -= 0x01; 
24C8:  MOVLW  01
24CA:  SUBWF  x3F,F
....................       offset *= 2; 
24CC:  BCF    FD8.0
24CE:  RLCF   x3F,F
....................       offset += 8; 
24D0:  MOVLW  08
24D2:  ADDWF  x3F,F
....................        
....................       #ASM 
....................          MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU  
24D4:  MOVF   FF9,W
....................          ADDWF    offset, W 
24D6:  ADDWF  x3F,W
....................          BTFSC    C 
24D8:  BTFSC  FD8.0
....................          INCF     PCLATH 
24DA:  INCF   FFA,F
....................          MOVWF    PCL 
24DC:  MOVWF  FF9
....................          BRA      GET_VERSION_LBL  
24DE:  BRA    24F6
....................          BRA      TOGGLE_LED_LBL 
24E0:  BRA    2500
....................          BRA      SET_VDD_LBL 
24E2:  BRA    2512
....................          BRA      SET_VPP_LBL 
24E4:  BRA    2570
....................          BRA      READ_VOLTAGES_LBL 
24E6:  BRA    25DA
....................          BRA      RUN_ROM_SCRIPT_LBL 
24E8:  BRA    25E6
....................          //BRA      downloadScrptArgsLbl 
....................          BRA      CLEAR_DOWN_BUFF_LBL 
24EA:  BRA    26CC
....................          BRA      WRITE_DOWN_BUFF_LBL 
24EC:  BRA    26DA
....................          BRA      CLEAR_UP_BUFF_LBL 
24EE:  BRA    26E6
....................          BRA      UPLOAD_LBL 
24F0:  BRA    26F6
....................          BRA      RUN_USB_SCRIPT_LBL 
24F2:  BRA    2700
....................          BRA      RUN_ROM_SCRIIPT_ITR_LBL 
24F4:  BRA    2758
....................       #ENDASM  
....................        
.................... GET_VERSION_LBL: 
....................       get_version_number(); 
24F6:  MOVLB  0
24F8:  GOTO   1414
....................       break; 
24FC:  MOVLB  2
24FE:  BRA    2864
....................        
.................... TOGGLE_LED_LBL: 
....................       BUSY_LED ^= 1; 
2500:  CLRF   00
2502:  BTFSC  F8B.0
2504:  INCF   00,F
2506:  MOVLW  01
2508:  XORWF  00,F
250A:  BCF    F8B.0
250C:  BTFSC  00.0
250E:  BSF    F8B.0
....................       break; 
2510:  BRA    2864
....................        
.................... SET_VDD_LBL: 
....................       /* 
....................        * data_in[i+1] = CCPL 
....................        * data_in[i+2] = CCPH 
....................        * data_in[i+3] = VDDLim 
....................       */ 
....................       // CCPH:CCPL = ((Vdd * 32) + 10.5) << 6, << 6 because CCP1 (holds the duty cycle, resolution is 10 bits) and is left justified, the 2 LSB bits are located in CCP1CON. 
....................       // Duty_cycle = vdd * 32+ 10.5 
....................       cal_and_set_ccp (data_in[i+2], data_in[i+1]); 
2512:  MOVLW  02
2514:  MOVLB  0
2516:  ADDWF  x69,W
2518:  CLRF   03
251A:  ADDLW  29
251C:  MOVWF  FE9
251E:  MOVLW  00
2520:  ADDWFC 03,W
2522:  MOVWF  FEA
2524:  MOVFF  FEF,245
2528:  MOVLW  01
252A:  ADDWF  x69,W
252C:  CLRF   03
252E:  ADDLW  29
2530:  MOVWF  FE9
2532:  MOVLW  00
2534:  ADDWFC 03,W
2536:  MOVWF  FEA
2538:  MOVFF  FEF,246
253C:  MOVFF  245,247
2540:  MOVFF  246,248
2544:  GOTO   1496
....................       VddVppLevels.VddThreshold = cal_threshold_byte (data_in[i+3]); 
2548:  MOVLW  03
254A:  ADDWF  x69,W
254C:  CLRF   03
254E:  ADDLW  29
2550:  MOVWF  FE9
2552:  MOVLW  00
2554:  ADDWFC 03,W
2556:  MOVWF  FEA
2558:  MOVFF  FEF,245
255C:  MOVFF  245,246
2560:  CALL   1558
2564:  MOVFF  01,231
....................       i += 4; 
2568:  MOVLW  04
256A:  ADDWF  x69,F
....................       continue; 
256C:  BRA    24A2
256E:  MOVLB  2
....................        
.................... SET_VPP_LBL: 
....................       /* 
....................        * data_in[i+1] = CCPR2L, this is the duty cycle, generally = 0x40; 
....................        * data_in[i+2] = VPPADC = Vpp * 18.61          Vpp is the desired voltage. 
....................        * data_in[i+3] = VPPlim = Vfault * 18.61  
....................       */ 
....................       Vpp_PWM.CCPRSetPoint = data_in[i+1]; 
2570:  MOVLW  01
2572:  MOVLB  0
2574:  ADDWF  x69,W
2576:  CLRF   03
2578:  ADDLW  29
257A:  MOVWF  FE9
257C:  MOVLW  00
257E:  ADDWFC 03,W
2580:  MOVWF  FEA
2582:  MOVFF  FEF,237
....................       Vpp_PWM.UppperLimit = cal_threshold_byte(data_in[i+2])+1; //VPP upper limit = VPP + 1 
2586:  MOVLW  02
2588:  ADDWF  x69,W
258A:  CLRF   03
258C:  ADDLW  29
258E:  MOVWF  FE9
2590:  MOVLW  00
2592:  ADDWFC 03,W
2594:  MOVWF  FEA
2596:  MOVFF  FEF,245
259A:  MOVFF  245,246
259E:  CALL   1558
25A2:  MOVLW  01
25A4:  ADDWF  01,W
25A6:  MOVLB  2
25A8:  MOVWF  x38
....................       Vpp_PWM.LowerLimit = Vpp_PWM.UppperLimit - 2;        //VPP lower limit = VPP - 1 
25AA:  MOVLW  02
25AC:  SUBWF  x38,W
25AE:  MOVWF  x39
....................       VddVppLevels.VppThreshold = cal_threshold_byte(data_in[i+3]); //calibrate VPPLim  
25B0:  MOVLW  03
25B2:  MOVLB  0
25B4:  ADDWF  x69,W
25B6:  CLRF   03
25B8:  ADDLW  29
25BA:  MOVWF  FE9
25BC:  MOVLW  00
25BE:  ADDWFC 03,W
25C0:  MOVWF  FEA
25C2:  MOVFF  FEF,245
25C6:  MOVFF  245,246
25CA:  CALL   1558
25CE:  MOVFF  01,232
....................       i += 4; 
25D2:  MOVLW  04
25D4:  ADDWF  x69,F
....................       continue; 
25D6:  BRA    24A2
25D8:  MOVLB  2
....................        
.................... READ_VOLTAGES_LBL: 
....................       send_voltages (); 
25DA:  MOVLB  0
25DC:  GOTO   1650
....................       i++; 
25E0:  INCF   x69,F
....................       continue; 
25E2:  BRA    24A2
25E4:  MOVLB  2
....................        
.................... RUN_ROM_SCRIPT_LBL: 
....................       /* 
....................        * data_in[i+1] = Script's length 
....................        * data_in[i+2] = Least significant byte of the script's address 
....................        * data_in[i+3] = Most significant byte of the script's address 
....................       */ 
....................       script_buffer = malloc (data_in[i+1]); 
25E6:  MOVLW  01
25E8:  MOVLB  0
25EA:  ADDWF  x69,W
25EC:  CLRF   03
25EE:  ADDLW  29
25F0:  MOVWF  FE9
25F2:  MOVLW  00
25F4:  ADDWFC 03,W
25F6:  MOVWF  FEA
25F8:  MOVFF  FEF,245
25FC:  MOVLB  2
25FE:  CLRF   x47
2600:  MOVFF  245,246
2604:  MOVLB  0
2606:  CALL   180C
260A:  MOVFF  02,241
260E:  MOVFF  01,240
....................       address =  ((data_in[i+3] * 0x100) + data_in[i+2]); 
2612:  MOVLW  03
2614:  ADDWF  x69,W
2616:  CLRF   03
2618:  ADDLW  29
261A:  MOVWF  FE9
261C:  MOVLW  00
261E:  ADDWFC 03,W
2620:  MOVWF  FEA
2622:  CLRF   16
2624:  BTFSC  FF2.7
2626:  BSF    16.7
2628:  BCF    FF2.7
262A:  MOVLB  2
262C:  CLRF   x6C
262E:  MOVFF  FEF,26B
2632:  MOVLW  01
2634:  MOVWF  x6E
2636:  CLRF   x6D
2638:  MOVLB  0
263A:  CALL   02C4
263E:  BTFSC  16.7
2640:  BSF    FF2.7
2642:  MOVLW  02
2644:  ADDWF  x69,W
2646:  CLRF   03
2648:  ADDLW  29
264A:  MOVWF  FE9
264C:  MOVLW  00
264E:  ADDWFC 03,W
2650:  MOVWF  FEA
2652:  MOVF   FEF,W
2654:  MOVLB  2
2656:  ADDWF  01,W
2658:  MOVWF  x42
265A:  MOVLW  00
265C:  ADDWFC 02,W
265E:  MOVWF  x43
....................       read_program_memory(address, script_buffer, data_in[i+1]);  
2660:  MOVLW  01
2662:  MOVLB  0
2664:  ADDWF  x69,W
2666:  CLRF   03
2668:  ADDLW  29
266A:  MOVWF  FE9
266C:  MOVLW  00
266E:  ADDWFC 03,W
2670:  MOVWF  FEA
2672:  MOVFF  FEF,245
2676:  CLRF   FF8
2678:  MOVFF  243,FF7
267C:  MOVFF  242,FF6
2680:  MOVFF  241,FEA
2684:  MOVFF  240,FE9
2688:  MOVLB  2
268A:  CLRF   x47
268C:  MOVFF  245,246
2690:  MOVLB  0
2692:  CALL   1956
....................       execute_script(data_in[i+1], script_buffer); 
2696:  MOVLW  01
2698:  ADDWF  x69,W
269A:  CLRF   03
269C:  ADDLW  29
269E:  MOVWF  FE9
26A0:  MOVLW  00
26A2:  ADDWFC 03,W
26A4:  MOVWF  FEA
26A6:  MOVFF  FEF,245
26AA:  MOVFF  245,248
26AE:  MOVFF  241,24A
26B2:  MOVFF  240,249
26B6:  CALL   1AF8
....................       free(script_buffer); 
26BA:  MOVFF  241,246
26BE:  MOVFF  240,245
26C2:  RCALL  231A
....................       i += 4; 
26C4:  MOVLW  04
26C6:  ADDWF  x69,F
....................       continue; 
26C8:  BRA    24A2
26CA:  MOVLB  2
....................        
.................... //downloadScrptArgsLbl: 
....................    //downloadScriptArgs(); 
....................    //i++; 
....................    //continue; 
....................  
.................... CLEAR_DOWN_BUFF_LBL:  
....................       DIB_mngnt.rd_idx = 0; 
26CC:  CLRF   x2E
....................       DIB_mngnt.wr_idx = 0; 
26CE:  CLRF   x2F
....................       DIB_mngnt.nbr_bytes = 0; 
26D0:  CLRF   x30
....................       i++; 
26D2:  MOVLB  0
26D4:  INCF   x69,F
....................       continue; 
26D6:  BRA    24A2
26D8:  MOVLB  2
....................  
.................... WRITE_DOWN_BUFF_LBL: 
....................       i++; 
26DA:  MOVLB  0
26DC:  INCF   x69,F
....................       write_down_buff(); 
26DE:  BRA    2396
....................       continue; 
26E0:  MOVLB  0
26E2:  BRA    24A2
26E4:  MOVLB  2
....................  
.................... CLEAR_UP_BUFF_LBL: 
....................       DOB_mngnt.rd_idx = 0; 
26E6:  MOVLB  1
26E8:  CLRF   x2B
....................       DOB_mngnt.wr_idx = 0; 
26EA:  CLRF   x2C
....................       DOB_mngnt.nbr_bytes = 0; 
26EC:  CLRF   x2D
....................       i++; 
26EE:  MOVLB  0
26F0:  INCF   x69,F
....................       continue; 
26F2:  BRA    24A2
26F4:  MOVLB  2
....................        
.................... UPLOAD_LBL: 
....................       send_data_usb(); 
26F6:  MOVLB  0
26F8:  BRA    23F6
....................       i++; 
26FA:  INCF   x69,F
....................       continue; 
26FC:  BRA    24A2
26FE:  MOVLB  2
....................        
.................... RUN_USB_SCRIPT_LBL: 
....................       // data_in[i+1] = number of commands 
....................       // data_in[i+2] = start of commands  
....................       execute_script(data_in[i+1],&data_in[i+2]); 
2700:  MOVLW  01
2702:  MOVLB  0
2704:  ADDWF  x69,W
2706:  CLRF   03
2708:  ADDLW  29
270A:  MOVWF  FE9
270C:  MOVLW  00
270E:  ADDWFC 03,W
2710:  MOVWF  FEA
2712:  MOVFF  FEF,245
2716:  MOVLW  02
2718:  ADDWF  x69,W
271A:  CLRF   03
271C:  ADDLW  29
271E:  MOVWF  01
2720:  MOVLW  00
2722:  ADDWFC 03,F
2724:  MOVFF  01,246
2728:  MOVFF  03,247
272C:  MOVFF  245,248
2730:  MOVFF  03,24A
2734:  MOVFF  01,249
2738:  MOVLB  0
273A:  CALL   1AF8
....................       i += data_in[i+1] + 2; 
273E:  MOVLW  01
2740:  ADDWF  x69,W
2742:  CLRF   03
2744:  ADDLW  29
2746:  MOVWF  FE9
2748:  MOVLW  00
274A:  ADDWFC 03,W
274C:  MOVWF  FEA
274E:  MOVLW  02
2750:  ADDWF  FEF,W
2752:  ADDWF  x69,F
....................       continue; 
2754:  BRA    24A2
2756:  MOVLB  2
....................  
.................... RUN_ROM_SCRIIPT_ITR_LBL: 
....................       /* 
....................        * data_in[i+1] = Script's length 
....................        * data_in[i+2] = Least significant byte of the script's address 
....................        * data_in[i+3] = Most significant byte of the script's address 
....................        * data_in[i+4] = number of iterations 
....................       */ 
....................       script_buffer = malloc (data_in[i+1]); 
2758:  MOVLW  01
275A:  MOVLB  0
275C:  ADDWF  x69,W
275E:  CLRF   03
2760:  ADDLW  29
2762:  MOVWF  FE9
2764:  MOVLW  00
2766:  ADDWFC 03,W
2768:  MOVWF  FEA
276A:  MOVFF  FEF,245
276E:  MOVLB  2
2770:  CLRF   x47
2772:  MOVFF  245,246
2776:  MOVLB  0
2778:  CALL   180C
277C:  MOVFF  02,241
2780:  MOVFF  01,240
....................       address =  ((data_in[i+3] * 0x100) + data_in[i+2]); 
2784:  MOVLW  03
2786:  ADDWF  x69,W
2788:  CLRF   03
278A:  ADDLW  29
278C:  MOVWF  FE9
278E:  MOVLW  00
2790:  ADDWFC 03,W
2792:  MOVWF  FEA
2794:  CLRF   16
2796:  BTFSC  FF2.7
2798:  BSF    16.7
279A:  BCF    FF2.7
279C:  MOVLB  2
279E:  CLRF   x6C
27A0:  MOVFF  FEF,26B
27A4:  MOVLW  01
27A6:  MOVWF  x6E
27A8:  CLRF   x6D
27AA:  MOVLB  0
27AC:  CALL   02C4
27B0:  BTFSC  16.7
27B2:  BSF    FF2.7
27B4:  MOVLW  02
27B6:  ADDWF  x69,W
27B8:  CLRF   03
27BA:  ADDLW  29
27BC:  MOVWF  FE9
27BE:  MOVLW  00
27C0:  ADDWFC 03,W
27C2:  MOVWF  FEA
27C4:  MOVF   FEF,W
27C6:  MOVLB  2
27C8:  ADDWF  01,W
27CA:  MOVWF  x42
27CC:  MOVLW  00
27CE:  ADDWFC 02,W
27D0:  MOVWF  x43
....................       unsigned int8 iterations = data_in[i+4]; 
27D2:  MOVLW  04
27D4:  MOVLB  0
27D6:  ADDWF  x69,W
27D8:  CLRF   03
27DA:  ADDLW  29
27DC:  MOVWF  FE9
27DE:  MOVLW  00
27E0:  ADDWFC 03,W
27E2:  MOVWF  FEA
27E4:  MOVFF  FEF,244
....................       read_program_memory(address, script_buffer, data_in[i+1]);  
27E8:  MOVLW  01
27EA:  ADDWF  x69,W
27EC:  CLRF   03
27EE:  ADDLW  29
27F0:  MOVWF  FE9
27F2:  MOVLW  00
27F4:  ADDWFC 03,W
27F6:  MOVWF  FEA
27F8:  MOVFF  FEF,245
27FC:  CLRF   FF8
27FE:  MOVFF  243,FF7
2802:  MOVFF  242,FF6
2806:  MOVFF  241,FEA
280A:  MOVFF  240,FE9
280E:  MOVLB  2
2810:  CLRF   x47
2812:  MOVFF  245,246
2816:  MOVLB  0
2818:  CALL   1956
....................       do  
....................       { 
....................          execute_script(data_in[i+1], script_buffer); 
281C:  MOVLW  01
281E:  ADDWF  x69,W
2820:  CLRF   03
2822:  ADDLW  29
2824:  MOVWF  FE9
2826:  MOVLW  00
2828:  ADDWFC 03,W
282A:  MOVWF  FEA
282C:  MOVFF  FEF,245
2830:  MOVFF  245,248
2834:  MOVFF  241,24A
2838:  MOVFF  240,249
283C:  CALL   1AF8
....................          iterations--; 
2840:  MOVLB  2
2842:  DECF   x44,F
....................       } while (iterations > 0); 
2844:  MOVF   x44,F
2846:  BTFSC  FD8.2
2848:  BRA    284E
284A:  MOVLB  0
284C:  BRA    281C
....................       free(script_buffer); 
284E:  MOVFF  241,246
2852:  MOVFF  240,245
2856:  MOVLB  0
2858:  RCALL  231A
....................       i += 5; 
285A:  MOVLW  05
285C:  ADDWF  x69,F
....................       continue; 
285E:  BRA    24A2
2860:  BRA    24A2
2862:  MOVLB  2
....................    } 
....................     
....................    BUSY_LED = 0; 
2864:  BCF    F8B.0
2866:  MOVLB  0
2868:  GOTO   28D8 (RETURN)
.................... } 
....................  
.................... void get_version_number (void) 
.................... { 
....................    data_out [0] = 3;  // Length of data to be sent, this byte not included 
*
1414:  MOVLW  03
1416:  MOVWF  x6A
....................    data_out [1] = 0; 
1418:  CLRF   x6B
....................    data_out [2] = 2;     
141A:  MOVLW  02
141C:  MOVWF  x6C
....................    data_out [3] = 22; 
141E:  MOVLW  16
1420:  MOVWF  x6D
....................    usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE); 
1422:  MOVLW  01
1424:  MOVLB  2
1426:  MOVWF  x47
1428:  CLRF   x49
142A:  MOVLW  6A
142C:  MOVWF  x48
142E:  CLRF   x4B
1430:  MOVLW  40
1432:  MOVWF  x4A
1434:  MOVLW  02
1436:  MOVWF  x4C
1438:  MOVLB  0
143A:  RCALL  1352
143C:  GOTO   24FC (RETURN)
.................... } 
....................  
.................... // Used in setVDD 
.................... void cal_and_set_ccp (unsigned int8 ccph, unsigned int8 ccpl) 
*
1496:  CLRF   16
1498:  BTFSC  FF2.7
149A:  BSF    16.7
149C:  BCF    FF2.7
149E:  MOVLB  2
14A0:  CLRF   x6C
14A2:  MOVFF  247,26B
14A6:  MOVLW  01
14A8:  MOVWF  x6E
14AA:  CLRF   x6D
14AC:  MOVLB  0
14AE:  CALL   02C4
14B2:  BTFSC  16.7
14B4:  BSF    FF2.7
14B6:  MOVFF  01,24C
14BA:  MOVLB  2
14BC:  MOVF   x48,W
14BE:  ADDWF  01,W
14C0:  MOVWF  01
14C2:  MOVLW  00
14C4:  ADDWFC 02,W
14C6:  MOVFF  01,249
14CA:  MOVWF  x4A
.................... { 
....................    signed int16 ccp1 = (ccph * 0x100) + ccpl; //ccp1 = ccph:ccpl 
....................    unsigned int8 tempCal; 
....................    ccp1 >>= 6; // 
14CC:  RRCF   x4A,W
14CE:  MOVWF  03
14D0:  RRCF   x49,W
14D2:  MOVWF  02
14D4:  RRCF   03,F
14D6:  RRCF   02,F
14D8:  RRCF   03,F
14DA:  RRCF   02,F
14DC:  RRCF   03,F
14DE:  RRCF   02,F
14E0:  RRCF   03,F
14E2:  RRCF   02,F
14E4:  RRCF   03,F
14E6:  RRCF   02,F
14E8:  MOVLW  03
14EA:  ANDWF  03,F
14EC:  MOVFF  02,249
14F0:  MOVFF  03,24A
....................    ccp1 += VoltageCalibration.vdd_offset; 
14F4:  CLRF   03
14F6:  MOVF   x3C,W
14F8:  BTFSC  FE8.7
14FA:  DECF   03,F
14FC:  ADDWF  x49,F
14FE:  MOVF   03,W
1500:  ADDWFC x4A,F
....................    ccp1 *= VoltageCalibration.vdd_calfactor;     //default is 0x80 = 0b10000000 
1502:  MOVFF  24A,24D
1506:  MOVFF  249,24C
150A:  CLRF   x4F
150C:  MOVFF  23D,24E
1510:  MOVLB  0
1512:  BRA    1440
1514:  MOVFF  02,24A
1518:  MOVFF  01,249
....................    ccp1 >>= 1;                                   //shift by one to get the original >> 6 after multiplying by 0x80 
151C:  BCF    FD8.0
151E:  MOVLB  2
1520:  RRCF   x4A,W
1522:  MOVWF  03
1524:  RRCF   x49,W
1526:  MOVWF  x49
1528:  MOVFF  03,24A
....................    tempCal = (unsigned int8) (ccp1 >> 8); 
152C:  MOVF   x4A,W
152E:  MOVWF  x4B
....................    CCPR1L = tempCal; 
1530:  MOVFF  24B,FBE
....................    //The following is to place the lower 2 bits of the duty cycle resolution in bits 4 and 5 of CCP1CON 
....................    CCP1 &= 0xFF; 
1534:  CLRF   x4A
....................    tempCal = (unsigned int8) (CCP1 >> 2); 
1536:  RRCF   x4A,W
1538:  MOVWF  03
153A:  RRCF   x49,W
153C:  MOVWF  02
153E:  RRCF   03,F
1540:  RRCF   02,F
1542:  MOVLW  3F
1544:  ANDWF  03,F
1546:  MOVFF  02,24B
....................  
....................    CCP1CON = (CCP1CON & 0xCF) | tempCal; 
154A:  MOVF   FBD,W
154C:  ANDLW  CF
154E:  IORWF  x4B,W
1550:  MOVWF  FBD
1552:  MOVLB  0
1554:  GOTO   2548 (RETURN)
....................    /* 
....................    #ASM  
....................    MOVLW 0xCF 
....................    ANDWF CCP1CON,W 
....................    IORLW tempCal 
....................    MOVWF CCP1CON 
....................    #ENDASM 
....................    */ 
.................... } 
....................  
.................... unsigned int8 cal_threshold_byte(unsigned int8 voltageVal) 
1558:  MOVLW  00
155A:  BSF    FD8.0
155C:  MOVLB  2
155E:  SUBFWB x3A,W
1560:  MOVWF  x47
.................... { 
....................     unsigned int8 inverse_cal = (0x0200 - VoltageCalibration.adc_calfactor); //adc_calfactor by default is 0x0100 so, 0x0200 - adc_calfactor is the same as 1 / adc_calfactor  
....................     inverse_cal *= voltageVal; 
1562:  MOVF   x47,W
1564:  MULWF  x46
1566:  MOVFF  FF3,247
....................     inverse_cal >>= 8; 
156A:  CLRF   x47
....................  
....................     return (unsigned int8) inverse_cal; 
156C:  MOVFF  247,01
1570:  MOVLB  0
1572:  RETURN 0
.................... } // See cal_adc_word(unsigned int rawValue) 
....................  
.................... // TODO: create a function to store cal and offset values in eeprom and a function to read them 
....................  
.................... // Read VDD and VPP voltages, used to detect self-powered targets  
.................... void send_voltages (void) 
.................... { 
....................    unsigned int16 adc_result; 
....................    data_out [0] = 5;   //Length of data to be sent 
*
1650:  MOVLW  05
1652:  MOVWF  x6A
....................    adc_vpp_vdd_control (0); //Stop ADC, VPP and VDD 
1654:  MOVLB  2
1656:  CLRF   x47
1658:  MOVLB  0
165A:  RCALL  1040
....................    get_adc (0x04); //CH1_VDD 
165C:  MOVLW  04
165E:  MOVLB  2
1660:  MOVWF  x47
1662:  MOVLB  0
1664:  RCALL  1574
1666:  CLRF   16
1668:  BTFSC  FF2.7
166A:  BSF    16.7
166C:  BCF    FF2.7
....................    adc_result = (ADRESH * 0x100) + ADRESL; 
166E:  MOVLB  2
1670:  CLRF   x6C
1672:  MOVFF  FC4,26B
1676:  MOVLW  01
1678:  MOVWF  x6E
167A:  CLRF   x6D
167C:  MOVLB  0
167E:  CALL   02C4
1682:  BTFSC  16.7
1684:  BSF    FF2.7
1686:  MOVF   FC3,W
1688:  MOVLB  2
168A:  ADDWF  01,W
168C:  MOVWF  x45
168E:  MOVLW  00
1690:  ADDWFC 02,W
1692:  MOVWF  x46
....................    adc_result = cal_adc_word(adc_result); 
1694:  MOVFF  246,248
1698:  MOVFF  245,247
169C:  MOVLB  0
169E:  RCALL  15E4
16A0:  MOVFF  02,246
16A4:  MOVFF  01,245
....................    data_out [1] = (unsigned int8) adc_result; 
16A8:  MOVFF  245,6B
....................    data_out [2] = (unsigned int8) (adc_result >> 8); 
16AC:  MOVLB  2
16AE:  MOVF   x46,W
16B0:  MOVLB  0
16B2:  MOVWF  x6C
....................     
....................    get_adc (0x00); //CH0_VPP 
16B4:  MOVLB  2
16B6:  CLRF   x47
16B8:  MOVLB  0
16BA:  RCALL  1574
16BC:  CLRF   16
16BE:  BTFSC  FF2.7
16C0:  BSF    16.7
16C2:  BCF    FF2.7
....................    adc_result = (ADRESH * 0x100) + ADRESL; 
16C4:  MOVLB  2
16C6:  CLRF   x6C
16C8:  MOVFF  FC4,26B
16CC:  MOVLW  01
16CE:  MOVWF  x6E
16D0:  CLRF   x6D
16D2:  MOVLB  0
16D4:  CALL   02C4
16D8:  BTFSC  16.7
16DA:  BSF    FF2.7
16DC:  MOVF   FC3,W
16DE:  MOVLB  2
16E0:  ADDWF  01,W
16E2:  MOVWF  x45
16E4:  MOVLW  00
16E6:  ADDWFC 02,W
16E8:  MOVWF  x46
....................    adc_result = cal_adc_word(adc_result); 
16EA:  MOVFF  246,248
16EE:  MOVFF  245,247
16F2:  MOVLB  0
16F4:  RCALL  15E4
16F6:  MOVFF  02,246
16FA:  MOVFF  01,245
....................    data_out [3] = (unsigned int8) adc_result; 
16FE:  MOVFF  245,6D
....................    data_out [4] = (unsigned int8) (adc_result >> 8); 
1702:  MOVLB  2
1704:  MOVF   x46,W
1706:  MOVLB  0
1708:  MOVWF  x6E
....................     
....................    usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE); 
170A:  MOVLW  01
170C:  MOVLB  2
170E:  MOVWF  x47
1710:  CLRF   x49
1712:  MOVLW  6A
1714:  MOVWF  x48
1716:  CLRF   x4B
1718:  MOVLW  40
171A:  MOVWF  x4A
171C:  MOVLW  02
171E:  MOVWF  x4C
1720:  MOVLB  0
1722:  RCALL  1352
....................    adc_vpp_vdd_control (1); // Start ADC, VPP and VDD 
1724:  MOVLW  01
1726:  MOVLB  2
1728:  MOVWF  x47
172A:  MOVLB  0
172C:  RCALL  1040
172E:  GOTO   25E0 (RETURN)
.................... } 
....................  
.................... void adc_vpp_vdd_control (int1 state) 
.................... { 
....................    if (state) 
*
1040:  MOVLB  2
1042:  MOVF   x47,F
1044:  BZ    106C
....................    {//Activate modules 
....................       VddVppLevels.VddErrCount = 0; 
1046:  CLRF   x33
....................       VddVppLevels.VppErrCount = 0; 
1048:  CLRF   x34
....................       #ASM 
....................          MOVLW 0x80 
104A:  MOVLW  80
....................          MOVWF T1CON            // Rd16 1:1 prescale off Fosc/4 
104C:  MOVWF  FCD
....................          MOVLW 0xFA 
104E:  MOVLW  FA
....................          MOVWF TMR1H            //// 65536-1480 = about 125us 
1050:  MOVWF  FCF
....................          MOVLW 0x38 
1052:  MOVLW  38
....................          MOVWF TMR1L 
1054:  MOVWF  FCE
....................           
....................          BCF   TMR1IF           // Clear int flag 
1056:  BCF    F9E.0
....................          BSF   TMR1IE           // Enable int 
1058:  BSF    F9D.0
....................          BSF   TMR1ON           // Start timer 
105A:  BSF    FCD.0
....................           
....................          BCF   ADIF  // Clear A/D Converter Interrupt Flag 
105C:  BCF    F9E.6
....................          BCF   ADIE  // Disable ADC int 
105E:  BCF    F9D.6
....................          MOVLW 0x26 
1060:  MOVLW  26
....................          MOVWF ADCON2           //ADCON2 setting for voltage monitoring 
1062:  MOVWF  FC0
....................          MOVLW 0x05 
1064:  MOVLW  05
....................          MOVWF ADCON0           // Set ADC channel for VDD_TGT_FB and turn on ADC (ADCON0) 
1066:  MOVWF  FC2
....................          BSF   GO                // Start conversion. 
1068:  BSF    FC2.1
....................       #ENDASM 
....................    } 
106A:  BRA    1076
....................    else  
....................    { //Deactivate modules 
....................       #ASM 
....................          BCF   TMR1IE   // Disable Timer1 interrupt 
106C:  BCF    F9D.0
....................          BCF   TMR1ON   // Stop Timer1 
106E:  BCF    FCD.0
....................           
....................          CLRF  ADCON0   // Shut off ADC conversion in progress 
1070:  CLRF   FC2
....................           
....................          BCF   ADIF  // Clear A/D Converter Interrupt Flag 
1072:  BCF    F9E.6
....................          BCF   ADIE  // Disable ADC int 
1074:  BCF    F9D.6
....................       #ENDASM 
....................    } 
1076:  MOVLB  0
1078:  RETURN 0
.................... } 
....................  
.................... void get_adc (unsigned int8 channel) 
.................... { 
....................    ADCON0 = (channel + 1);     // Set channel. ADD 1 to enable A/D Converter (bit 0) page 261 
*
1574:  MOVLW  01
1576:  MOVLB  2
1578:  ADDWF  x47,W
157A:  MOVWF  FC2
....................    GO = 1;                    // Begin conversion   
157C:  BSF    FC2.1
....................    while (ADCON0 & 0x02);       // Wait while GO is still set 
157E:  BTFSC  FC2.1
1580:  BRA    157E
1582:  MOVLB  0
1584:  RETURN 0
.................... } 
....................  
.................... unsigned int16 cal_adc_word(unsigned int16 Val) 
*
15E4:  MOVLB  2
15E6:  CLRF   x4C
15E8:  CLRF   x4B
15EA:  MOVFF  248,24A
15EE:  MOVFF  247,249
.................... { 
....................  
....................     unsigned int32 cal_value = Val; 
....................     cal_value *= VoltageCalibration.adc_calfactor; 
15F2:  MOVFF  24C,250
15F6:  MOVFF  24B,24F
15FA:  MOVFF  24A,24E
15FE:  MOVFF  249,24D
1602:  CLRF   x54
1604:  CLRF   x53
1606:  MOVFF  23B,252
160A:  MOVFF  23A,251
160E:  MOVLB  0
1610:  BRA    1586
1612:  MOVFF  03,24C
1616:  MOVFF  02,24B
161A:  MOVFF  01,24A
161E:  MOVFF  00,249
....................     cal_value >>= 8; 
1622:  MOVFF  24A,249
1626:  MOVFF  24B,24A
162A:  MOVFF  24C,24B
162E:  MOVLB  2
1630:  CLRF   x4C
....................     if (cal_value > 0xFFFF) 
1632:  MOVF   x4C,F
1634:  BNZ   163C
1636:  MOVF   x4B,W
1638:  SUBLW  00
163A:  BC    1644
....................         cal_value = 0xFFFF; 
163C:  CLRF   x4C
163E:  CLRF   x4B
1640:  SETF   x4A
1642:  SETF   x49
....................  
....................     return (unsigned int16) cal_value; 
1644:  MOVFF  249,01
1648:  MOVFF  24A,02
164C:  MOVLB  0
164E:  RETURN 0
.................... } 
....................  
.................... void write_down_buff(void) 
*
2396:  MOVF   x69,W
2398:  INCF   x69,F
239A:  CLRF   03
239C:  ADDLW  29
239E:  MOVWF  FE9
23A0:  MOVLW  00
23A2:  ADDWFC 03,W
23A4:  MOVWF  FEA
23A6:  MOVFF  FEF,245
.................... { 
....................    unsigned int8 len = data_in[i++]; // Get length of data 
....................    if (len + DIB_mngnt.nbr_bytes > 255) return;   
....................     
....................    for (unsigned int8 k = 0; k < len; k++) 
23AA:  MOVLB  2
23AC:  CLRF   x46
23AE:  MOVF   x45,W
23B0:  SUBWF  x46,W
23B2:  BC    23F0
....................    { 
....................       DATA_In_Buffer[DIB_mngnt.wr_idx++] = data_in[i++]; 
23B4:  MOVF   x2F,W
23B6:  INCF   x2F,F
23B8:  CLRF   03
23BA:  ADDLW  2E
23BC:  MOVWF  01
23BE:  MOVLW  01
23C0:  ADDWFC 03,F
23C2:  MOVFF  03,248
23C6:  MOVLB  0
23C8:  MOVF   x69,W
23CA:  INCF   x69,F
23CC:  CLRF   03
23CE:  ADDLW  29
23D0:  MOVWF  FE9
23D2:  MOVLW  00
23D4:  ADDWFC 03,W
23D6:  MOVWF  FEA
23D8:  MOVFF  FEF,249
23DC:  MOVLB  2
23DE:  MOVFF  248,FEA
23E2:  MOVFF  01,FE9
23E6:  MOVFF  249,FEF
....................       //if (DIB_mngnt.wr_idx > 255)       //just let DIB_mngnt.wr_idx overflow  
....................       //   DIB_mngnt.wr_idx = 0; 
....................       DIB_mngnt.nbr_bytes++; 
23EA:  INCF   x30,F
23EC:  INCF   x46,F
23EE:  BRA    23AE
....................    } 
23F0:  MOVLB  0
23F2:  GOTO   24A2 (RETURN)
.................... } 
....................  
....................  
.................... void send_data_usb(void) 
23F6:  MOVFF  12D,245
.................... { 
....................    unsigned int8 len = DOB_mngnt.nbr_bytes; // Get number of bytes in DATA_Out_Buffer 
....................     
....................    len = len < 63 ? len : 63; // First byte in usb report will be used to store length, the other 63 used for data 
23FA:  MOVLB  2
23FC:  MOVF   x45,W
23FE:  SUBLW  3E
2400:  BNC   2406
2402:  MOVF   x45,W
2404:  BRA    2408
2406:  MOVLW  3F
2408:  MOVWF  x45
....................    data_out[0] = len; 
240A:  MOVFF  245,6A
....................    for (int8 m = 1; m <= len; m++) 
240E:  MOVLW  01
2410:  MOVWF  x46
2412:  MOVF   x46,W
2414:  SUBWF  x45,W
2416:  BNC   245C
....................    { 
....................       data_out[m] = data_out_buffer[DOB_mngnt.rd_idx++]; 
2418:  CLRF   03
241A:  MOVF   x46,W
241C:  ADDLW  6A
241E:  MOVWF  01
2420:  MOVLW  00
2422:  ADDWFC 03,F
2424:  MOVFF  03,248
2428:  MOVLB  1
242A:  MOVF   x2B,W
242C:  INCF   x2B,F
242E:  CLRF   03
2430:  ADDLW  AB
2432:  MOVWF  FE9
2434:  MOVLW  00
2436:  ADDWFC 03,W
2438:  MOVWF  FEA
243A:  MOVFF  FEF,249
243E:  MOVLB  2
2440:  MOVFF  248,FEA
2444:  MOVFF  01,FE9
2448:  MOVFF  249,FEF
....................       if (DOB_mngnt.rd_idx > 127) 
244C:  MOVLB  1
244E:  MOVF   x2B,W
2450:  SUBLW  7F
2452:  BC    2456
....................             DOB_mngnt.rd_idx = 0; 
2454:  CLRF   x2B
2456:  MOVLB  2
2458:  INCF   x46,F
245A:  BRA    2412
....................    } 
....................     
....................    DOB_mngnt.nbr_bytes -= len; 
245C:  MOVF   x45,W
245E:  MOVLB  1
2460:  SUBWF  x2D,F
....................    usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE); 
2462:  MOVLW  01
2464:  MOVLB  2
2466:  MOVWF  x47
2468:  CLRF   x49
246A:  MOVLW  6A
246C:  MOVWF  x48
246E:  CLRF   x4B
2470:  MOVLW  40
2472:  MOVWF  x4A
2474:  MOVLW  02
2476:  MOVWF  x4C
2478:  MOVLB  0
247A:  CALL   1352
247E:  GOTO   26FA (RETURN)
.................... } 
....................  
.................... /* 
.................... void downloadScriptArgs (void) 
.................... { 
....................    unsigned int8 len = data_in[++i]; 
....................    for (unsigned int8 j = 0; j < len; j++) 
....................    { 
....................       scrpt_args[j] = data_in[++i];           // Copy the arguments from USB packet to scrpt_args buffer  
....................    } 
....................    scrpt_rd_idx = 0; 
.................... } 
....................  
.................... */ 
....................  
....................  
....................  
.................... void execute_script(unsigned int8 scrpt_len, unsigned int8 *script_location) 
*
1AF8:  MOVLB  2
1AFA:  CLRF   x4B
1AFC:  BSF    x4F.0
1AFE:  BSF    x4F.1
.................... { 
....................    unsigned int8 si = 0; // Initialize script index to 0 
....................    unsigned int8 offset, loop_buff_idx, temp; 
....................    int1 first_iteration_LB = 1; // Used by LOOPBUFFER cmd 
....................    int1 first_iteration_L = 1; // Used by LOOP cmd 
....................    unsigned int16 nbr_iterations, loop_count, loop_idx; 
....................    unsigned int8 *SFR_ptr; // Used by the WRITE_SFR and READ_SFR commands 
....................     
....................    #ASM 
....................       BCF INT0IE // Disable Timer0 interrupt 
1B00:  BCF    FF2.4
....................       MOVLW 0x07 
1B02:  MOVLW  07
....................       MOVWF T0CON // 16-bit timer, 1:256 prescale 
1B04:  MOVWF  FD5
....................    #ENDASM 
....................     
....................    if (scrpt_len == 0) return;  
1B06:  MOVF   x48,F
1B08:  BTFSC  FD8.2
1B0A:  BRA    217A
....................    while (si < scrpt_len) 
1B0C:  MOVF   x48,W
1B0E:  SUBWF  x4B,W
1B10:  BTFSC  FD8.0
1B12:  BRA    217A
....................    { 
....................       offset = *(script_location + si);  
1B14:  MOVF   x4B,W
1B16:  ADDWF  x49,W
1B18:  MOVWF  01
1B1A:  MOVLW  00
1B1C:  ADDWFC x4A,W
1B1E:  MOVFF  01,FE9
1B22:  MOVWF  FEA
1B24:  MOVFF  FEF,24C
....................       offset -= 0xD5;  // Consider 0xD5 to be the minimum for now 
1B28:  MOVLW  D5
1B2A:  SUBWF  x4C,F
....................       offset *= 2;      
1B2C:  BCF    FD8.0
1B2E:  RLCF   x4C,F
....................       offset += 8;      
1B30:  MOVLW  08
1B32:  ADDWF  x4C,F
....................       #ASM 
....................          MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU  
1B34:  MOVF   FF9,W
....................          ADDWF    offset, W 
1B36:  ADDWF  x4C,W
....................          BTFSC    C 
1B38:  BTFSC  FD8.0
....................          INCF     PCLATH 
1B3A:  INCF   FFA,F
....................          MOVWF    PCL 
1B3C:  MOVWF  FF9
....................          BRA      READ_N_BITS_LBL  //Read N bits from target and store them in DATA_Out_Buffer, (May not be used) 
1B3E:  BRA    1B88
....................          BRA      READ_BYTE_LBL 
1B40:  BRA    1BB8
....................          BRA      VISI24_LBL 
1B42:  BRA    1BD0
....................          BRA      NOP24_LBL 
1B44:  BRA    1C16
....................          BRA      COREINST24_LBL 
1B46:  BRA    1C4A
....................          BRA      COREINST18_LBL 
1B48:  BRA    1CCC
....................          BRA      POP_DOWNLOAD_BUFFER_LBL 
1B4A:  BRA    1D28
....................          BRA      READ_ICSP_STATES_LBL 
1B4C:  BRA    1D32
....................          BRA      LOOP_BUFFER_LBL 
1B4E:  BRA    1D46
....................          BRA      WRITE_SFR_LBL 
1B50:  BRA    1DAE
....................          BRA      READ_SFR_LBL 
1B52:  BRA    1DEE
....................          BRA      EXIT_SCRIPT_LBL 
1B54:  BRA    1E26
....................          BRA      GOTO_IDX_LBL 
1B56:  BRA    1E2C
....................          BRA      IF_GT_GOTO_LBL 
1B58:  BRA    1E44
....................          BRA      IF_EQ_GOTO_LBL 
1B5A:  BRA    1E96
....................          BRA      SHORT_DELAY_LBL 
1B5C:  BRA    1EE6
....................          BRA      LONG_DELAY_LBL 
1B5E:  BRA    1F0C
....................          BRA      LOOP_LBL 
1B60:  BRA    1F32
....................          //BRA      SET_ICSP_RATELbl      //Used for HCS encoders, not MCUs 
....................          BRA      SHIFT_BITS_IN_LBL 
1B62:  BRA    1FA2
....................          BRA      SHIFT_BITS_IN_BUFFER_LBL 
1B64:  BRA    1FC8
....................          BRA      SHIFT_BITS_OUT_BUFFER_LBL 
1B66:  BRA    1FF8
....................          BRA      SHIFT_BITS_OUT_LBL 
1B68:  BRA    202C
....................          BRA      SHIFT_BYTE_IN_LBL 
1B6A:  BRA    2084
....................          BRA      SHIFT_BYTE_IN_BUFFER_LBL 
1B6C:  BRA    2092
....................          BRA      SHIFT_BYTE_OUT_BUFFER_LBL 
1B6E:  BRA    20AA
....................          BRA      SHIFT_BYTE_OUT_LBL 
1B70:  BRA    20C6
....................          BRA      SET_ICSP_PINS_LBL 
1B72:  BRA    20F0
....................          BRA      MCLR_TGT_GND_OFF_LBL 
1B74:  BRA    2138
....................          BRA      MCLR_TGT_GND_ON_LBL 
1B76:  BRA    213E
....................          BRA      VPP_PWM_OFF_LBL 
1B78:  BRA    2144
....................          BRA      VPP_PWM_ON_LBL 
1B7A:  BRA    214C
....................          BRA      VPP_ON_LBL 
1B7C:  BRA    2154
....................          BRA      VPP_OFF_LBL 
1B7E:  BRA    215A
....................          BRA      VDD_GND_ON_LBL 
1B80:  BRA    2160
....................          BRA      VDD_GND_OFF_LBL 
1B82:  BRA    2166
....................          BRA      VDD_ON_LBL 
1B84:  BRA    216C
....................          BRA      VDD_OFF_LBL 
1B86:  BRA    2172
....................       #ENDASM  
.................... READ_N_BITS_LBL: 
....................       write_upload_buff(read_n_bits_24(*(script_location + ++si)));//WriteUploadBuffer(readN_Bits(*(script_location + si + 1))); 
1B88:  INCF   x4B,F
1B8A:  MOVF   x4B,W
1B8C:  ADDWF  x49,W
1B8E:  MOVWF  01
1B90:  MOVLW  00
1B92:  ADDWFC x4A,W
1B94:  MOVWF  03
1B96:  MOVFF  01,FE9
1B9A:  MOVWF  FEA
1B9C:  MOVFF  FEF,258
1BA0:  MOVFF  258,259
1BA4:  MOVLB  0
1BA6:  RCALL  1974
1BA8:  MOVFF  01,258
1BAC:  MOVFF  01,259
1BB0:  RCALL  1998
....................       si++; 
1BB2:  MOVLB  2
1BB4:  INCF   x4B,F
....................       continue; 
1BB6:  BRA    1B0C
....................     
.................... READ_BYTE_LBL: 
....................       write_upload_buff(read_n_bits_24(8)); 
1BB8:  MOVLW  08
1BBA:  MOVWF  x59
1BBC:  MOVLB  0
1BBE:  RCALL  1974
1BC0:  MOVFF  01,258
1BC4:  MOVFF  01,259
1BC8:  RCALL  1998
....................       si++; 
1BCA:  MOVLB  2
1BCC:  INCF   x4B,F
....................       continue; 
1BCE:  BRA    1B0C
....................  
.................... VISI24_LBL: 
....................       shift_bits_out_ICSP(1, 4); 
1BD0:  MOVLW  01
1BD2:  MOVWF  x59
1BD4:  MOVLW  04
1BD6:  MOVWF  x5A
1BD8:  MOVLB  0
1BDA:  RCALL  19C4
....................       shift_bits_out_ICSP(0, 8); 
1BDC:  MOVLB  2
1BDE:  CLRF   x59
1BE0:  MOVLW  08
1BE2:  MOVWF  x5A
1BE4:  MOVLB  0
1BE6:  RCALL  19C4
....................       write_upload_buff(read_n_bits_24(8)); 
1BE8:  MOVLW  08
1BEA:  MOVLB  2
1BEC:  MOVWF  x59
1BEE:  MOVLB  0
1BF0:  RCALL  1974
1BF2:  MOVFF  01,258
1BF6:  MOVFF  01,259
1BFA:  RCALL  1998
....................       write_upload_buff(read_n_bits_24(8)); 
1BFC:  MOVLW  08
1BFE:  MOVLB  2
1C00:  MOVWF  x59
1C02:  MOVLB  0
1C04:  RCALL  1974
1C06:  MOVFF  01,258
1C0A:  MOVFF  01,259
1C0E:  RCALL  1998
....................       si++; 
1C10:  MOVLB  2
1C12:  INCF   x4B,F
....................       continue; 
1C14:  BRA    1B0C
....................     
.................... NOP24_LBL: 
....................       shift_bits_out_ICSP(0, 8); 
1C16:  CLRF   x59
1C18:  MOVLW  08
1C1A:  MOVWF  x5A
1C1C:  MOVLB  0
1C1E:  RCALL  19C4
....................       shift_bits_out_ICSP(0, 8); 
1C20:  MOVLB  2
1C22:  CLRF   x59
1C24:  MOVLW  08
1C26:  MOVWF  x5A
1C28:  MOVLB  0
1C2A:  RCALL  19C4
....................       shift_bits_out_ICSP(0, 8); 
1C2C:  MOVLB  2
1C2E:  CLRF   x59
1C30:  MOVLW  08
1C32:  MOVWF  x5A
1C34:  MOVLB  0
1C36:  RCALL  19C4
....................       shift_bits_out_ICSP(0, 8); 
1C38:  MOVLB  2
1C3A:  CLRF   x59
1C3C:  MOVLW  08
1C3E:  MOVWF  x5A
1C40:  MOVLB  0
1C42:  RCALL  19C4
....................       si++; 
1C44:  MOVLB  2
1C46:  INCF   x4B,F
....................       continue; 
1C48:  BRA    1B0C
....................     
.................... COREINST24_LBL: 
....................       shift_bits_out_ICSP(0, 4); 
1C4A:  CLRF   x59
1C4C:  MOVLW  04
1C4E:  MOVWF  x5A
1C50:  MOVLB  0
1C52:  RCALL  19C4
....................       shift_bits_out_ICSP(*(script_location + ++si), 8); 
1C54:  MOVLB  2
1C56:  INCF   x4B,F
1C58:  MOVF   x4B,W
1C5A:  ADDWF  x49,W
1C5C:  MOVWF  01
1C5E:  MOVLW  00
1C60:  ADDWFC x4A,W
1C62:  MOVWF  03
1C64:  MOVFF  01,FE9
1C68:  MOVWF  FEA
1C6A:  MOVFF  FEF,258
1C6E:  MOVFF  258,259
1C72:  MOVLW  08
1C74:  MOVWF  x5A
1C76:  MOVLB  0
1C78:  RCALL  19C4
....................       shift_bits_out_ICSP(*(script_location + ++si), 8); 
1C7A:  MOVLB  2
1C7C:  INCF   x4B,F
1C7E:  MOVF   x4B,W
1C80:  ADDWF  x49,W
1C82:  MOVWF  01
1C84:  MOVLW  00
1C86:  ADDWFC x4A,W
1C88:  MOVWF  03
1C8A:  MOVFF  01,FE9
1C8E:  MOVWF  FEA
1C90:  MOVFF  FEF,258
1C94:  MOVFF  258,259
1C98:  MOVLW  08
1C9A:  MOVWF  x5A
1C9C:  MOVLB  0
1C9E:  RCALL  19C4
....................       shift_bits_out_ICSP(*(script_location + ++si), 8); 
1CA0:  MOVLB  2
1CA2:  INCF   x4B,F
1CA4:  MOVF   x4B,W
1CA6:  ADDWF  x49,W
1CA8:  MOVWF  01
1CAA:  MOVLW  00
1CAC:  ADDWFC x4A,W
1CAE:  MOVWF  03
1CB0:  MOVFF  01,FE9
1CB4:  MOVWF  FEA
1CB6:  MOVFF  FEF,258
1CBA:  MOVFF  258,259
1CBE:  MOVLW  08
1CC0:  MOVWF  x5A
1CC2:  MOVLB  0
1CC4:  RCALL  19C4
....................       si++; 
1CC6:  MOVLB  2
1CC8:  INCF   x4B,F
....................       continue; 
1CCA:  BRA    1B0C
....................  
.................... COREINST18_LBL: 
....................       shift_bits_out_ICSP(0, 4); 
1CCC:  CLRF   x59
1CCE:  MOVLW  04
1CD0:  MOVWF  x5A
1CD2:  MOVLB  0
1CD4:  RCALL  19C4
....................       shift_bits_out_ICSP(*(script_location + ++si), 8); 
1CD6:  MOVLB  2
1CD8:  INCF   x4B,F
1CDA:  MOVF   x4B,W
1CDC:  ADDWF  x49,W
1CDE:  MOVWF  01
1CE0:  MOVLW  00
1CE2:  ADDWFC x4A,W
1CE4:  MOVWF  03
1CE6:  MOVFF  01,FE9
1CEA:  MOVWF  FEA
1CEC:  MOVFF  FEF,258
1CF0:  MOVFF  258,259
1CF4:  MOVLW  08
1CF6:  MOVWF  x5A
1CF8:  MOVLB  0
1CFA:  RCALL  19C4
....................       shift_bits_out_ICSP(*(script_location + ++si), 8); 
1CFC:  MOVLB  2
1CFE:  INCF   x4B,F
1D00:  MOVF   x4B,W
1D02:  ADDWF  x49,W
1D04:  MOVWF  01
1D06:  MOVLW  00
1D08:  ADDWFC x4A,W
1D0A:  MOVWF  03
1D0C:  MOVFF  01,FE9
1D10:  MOVWF  FEA
1D12:  MOVFF  FEF,258
1D16:  MOVFF  258,259
1D1A:  MOVLW  08
1D1C:  MOVWF  x5A
1D1E:  MOVLB  0
1D20:  RCALL  19C4
....................       si++; 
1D22:  MOVLB  2
1D24:  INCF   x4B,F
....................       continue; 
1D26:  BRA    1B0C
....................     
.................... POP_DOWNLOAD_BUFFER_LBL: 
....................       pop_down_buff (); 
1D28:  MOVLB  0
1D2A:  RCALL  19E8
....................       si++; 
1D2C:  MOVLB  2
1D2E:  INCF   x4B,F
....................       continue; 
1D30:  BRA    1B0C
....................     
.................... READ_ICSP_STATES_LBL: 
....................       write_upload_buff(getICSP_States()); 
1D32:  MOVLB  0
1D34:  BRA    1A12
1D36:  MOVFF  01,258
1D3A:  MOVFF  01,259
1D3E:  RCALL  1998
....................       si++; 
1D40:  MOVLB  2
1D42:  INCF   x4B,F
....................       continue; 
1D44:  BRA    1B0C
....................     
.................... LOOP_BUFFER_LBL:  //will loop through a number of script commands, argument is the number if bytes to loop through  
....................       if (!first_iteration_LB) 
1D46:  BTFSC  x4F.0
1D48:  BRA    1D68
....................       { 
....................          nbr_iterations--; 
1D4A:  MOVF   x50,W
1D4C:  BTFSC  FD8.2
1D4E:  DECF   x51,F
1D50:  DECF   x50,F
....................          if (nbr_iterations == 0)   //no iterations  
1D52:  MOVF   x50,F
1D54:  BNZ   1D60
1D56:  MOVF   x51,F
1D58:  BNZ   1D60
....................          { 
....................             first_iteration_LB = 1; //number of iterations endded for the current run  
1D5A:  BSF    x4F.0
....................             si ++; 
1D5C:  INCF   x4B,F
....................             continue; 
1D5E:  BRA    1B0C
....................          } 
....................          si = first_iteration_LB;   //Still iterating 
1D60:  CLRF   x4B
1D62:  BTFSC  x4F.0
1D64:  INCF   x4B,F
....................          continue; 
1D66:  BRA    1B0C
....................       } 
....................       loop_buff_idx = si - *(script_location + ++si); //always loops to the instruction before it, except in the script n 255 in the original Firmware 
1D68:  INCF   x4B,F
1D6A:  MOVF   x4B,W
1D6C:  ADDWF  x49,W
1D6E:  MOVWF  01
1D70:  MOVLW  00
1D72:  ADDWFC x4A,W
1D74:  MOVFF  01,FE9
1D78:  MOVWF  FEA
1D7A:  MOVF   FEF,W
1D7C:  SUBWF  x4B,W
1D7E:  MOVWF  x4D
....................       //scrpt_rd_idx -= 2;      //the instruction before LOOPBUFFER has 2 args 
....................       nbr_iterations = (unsigned int16) pop_down_buff ();   //low byte 
1D80:  MOVLB  0
1D82:  RCALL  19E8
1D84:  MOVLB  2
1D86:  CLRF   x51
1D88:  MOVFF  01,250
....................       nbr_iterations += (256  *  pop_down_buff ());         //upper byte 
1D8C:  MOVLB  0
1D8E:  RCALL  19E8
1D90:  MOVLW  00
1D92:  MOVLB  2
1D94:  ADDWF  x50,F
1D96:  MOVF   01,W
1D98:  ADDWFC x51,F
....................       if (nbr_iterations == 0)   //no iterations  
1D9A:  MOVF   x50,F
1D9C:  BNZ   1DA6
1D9E:  MOVF   x51,F
1DA0:  BNZ   1DA6
....................       { 
....................          si++; //advance to next command  
1DA2:  INCF   x4B,F
....................          continue; 
1DA4:  BRA    1B0C
....................       } 
....................       first_iteration_LB = 0; 
1DA6:  BCF    x4F.0
....................       si = loop_buff_idx;   
1DA8:  MOVFF  24D,24B
....................       continue; 
1DAC:  BRA    1B0C
....................        
.................... WRITE_SFR_LBL: 
....................       SFR_ptr = (unsigned int8 *) 0x0F00 + *(script_location + ++si); 
1DAE:  INCF   x4B,F
1DB0:  MOVF   x4B,W
1DB2:  ADDWF  x49,W
1DB4:  MOVWF  01
1DB6:  MOVLW  00
1DB8:  ADDWFC x4A,W
1DBA:  MOVFF  01,FE9
1DBE:  MOVWF  FEA
1DC0:  MOVFF  FEF,256
1DC4:  MOVLW  0F
1DC6:  MOVWF  x57
....................       *SFR_ptr = *(script_location + ++si); 
1DC8:  INCF   x4B,F
1DCA:  MOVF   x4B,W
1DCC:  ADDWF  x49,W
1DCE:  MOVWF  01
1DD0:  MOVLW  00
1DD2:  ADDWFC x4A,W
1DD4:  MOVFF  01,FE9
1DD8:  MOVWF  FEA
1DDA:  MOVFF  FEF,25A
1DDE:  MOVFF  257,FEA
1DE2:  MOVFF  256,FE9
1DE6:  MOVFF  25A,FEF
....................       si++; 
1DEA:  INCF   x4B,F
....................       continue; 
1DEC:  BRA    1B0C
....................  
.................... READ_SFR_LBL: 
....................       SFR_ptr = (unsigned int8 *) 0x0F00 + *(script_location + ++si); 
1DEE:  INCF   x4B,F
1DF0:  MOVF   x4B,W
1DF2:  ADDWF  x49,W
1DF4:  MOVWF  01
1DF6:  MOVLW  00
1DF8:  ADDWFC x4A,W
1DFA:  MOVFF  01,FE9
1DFE:  MOVWF  FEA
1E00:  MOVFF  FEF,256
1E04:  MOVLW  0F
1E06:  MOVWF  x57
....................       write_upload_buff(*SFR_ptr); 
1E08:  MOVFF  257,03
1E0C:  MOVFF  256,FE9
1E10:  MOVFF  257,FEA
1E14:  MOVFF  FEF,258
1E18:  MOVFF  258,259
1E1C:  MOVLB  0
1E1E:  RCALL  1998
....................       si++; 
1E20:  MOVLB  2
1E22:  INCF   x4B,F
....................       continue; 
1E24:  BRA    1B0C
....................        
.................... EXIT_SCRIPT_LBL: 
....................       si = scrpt_len; 
1E26:  MOVFF  248,24B
....................       continue; 
1E2A:  BRA    1B0C
....................        
.................... GOTO_IDX_LBL: 
....................       si = *(script_location + ++si); 
1E2C:  INCF   x4B,F
1E2E:  MOVF   x4B,W
1E30:  ADDWF  x49,W
1E32:  MOVWF  01
1E34:  MOVLW  00
1E36:  ADDWFC x4A,W
1E38:  MOVFF  01,FE9
1E3C:  MOVWF  FEA
1E3E:  MOVFF  FEF,24B
....................       continue; 
1E42:  BRA    1B0C
....................        
.................... IF_GT_GOTO_LBL: //if last loaded byte in DATA_Out_Buffer is greater than arg[1], execution will branch to offset specified by arg[2]  
....................       temp = DATA_Out_Buffer[DOB_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written 
1E44:  MOVLW  01
1E46:  MOVLB  1
1E48:  SUBWF  x2C,W
1E4A:  CLRF   03
1E4C:  ADDLW  AB
1E4E:  MOVWF  FE9
1E50:  MOVLW  00
1E52:  ADDWFC 03,W
1E54:  MOVWF  FEA
1E56:  MOVFF  FEF,24E
....................       if (temp > *(script_location + ++si)) 
1E5A:  MOVLB  2
1E5C:  INCF   x4B,F
1E5E:  MOVF   x4B,W
1E60:  ADDWF  x49,W
1E62:  MOVWF  01
1E64:  MOVLW  00
1E66:  ADDWFC x4A,W
1E68:  MOVWF  03
1E6A:  MOVFF  01,FE9
1E6E:  MOVWF  FEA
1E70:  MOVF   FEF,W
1E72:  SUBWF  x4E,W
1E74:  BZ    1E92
1E76:  BNC   1E92
....................       { 
....................          si += (signed int8) *(script_location + ++si); 
1E78:  INCF   x4B,F
1E7A:  MOVF   x4B,W
1E7C:  ADDWF  x49,W
1E7E:  MOVWF  01
1E80:  MOVLW  00
1E82:  ADDWFC x4A,W
1E84:  MOVFF  01,FE9
1E88:  MOVWF  FEA
1E8A:  MOVF   FEF,W
1E8C:  ADDWF  x4B,W
1E8E:  MOVWF  x4B
....................       } 
1E90:  BRA    1E94
....................       else  
....................       { 
....................          si++; 
1E92:  INCF   x4B,F
....................       } 
....................       continue; 
1E94:  BRA    1B0C
....................        
.................... IF_EQ_GOTO_LBL: //if last loaded byte in DATA_Out_Buffer is equal than arg[1], execution will branch to offset specified by arg[2]  
....................       temp = DATA_Out_Buffer[DOB_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written 
1E96:  MOVLW  01
1E98:  MOVLB  1
1E9A:  SUBWF  x2C,W
1E9C:  CLRF   03
1E9E:  ADDLW  AB
1EA0:  MOVWF  FE9
1EA2:  MOVLW  00
1EA4:  ADDWFC 03,W
1EA6:  MOVWF  FEA
1EA8:  MOVFF  FEF,24E
....................       if (temp == *(script_location + ++si)) 
1EAC:  MOVLB  2
1EAE:  INCF   x4B,F
1EB0:  MOVF   x4B,W
1EB2:  ADDWF  x49,W
1EB4:  MOVWF  01
1EB6:  MOVLW  00
1EB8:  ADDWFC x4A,W
1EBA:  MOVWF  03
1EBC:  MOVFF  01,FE9
1EC0:  MOVWF  FEA
1EC2:  MOVF   FEF,W
1EC4:  SUBWF  x4E,W
1EC6:  BNZ   1EE2
....................       { 
....................          si += (signed int8) *(script_location + ++si); 
1EC8:  INCF   x4B,F
1ECA:  MOVF   x4B,W
1ECC:  ADDWF  x49,W
1ECE:  MOVWF  01
1ED0:  MOVLW  00
1ED2:  ADDWFC x4A,W
1ED4:  MOVFF  01,FE9
1ED8:  MOVWF  FEA
1EDA:  MOVF   FEF,W
1EDC:  ADDWF  x4B,W
1EDE:  MOVWF  x4B
....................       } 
1EE0:  BRA    1EE4
....................       else  
....................       { 
....................          si++; 
1EE2:  INCF   x4B,F
....................       } 
....................       continue; 
1EE4:  BRA    1B0C
....................        
.................... SHORT_DELAY_LBL:      //causes a delay of : duration * 21.3us, NOTE : 0 = 255 
....................       delay_short (*(script_location + ++si)); 
1EE6:  INCF   x4B,F
1EE8:  MOVF   x4B,W
1EEA:  ADDWF  x49,W
1EEC:  MOVWF  01
1EEE:  MOVLW  00
1EF0:  ADDWFC x4A,W
1EF2:  MOVWF  03
1EF4:  MOVFF  01,FE9
1EF8:  MOVWF  FEA
1EFA:  MOVFF  FEF,258
1EFE:  MOVFF  258,259
1F02:  MOVLB  0
1F04:  BRA    1A2C
....................       si++; 
1F06:  MOVLB  2
1F08:  INCF   x4B,F
....................       continue; 
1F0A:  BRA    1B0C
....................        
.................... LONG_DELAY_LBL: 
....................       delay_long (*(script_location + ++si)); 
1F0C:  INCF   x4B,F
1F0E:  MOVF   x4B,W
1F10:  ADDWF  x49,W
1F12:  MOVWF  01
1F14:  MOVLW  00
1F16:  ADDWFC x4A,W
1F18:  MOVWF  03
1F1A:  MOVFF  01,FE9
1F1E:  MOVWF  FEA
1F20:  MOVFF  FEF,258
1F24:  MOVFF  258,259
1F28:  MOVLB  0
1F2A:  BRA    1A48
....................       si++; 
1F2C:  MOVLB  2
1F2E:  INCF   x4B,F
....................       continue; 
1F30:  BRA    1B0C
....................        
.................... LOOP_LBL: 
....................       if (!first_iteration_L) 
1F32:  BTFSC  x4F.1
1F34:  BRA    1F54
....................       { 
....................          loop_count--; 
1F36:  MOVF   x52,W
1F38:  BTFSC  FD8.2
1F3A:  DECF   x53,F
1F3C:  DECF   x52,F
....................          if (loop_count == 0) 
1F3E:  MOVF   x52,F
1F40:  BNZ   1F4E
1F42:  MOVF   x53,F
1F44:  BNZ   1F4E
....................          { 
....................             first_iteration_L = 1; 
1F46:  BSF    x4F.1
....................             si += 3; //LOOP command + 2 args 
1F48:  MOVLW  03
1F4A:  ADDWF  x4B,F
....................             continue; 
1F4C:  BRA    1B0C
....................          } 
....................          si = loop_idx; 
1F4E:  MOVFF  254,24B
....................          continue; 
1F52:  BRA    1B0C
....................       } 
....................       first_iteration_L = 0; 
1F54:  BCF    x4F.1
....................       loop_idx = si - *(script_location + si + 1); 
1F56:  MOVF   x4B,W
1F58:  ADDWF  x49,W
1F5A:  MOVWF  x58
1F5C:  MOVLW  00
1F5E:  ADDWFC x4A,W
1F60:  MOVWF  x59
1F62:  MOVLW  01
1F64:  ADDWF  x58,W
1F66:  MOVWF  01
1F68:  MOVLW  00
1F6A:  ADDWFC x59,W
1F6C:  MOVFF  01,FE9
1F70:  MOVWF  FEA
1F72:  MOVF   FEF,W
1F74:  SUBWF  x4B,W
1F76:  MOVWF  x54
1F78:  CLRF   x55
....................       loop_count = *(script_location + si + 2); 
1F7A:  MOVF   x4B,W
1F7C:  ADDWF  x49,W
1F7E:  MOVWF  x58
1F80:  MOVLW  00
1F82:  ADDWFC x4A,W
1F84:  MOVWF  x59
1F86:  MOVLW  02
1F88:  ADDWF  x58,W
1F8A:  MOVWF  01
1F8C:  MOVLW  00
1F8E:  ADDWFC x59,W
1F90:  MOVFF  01,FE9
1F94:  MOVWF  FEA
1F96:  CLRF   x53
1F98:  MOVFF  FEF,252
....................       si = loop_idx; 
1F9C:  MOVFF  254,24B
....................       continue; 
1FA0:  BRA    1B0C
....................   
.................... //SET_ICSP_RATELbl: 
.................... //      icsp_rate = *(script_location + ++si); 
.................... //      si++; 
.................... //      continue; 
....................  
.................... SHIFT_BITS_IN_LBL: 
....................       shift_bits_in(*(script_location + ++si)); 
1FA2:  INCF   x4B,F
1FA4:  MOVF   x4B,W
1FA6:  ADDWF  x49,W
1FA8:  MOVWF  01
1FAA:  MOVLW  00
1FAC:  ADDWFC x4A,W
1FAE:  MOVWF  03
1FB0:  MOVFF  01,FE9
1FB4:  MOVWF  FEA
1FB6:  MOVFF  FEF,258
1FBA:  MOVFF  258,259
1FBE:  MOVLB  0
1FC0:  RCALL  1A62
....................       si++; 
1FC2:  MOVLB  2
1FC4:  INCF   x4B,F
....................       continue; 
1FC6:  BRA    1B0C
....................        
.................... SHIFT_BITS_IN_BUFFER_LBL: 
....................       write_upload_buff(shift_bits_in(*(script_location + ++si))); 
1FC8:  INCF   x4B,F
1FCA:  MOVF   x4B,W
1FCC:  ADDWF  x49,W
1FCE:  MOVWF  01
1FD0:  MOVLW  00
1FD2:  ADDWFC x4A,W
1FD4:  MOVWF  03
1FD6:  MOVFF  01,FE9
1FDA:  MOVWF  FEA
1FDC:  MOVFF  FEF,258
1FE0:  MOVFF  258,259
1FE4:  MOVLB  0
1FE6:  RCALL  1A62
1FE8:  MOVFF  01,258
1FEC:  MOVFF  01,259
1FF0:  RCALL  1998
....................       si++; 
1FF2:  MOVLB  2
1FF4:  INCF   x4B,F
....................       continue; 
1FF6:  BRA    1B0C
....................        
.................... SHIFT_BITS_OUT_BUFFER_LBL: //Shift bits located in DATA_In_Buffer out  
....................       shift_bits_out (pop_down_buff(), *(script_location + ++si)); 
1FF8:  MOVLB  0
1FFA:  RCALL  19E8
1FFC:  MOVFF  01,258
2000:  MOVLB  2
2002:  INCF   x4B,F
2004:  MOVF   x4B,W
2006:  ADDWF  x49,W
2008:  MOVWF  01
200A:  MOVLW  00
200C:  ADDWFC x4A,W
200E:  MOVWF  03
2010:  MOVFF  01,FE9
2014:  MOVWF  FEA
2016:  MOVFF  FEF,259
201A:  MOVFF  258,25A
201E:  MOVFF  259,25B
2022:  MOVLB  0
2024:  RCALL  1A8C
....................       si++; 
2026:  MOVLB  2
2028:  INCF   x4B,F
....................       continue; 
202A:  BRA    1B0C
....................        
.................... SHIFT_BITS_OUT_LBL: 
....................       shift_bits_out (*(script_location + si + 2), *(script_location + si + 1)); 
202C:  MOVF   x4B,W
202E:  ADDWF  x49,W
2030:  MOVWF  x58
2032:  MOVLW  00
2034:  ADDWFC x4A,W
2036:  MOVWF  x59
2038:  MOVLW  02
203A:  ADDWF  x58,W
203C:  MOVWF  01
203E:  MOVLW  00
2040:  ADDWFC x59,W
2042:  MOVWF  03
2044:  MOVFF  01,FE9
2048:  MOVWF  FEA
204A:  MOVFF  FEF,258
204E:  MOVF   x4B,W
2050:  ADDWF  x49,W
2052:  MOVWF  x59
2054:  MOVLW  00
2056:  ADDWFC x4A,W
2058:  MOVWF  x5A
205A:  MOVLW  01
205C:  ADDWF  x59,W
205E:  MOVWF  01
2060:  MOVLW  00
2062:  ADDWFC x5A,W
2064:  MOVWF  03
2066:  MOVFF  01,FE9
206A:  MOVWF  FEA
206C:  MOVFF  FEF,259
2070:  MOVFF  258,25A
2074:  MOVFF  259,25B
2078:  MOVLB  0
207A:  RCALL  1A8C
....................       si += 3; 
207C:  MOVLW  03
207E:  MOVLB  2
2080:  ADDWF  x4B,F
....................       continue; 
2082:  BRA    1B0C
....................        
.................... SHIFT_BYTE_IN_LBL: 
....................       shift_bits_in(8); 
2084:  MOVLW  08
2086:  MOVWF  x59
2088:  MOVLB  0
208A:  RCALL  1A62
....................       si++; 
208C:  MOVLB  2
208E:  INCF   x4B,F
....................       continue; 
2090:  BRA    1B0C
....................        
.................... SHIFT_BYTE_IN_BUFFER_LBL: 
....................       write_upload_buff (shift_bits_in(8)); 
2092:  MOVLW  08
2094:  MOVWF  x59
2096:  MOVLB  0
2098:  RCALL  1A62
209A:  MOVFF  01,258
209E:  MOVFF  01,259
20A2:  RCALL  1998
....................       si++; 
20A4:  MOVLB  2
20A6:  INCF   x4B,F
....................       continue; 
20A8:  BRA    1B0C
....................        
.................... SHIFT_BYTE_OUT_BUFFER_LBL: 
....................       shift_bits_out (pop_down_buff(), 8); 
20AA:  MOVLB  0
20AC:  RCALL  19E8
20AE:  MOVFF  01,258
20B2:  MOVFF  01,25A
20B6:  MOVLW  08
20B8:  MOVLB  2
20BA:  MOVWF  x5B
20BC:  MOVLB  0
20BE:  RCALL  1A8C
....................       si++; 
20C0:  MOVLB  2
20C2:  INCF   x4B,F
....................       continue; 
20C4:  BRA    1B0C
....................        
.................... SHIFT_BYTE_OUT_LBL: 
....................       shift_bits_out (*(script_location + ++si), 8); 
20C6:  INCF   x4B,F
20C8:  MOVF   x4B,W
20CA:  ADDWF  x49,W
20CC:  MOVWF  01
20CE:  MOVLW  00
20D0:  ADDWFC x4A,W
20D2:  MOVWF  03
20D4:  MOVFF  01,FE9
20D8:  MOVWF  FEA
20DA:  MOVFF  FEF,258
20DE:  MOVFF  258,25A
20E2:  MOVLW  08
20E4:  MOVWF  x5B
20E6:  MOVLB  0
20E8:  RCALL  1A8C
....................       si++; 
20EA:  MOVLB  2
20EC:  INCF   x4B,F
....................       continue; 
20EE:  BRA    1B0C
....................        
.................... SET_ICSP_PINS_LBL: 
....................       icsp_pins_states = *(script_location + si + 1); 
20F0:  MOVF   x4B,W
20F2:  ADDWF  x49,W
20F4:  MOVWF  x58
20F6:  MOVLW  00
20F8:  ADDWFC x4A,W
20FA:  MOVWF  x59
20FC:  MOVLW  01
20FE:  ADDWF  x58,W
2100:  MOVWF  01
2102:  MOVLW  00
2104:  ADDWFC x59,W
2106:  MOVFF  01,FE9
210A:  MOVWF  FEA
210C:  MOVFF  FEF,AA
....................       set_icsp_pins(*(script_location + ++si)); 
2110:  INCF   x4B,F
2112:  MOVF   x4B,W
2114:  ADDWF  x49,W
2116:  MOVWF  01
2118:  MOVLW  00
211A:  ADDWFC x4A,W
211C:  MOVWF  03
211E:  MOVFF  01,FE9
2122:  MOVWF  FEA
2124:  MOVFF  FEF,258
2128:  MOVFF  258,259
212C:  MOVLB  0
212E:  BRA    1AB0
....................       si += 1; 
2130:  MOVLW  01
2132:  MOVLB  2
2134:  ADDWF  x4B,F
....................       continue; 
2136:  BRA    1B0C
....................        
.................... MCLR_TGT_GND_OFF_LBL: 
....................       #ASM 
....................          BCF   MCLR_TGT 
2138:  BCF    F89.5
....................       #ENDASM 
....................       si++; 
213A:  INCF   x4B,F
....................       continue; 
213C:  BRA    1B0C
....................  
.................... MCLR_TGT_GND_ON_LBL: 
....................       #ASM 
....................          BSF   MCLR_TGT 
213E:  BSF    F89.5
....................       #ENDASM 
....................       si++; 
2140:  INCF   x4B,F
....................       continue; 
2142:  BRA    1B0C
....................        
.................... VPP_PWM_OFF_LBL: 
....................       CCP2CON = 0x00; // Turn off PWM, DS page 143 
2144:  CLRF   FBA
....................       Vpp_PUMP = 0; 
2146:  BCF    F8B.1
....................       si++; 
2148:  INCF   x4B,F
....................       continue; 
214A:  BRA    1B0C
....................        
.................... VPP_PWM_ON_LBL: 
....................       CCP2CON = 0x0C; // PWM mode, DS page 143 
214C:  MOVLW  0C
214E:  MOVWF  FBA
....................       si++; 
2150:  INCF   x4B,F
....................       continue; 
2152:  BRA    1B0C
....................        
.................... VPP_ON_LBL: 
....................       #ASM 
....................          BSF   Vpp_ON 
2154:  BSF    F8A.2
....................       #ENDASM 
....................       si++;  
2156:  INCF   x4B,F
....................       continue; 
2158:  BRA    1B0C
....................   
....................  VPP_OFF_LBL: 
....................       #ASM 
....................          BCF   Vpp_ON 
215A:  BCF    F8A.2
....................       #ENDASM 
....................       si++;  
215C:  INCF   x4B,F
....................       continue; 
215E:  BRA    1B0C
....................        
.................... VDD_GND_ON_LBL: 
....................       #ASM 
....................          BSF   Vdd_TGT_N 
2160:  BSF    F8A.3
....................       #ENDASM 
....................       si++;  
2162:  INCF   x4B,F
....................       continue; 
2164:  BRA    1B0C
....................        
.................... VDD_GND_OFF_LBL: 
....................       #ASM 
....................          BCF   Vdd_TGT_N 
2166:  BCF    F8A.3
....................       #ENDASM 
....................       si++;  
2168:  INCF   x4B,F
....................       continue; 
216A:  BRA    1B0C
....................   
.................... VDD_ON_LBL: 
....................       #ASM 
....................          BCF   Vdd_TGT_P 
216C:  BCF    F8A.4
....................       #ENDASM 
....................       si++;  
216E:  INCF   x4B,F
....................       continue; 
2170:  BRA    1B0C
....................        
.................... VDD_OFF_LBL: 
....................       #ASM 
....................          BSF   Vdd_TGT_P 
2172:  BSF    F8A.4
....................       #ENDASM 
....................       si++;  
2174:  INCF   x4B,F
....................       continue; 
2176:  BRA    1B0C
2178:  BRA    1B0C
....................        
....................    } //end of while loop 
217A:  MOVLB  0
217C:  RETURN 0
.................... } 
....................  
....................  
.................... /*  
....................  * FOR PIC24F 
....................  * Reads N bits and copy them in the upload buffer  
....................  * **read_n_bits_24(n)** 
.................... */ 
.................... unsigned int8 read_n_bits_24(unsigned int8 numberOfBits) 
*
1974:  MOVLB  2
1976:  CLRF   x5A
.................... { 
....................    unsigned int8 bitsBuff = 0; //Bits are shifted in here  
....................    //unsigned int8 iteration = numberOfBits; 
....................    #ASM 
....................       BSF      tris_ICSPDAT  //Set PGD pin as input 
1978:  BSF    F92.2
....................       //MOVLW 0x01        //this will be used to set the bits  
....................    READBITSLOOP: 
....................       BTFSC    ICSPDAT_in  //read PGD pin 
197A:  BTFSC  F80.2
....................       BSF      bitsBuff,0      //If PGD was high, set the corresponding bit starting from LSB 
197C:  BSF    x5A.0
....................       BSF      ICSPCLK_out       //Clock rising edge 
197E:  BSF    F89.3
1980:  NOP   
....................       //RLNCF    W,W               //Rotate W left, (no carry) 
....................       NOP 
1982:  NOP   
....................       NOP 
1984:  NOP   
....................       NOP 
....................       BCF      ICSPCLK_out    //Clock falling edge  
1986:  BCF    F89.3
1988:  NOP   
....................       NOP 
....................       RRNCF    bitsBuff, f    //Rotate right (no carry) 
198A:  RRNCF  x5A,F
....................       DECFSZ   numberOfBits, f 
198C:  DECFSZ x59,F
....................       BRA      READBITSLOOP 
198E:  BRA    197A
....................    #ENDASM 
....................    return bitsBuff; 
1990:  MOVFF  25A,01
1994:  MOVLB  0
1996:  RETURN 0
.................... } 
....................  
....................  
.................... void write_upload_buff(unsigned int8 wr_byte) 
.................... { 
....................    if (DOB_mngnt.nbr_bytes > 127)  
1998:  MOVLB  1
199A:  MOVF   x2D,W
199C:  SUBLW  7F
199E:  BC    19A2
....................    { 
....................       return; 
19A0:  BRA    19C0
....................    } 
....................     
....................    DATA_Out_Buffer[DOB_mngnt.wr_idx] = wr_byte; 
19A2:  CLRF   03
19A4:  MOVF   x2C,W
19A6:  ADDLW  AB
19A8:  MOVWF  FE9
19AA:  MOVLW  00
19AC:  ADDWFC 03,W
19AE:  MOVWF  FEA
19B0:  MOVFF  259,FEF
....................    DOB_mngnt.wr_idx++; 
19B4:  INCF   x2C,F
....................    if (DOB_mngnt.wr_idx > 127) 
19B6:  MOVF   x2C,W
19B8:  SUBLW  7F
19BA:  BC    19BE
....................       DOB_mngnt.wr_idx = 0; 
19BC:  CLRF   x2C
....................    DOB_mngnt.nbr_bytes++; 
19BE:  INCF   x2D,F
19C0:  MOVLB  0
19C2:  RETURN 0
.................... } 
....................  
.................... /* 
....................  * Note: ICSP pins must be set to outputs 
....................  * PIC24F 
....................  * 
.................... */ 
.................... void shift_bits_out_ICSP (unsigned int8 char_to_be_shifted, unsigned int8 number_of_bits) 
19C4:  MOVFF  259,25B
19C8:  MOVFF  25A,25C
.................... { 
....................    char temp_char = char_to_be_shifted; 
....................    char num_bits = number_of_bits; 
....................     
....................    #ASM 
....................       BITS_OUT_LOOP: 
....................          BTFSS    temp_char,0 
19CC:  MOVLB  2
19CE:  BTFSS  x5B.0
....................          BCF      ICSPDAT_out    //If LSB of char_to_be_shifted is 0, clear PGD pin 
19D0:  BCF    F89.2
....................          BTFSC    temp_char,0 
19D2:  BTFSC  x5B.0
....................          BCF      ICSPDAT_out 
19D4:  BCF    F89.2
19D6:  NOP   
....................          NOP 
....................          BSF      ICSPCLK_out    //Clock rising edge  
19D8:  BSF    F89.3
19DA:  NOP   
....................          NOP 
....................          BCF      ICSPCLK_out 
19DC:  BCF    F89.3
....................          RRNCF    temp_char,f 
19DE:  RRNCF  x5B,F
....................          DECFSZ   num_bits 
19E0:  DECFSZ x5C,F
....................          BRA      BITS_OUT_LOOP 
19E2:  BRA    19CE
....................    #ENDASM 
19E4:  MOVLB  0
19E6:  RETURN 0
.................... } 
....................  
.................... unsigned int8 getICSP_States() 
*
1A12:  MOVLB  2
1A14:  CLRF   x58
.................... { 
....................    unsigned int8 state = 0; 
....................    if (ICSPDAT_in == 1)    // ICSPDAT_in = PORTA.2 
1A16:  BTFSS  F80.2
1A18:  BRA    1A1C
....................       state |= 0x02; 
1A1A:  BSF    x58.1
....................    if (ICSPCLK_in == 1)    // ICSPCLK_in = PORTA.3 
1A1C:  BTFSS  F80.3
1A1E:  BRA    1A22
....................       state |= 0x01; 
1A20:  BSF    x58.0
....................        
....................    return state; 
1A22:  MOVFF  258,01
1A26:  MOVLB  0
1A28:  GOTO   1D36 (RETURN)
.................... } 
....................  
.................... // Return a byte from the DATA_In_Buffer 
.................... unsigned int8 pop_down_buff () 
.................... { 
....................    unsigned int8 popped;  
....................    if (DIB_mngnt.nbr_bytes == 0) 
*
19E8:  MOVLB  2
19EA:  MOVF   x30,F
19EC:  BNZ   19F4
....................    { 
....................       return 0; 
19EE:  MOVLW  00
19F0:  MOVWF  01
19F2:  BRA    1A0E
....................    } 
....................    popped = DATA_In_Buffer[DIB_mngnt.rd_idx]; 
19F4:  CLRF   03
19F6:  MOVF   x2E,W
19F8:  ADDLW  2E
19FA:  MOVWF  FE9
19FC:  MOVLW  01
19FE:  ADDWFC 03,W
1A00:  MOVWF  FEA
1A02:  MOVFF  FEF,258
....................    DIB_mngnt.rd_idx++; 
1A06:  INCF   x2E,F
....................    DIB_mngnt.nbr_bytes--; 
1A08:  DECF   x30,F
....................     
....................    //if (DIB_mngnt.rd_idx > 255) 
....................    //   DIB_mngnt.rd_idx = 0; 
....................     
....................    return popped; 
1A0A:  MOVFF  258,01
1A0E:  MOVLB  0
1A10:  RETURN 0
.................... } 
....................  
.................... // Each Timer0's lower byte increment is 21.3 uS, there's a delay of 12 uS between script commands, it is ignored here 
.................... void delay_short (unsigned int8 duration) 
.................... { 
....................    #ASM 
....................       BCF   TMR0IF   // Clear timer0 interrupt flag 
*
1A2C:  BCF    FF2.2
....................       MOVLW    0xFF     // So that the timer will overflow when TMR0L does 
1A2E:  MOVLW  FF
....................       MOVWF    TMR0H 
1A30:  MOVWF  FD7
....................    #ENDASM 
....................    TMR0L = 0 - duration; 
1A32:  MOVLB  2
1A34:  COMF   x59,W
1A36:  MOVWF  FD6
1A38:  INCF   FD6,F
....................    TMR0ON = 1; // Start Timer0, DS page 127 
1A3A:  BSF    FD5.7
....................    while (TMR0IF == 0); //Wait for overflow flag to be set 
1A3C:  BTFSS  FF2.2
1A3E:  BRA    1A3C
....................    TMR0ON = 0; // Stop Timer0 
1A40:  BCF    FD5.7
1A42:  MOVLB  0
1A44:  GOTO   1F06 (RETURN)
....................     
.................... } 
....................  
.................... // Each Timer0's upper byte increment is 5.46mS ((1 / 48M) *256 * 256) 
.................... void delay_long (unsigned int8 duration) 
.................... { 
....................    TMR0IF = 0; 
1A48:  BCF    FF2.2
....................    TMR0H = 0 - duration; 
1A4A:  MOVLB  2
1A4C:  COMF   x59,W
1A4E:  MOVWF  FD7
1A50:  INCF   FD7,F
....................    TMR0L = 0; 
1A52:  CLRF   FD6
....................    TMR0ON = 1; //Start Timer0 
1A54:  BSF    FD5.7
....................    while (TMR0IF == 0); //Wait for overflow flag to be set 
1A56:  BTFSS  FF2.2
1A58:  BRA    1A56
....................    TMR0ON = 0; //Stop Timer0 
1A5A:  BCF    FD5.7
1A5C:  MOVLB  0
1A5E:  GOTO   1F2C (RETURN)
.................... } 
....................  
.................... unsigned int8 shift_bits_in (unsigned int8 number_of_bits) 
1A62:  MOVFF  259,25A
1A66:  MOVLB  2
1A68:  CLRF   x5B
.................... { 
....................    unsigned int8 num_bits = number_of_bits; 
....................    unsigned int8 bits_buff = 0; // Bits are shifted in here  
....................    tris_ICSPDAT = 1;             // Set PGD pin as input 
1A6A:  BSF    F92.2
....................    #ASM 
....................    READ_BITS_LOOP: 
....................       BSF      LATA, 3  // ICSPCLK_out       // Clock rising edge 
1A6C:  BSF    F89.3
1A6E:  NOP   
....................       NOP 
1A70:  NOP   
....................       NOP 
1A72:  NOP   
....................       NOP 
....................       BTFSC    PORTA, 2        // Read PGD pin 
1A74:  BTFSC  F80.2
....................       BSF      bits_buff,0       // If PGD was high, set the corresponding bit starting from LSB 
1A76:  BSF    x5B.0
....................       BCF      LATA, 3       // Clock falling edge  
1A78:  BCF    F89.3
1A7A:  NOP   
....................       NOP 
....................       RRNCF    bits_buff, 1      // Rotate right (no carry) 
1A7C:  RRNCF  x5B,F
....................       DECFSZ   num_bits, 1 
1A7E:  DECFSZ x5A,F
....................       BRA      READ_BITS_LOOP 
1A80:  BRA    1A6C
....................       BCF      tris_ICSPDAT      // PGD set as output 
1A82:  BCF    F92.2
....................    #ENDASM 
....................     
....................    //bits_buff >>= (8 - num_bits); // Right justified 
....................    return bits_buff; 
1A84:  MOVFF  25B,01
1A88:  MOVLB  0
1A8A:  RETURN 0
.................... } 
....................  
.................... void shift_bits_out (unsigned int8  outb, unsigned int8 number_of_bits) 
1A8C:  MOVFF  25A,25C
1A90:  MOVFF  25B,25D
.................... { 
....................    unsigned int8 out_char = outb; 
....................    unsigned int8  num_bits = number_of_bits; 
....................    #ASM 
....................       WRITE_BITS_LOOP: 
....................          BTFSS    out_char,0 
1A94:  MOVLB  2
1A96:  BTFSS  x5C.0
....................          BCF      ICSPDAT_out 
1A98:  BCF    F89.2
....................          BTFSC    out_char,0 
1A9A:  BTFSC  x5C.0
....................          BSF      ICSPDAT_out 
1A9C:  BSF    F89.2
1A9E:  NOP   
....................          NOP 
....................          BSF      ICSPCLK_out //Clock rising edge 
1AA0:  BSF    F89.3
1AA2:  NOP   
....................          NOP 
....................          BCF      ICSPCLK_out  //Clock falling edge  
1AA4:  BCF    F89.3
....................          RRNCF    out_char, 1 
1AA6:  RRNCF  x5C,F
....................          DECFSZ   num_bits, 1 
1AA8:  DECFSZ x5D,F
....................          BRA      WRITE_BITS_LOOP 
1AAA:  BRA    1A96
....................    #ENDASM 
1AAC:  MOVLB  0
1AAE:  RETURN 0
.................... } 
....................  
.................... void set_icsp_pins(int8 state) 
.................... { 
....................    /* 
....................    BUSY_LED = 0;  
....................    if (state & 0x04) 
....................       ICSPCLK_out = 1;    
....................    else 
....................       ICSPCLK_out = 0; 
....................    // set ISCDAT latch 
....................    if (state & 0x08) 
....................    { 
....................       ICSPDAT_out = 1;   
....................    } 
....................    else 
....................       ICSPDAT_out = 0; 
....................  
....................    // set ISCPCLK direction 
....................    if (state & 0x01) 
....................       tris_ICSPCLK = 1;    
....................    else 
....................       tris_ICSPCLK = 0; 
....................    // set ISCDAT direction 
....................    if (state & 0x02) 
....................       tris_ICSPDAT = 1;    
....................    else 
....................       tris_ICSPDAT = 0; 
....................    */ 
....................    ICSPCLK_out  = (state & 0x04) ? 1 : 0; //state[3] = Clock state 
1AB0:  MOVLB  2
1AB2:  BTFSS  x59.2
1AB4:  BRA    1ABA
1AB6:  MOVLW  01
1AB8:  BRA    1ABC
1ABA:  MOVLW  00
1ABC:  BCF    F89.3
1ABE:  BTFSC  FE8.0
1AC0:  BSF    F89.3
....................    ICSPDAT_out  = (state & 0x08) ? 1 : 0; //state[4] = Data state 
1AC2:  BTFSS  x59.3
1AC4:  BRA    1ACA
1AC6:  MOVLW  01
1AC8:  BRA    1ACC
1ACA:  MOVLW  00
1ACC:  BCF    F89.2
1ACE:  BTFSC  FE8.0
1AD0:  BSF    F89.2
....................    tris_ICSPCLK = (state & 0x01) ? 1 : 0; //state[0] = Clock direction 
1AD2:  BTFSS  x59.0
1AD4:  BRA    1ADA
1AD6:  MOVLW  01
1AD8:  BRA    1ADC
1ADA:  MOVLW  00
1ADC:  BCF    F92.3
1ADE:  BTFSC  FE8.0
1AE0:  BSF    F92.3
....................    tris_ICSPDAT = (state & 0x02) ? 1 : 0; //state[1] = Data direction 
1AE2:  BTFSS  x59.1
1AE4:  BRA    1AEA
1AE6:  MOVLW  01
1AE8:  BRA    1AEC
1AEA:  MOVLW  00
1AEC:  BCF    F92.2
1AEE:  BTFSC  FE8.0
1AF0:  BSF    F92.2
1AF2:  MOVLB  0
1AF4:  GOTO   2130 (RETURN)
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "scripts.h" 
.................... #ifndef SCRIPTS_H 
.................... #define SCRIPTS_H 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /******                       SCRIPT COMMANDS                           ******/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... #define READ_N_BITS           0xD5     //arguments : 1 = number of bits 
.................... #define READ_BYTE             0xD6     //arguments : 0 
.................... #define VISI24                0xD7     //arguments : 0 
.................... #define NOP24                 0xD8     //arguments : 0 
.................... #define COREINST24            0xD9     //arguments : 3 = low byte, mid byte, upper byte 
.................... #define COREINST18            0xDA     //arguments : 2 = low byte, upper byte 
.................... #define POP_DOWNLOAD_BUFFER   0xDB     //arguments : 0 
.................... #define READ_ICSP_STATES      0xDC     //arguments : 0 
.................... #define LOOP_BUFFER           0xDD     //arguments : 1 = index offset to loop to  
.................... #define WRITE_SFR             0xDE     //arguments : 2 = 1 -> lower byte of SFR addr, 2 -> data to be written 
.................... #define READ_SFR              0xDF     //arguments : 1 = lower byte of SFR addr 
.................... #define EXIT_SCRIPT           0xE0     //arguments : 0 
.................... #define GOTO_IDX              0xE1     //arguments : 1 = script command index to go to 
.................... #define IF_GT_GOTO            0xE2     //arguments : 2 = 1->byte to compare with head of DATA_Out_Buffer, 2->signed idx to branch to 
.................... #define IF_EQ_GOTO            0xE3     //arguments : 2 = 1->byte to compare with head of DATA_Out_Buffer, 2->signed idx to branch to 
.................... #define SHORT_DELAY           0xE4     //arguments : 1 = duration 
.................... #define LONG_DELAY            0xE5     //arguments : 1 = duration 
.................... #define LOOP                  0xE6     //arguments : 2 = 1 -> index offset, 2 -> iterations 
.................... #define SHIFT_BITS_IN_CMD     0xE7     //arguments : 1 = number of bits 
.................... #define SHIFT_BITS_IN_BUFFER  0xE8     //arguments : 1 = number of bits 
.................... #define SHIFT_BITS_OUT_BUFFER 0xE9     //arguments : 1 = number of bits to shift out 
.................... #define SHIFT_BITS_OUT_CMD    0xEA     //arguments : 2 = 1 -> number of bits to shift out, 2-> output byte 
.................... #define SHIFT_BYTE_IN         0xEB     //arguments : 0 
.................... #define SHIFT_BYTE_IN_BUFFER  0xEC     //arguments : 0 
.................... #define SHIFT_BYTE_OUT_BUFFER 0xED     //arguments : 0 
.................... #define SHIFT_BYTE_OUT        0xEE     //arguments : 1 = byte to be shifted out 
.................... #define SET_ICSP_PINS_CMD     0xEF     //arguments : 1 = pin states 
.................... #define MCLR_TGT_GND_OFF      0xF0     //arguments : 0 
.................... #define MCLR_TGT_GND_ON       0xF1     //arguments : 0 
.................... #define VPP_PWM_OFF           0xF2     //arguments : 0 
.................... #define VPP_PWM_ON            0xF3     //arguments : 0 
.................... #define VPP_ON_CMD            0xF4     //arguments : 0 
.................... #define VPP_OFF               0xF5     //arguments : 0 
.................... #define VDD_GND_ON            0xF6     //arguments : 0 
.................... #define VDD_GND_OFF           0xF7     //arguments : 0 
.................... #define VDD_ON                0xF8     //arguments : 0 
.................... #define VDD_OFF               0xF9     //arguments : 0 
....................  
....................  
....................  
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /******                        ACTUAL SCRIPTS                           ******/ 
.................... /******             Starting address in ROM is 0x006000 (Block 3)       ******/ 
.................... /******              PIC18F2550 Programming Specifications, P:9         ******/ 
.................... /******                      Number Of Scripts = 5                      ******/ 
.................... /******                     Total Size = 159 Bytes                      ******/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
.................... /*****************************************************************************/ 
....................  
....................  
....................  
.................... /*********** ProgEntry PIC24 ***************/ 
.................... /***           Address = 0x6000          ***/ 
.................... /***           Length = 30               ***/ 
.................... #rom int8 0x6000 = {VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0x17, VPP_OFF, MCLR_TGT_GND_ON, SHORT_DELAY, 0x2F, SHIFT_BYTE_OUT, 0xB2, SHIFT_BYTE_OUT, 0xC2, SHIFT_BYTE_OUT, 0x12, SHIFT_BYTE_OUT, 0x8A, MCLR_TGT_GND_OFF, VPP_ON_CMD, LONG_DELAY, 0x09, SHIFT_BITS_OUT_CMD, 0x05, 0} 
....................   
....................  
.................... /***********  ProgExit PIC24 ***************/ 
.................... /***           Address = 0x603C          ***/ 
.................... /***           Length = 7                ***/ 
.................... #rom  int8 0x603C = {VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_OFF, SET_ICSP_PINS_CMD, 0x03, LONG_DELAY, 0x0A} 
....................  
....................  
.................... /*********** READ_DEV_ID PIC24 *************/ 
.................... /***           Address = 0x604A          ***/ 
.................... /***           Length = 50               ***/ 
.................... #rom int8 0x604A = {COREINST24, 0x00, 0x02, 0x04, COREINST24, 0x00, 0x02, 0x04, NOP24, NOP24, NOP24, COREINST24, 0x00, 0x02, 0x04, NOP24, COREINST24, 0xF0, 0x0F, 0x20, COREINST24, 0x90, 0x01, 0x88, COREINST24, 0x06, 0x00, 0x20, NOP24, NOP24, COREINST24, 0x07, 0x00, 0x20, COREINST24, 0xB6, 0x0B, 0xBA, NOP24, NOP24, COREINST24, 0x20, 0x3C, 0x88, NOP24, VISI24, NOP24, LOOP, 0x0D, 0x01}  
....................  
....................  
.................... /********** ProgEntry PIC18F_J_ ************/ 
.................... /***           Address = 0x60AE          ***/ 
.................... /***           Length = 27               ***/ 
.................... #rom int8 0x60AE = {VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, VPP_ON_CMD,  SHORT_DELAY, 0x17, VPP_OFF, MCLR_TGT_GND_ON, SHORT_DELAY, 0x2F, SHIFT_BYTE_OUT, 0xB2, SHIFT_BYTE_OUT, 0xC2, SHIFT_BYTE_OUT, 0x12, SHIFT_BYTE_OUT, 0x0A, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0xEB} 
....................  
....................  
....................  
.................... /********** READ_DEV_ID PIC18F_ ************/ 
.................... /***           Address = 0x60E4          ***/ 
.................... /***           Length = 45               ***/ 
.................... #rom int8 0x60E4 = {COREINST18, 0x2A, 0x0E, COREINST18, 0x15, 0x09, COREINST18, 0x00, 0x00, COREINST18, 0xF8, 0x6E, COREINST18, 0xAA, 0x0E, COREINST18, 0x55, 0x0A, COREINST18, 0xF7, 0x6E, COREINST18, 0xAA, 0x0E, COREINST18, 0x54, 0x0A, COREINST18, 0x00, 0x00, COREINST18, 0xF6, 0x6E, SHIFT_BITS_OUT_CMD, 0x04, 0x09, SHIFT_BYTE_OUT, 0x00, SHIFT_BYTE_IN_BUFFER, COREINST18, 0xFF, 0xFF, LOOP, 0x09, 0x01} 
....................  
....................  
.................... /********** ProgEntry PIC18F_K_ ************/ 
.................... /***           Address = 0x613E          ***/ 
.................... /***           Length = 17               ***/ 
.................... #rom int8 0x613E = {VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0x7F, MCLR_TGT_GND_ON, VPP_OFF, VPP_ON_CMD, MCLR_TGT_GND_OFF, LONG_DELAY, 0x13} 
....................  
....................  
.................... /********* ProgEntryVpp PIC18F_K_ **********/ 
.................... /***           Address = 0x6160          ***/ 
.................... /***           Length = 21               ***/ 
.................... #rom int8 0x6160 = {VPP_OFF, MCLR_TGT_GND_ON, VDD_OFF, VDD_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, VPP_ON_CMD, VDD_GND_OFF, VDD_ON, SHORT_DELAY, 0x7F, MCLR_TGT_GND_ON, VPP_OFF, VPP_ON_CMD, MCLR_TGT_GND_OFF, LONG_DELAY, 0x13}  
....................  
....................  
.................... /********** ReadDevId MR/1.8V Min **********/ 
.................... /***           Address = 0x18A          ***/ 
.................... /***              Length = 18            ***/ 
.................... #rom int8 0x618A = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x03, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x04, SHIFT_BYTE_IN_BUFFER, SHIFT_BYTE_IN_BUFFER} 
....................  
....................  
.................... /********** ProgEntry PIC18F_K80 ***********/ 
.................... /***           Address = 0x61AE          ***/ 
.................... /***              Length = 27            ***/ 
.................... #rom int8 0x61AE = {VPP_OFF, MCLR_TGT_GND_ON, VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, MCLR_TGT_GND_OFF, VPP_ON_CMD, VPP_ON_CMD, SHORT_DELAY, 0x2F, SHIFT_BYTE_OUT, 0xB2, SHIFT_BYTE_OUT, 0xC2, SHIFT_BYTE_OUT, 0x12, SHIFT_BYTE_OUT, 0x0A, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0xEB} 
....................  
....................  
.................... /********** ProgEntryVpp PIC18F  ***********/ 
.................... /***           Address = 0x61E4          ***/ 
.................... /***              Length = 21            ***/ 
.................... #rom int8 0x61E4 = {VPP_OFF, MCLR_TGT_GND_ON, VDD_OFF, VDD_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x3C, VDD_GND_OFF, VDD_ON, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0x7F, MCLR_TGT_GND_ON, VPP_OFF, VPP_ON_CMD, MCLR_TGT_GND_OFF, LONG_DELAY, 0x13} 
....................  
....................  
....................  
.................... /*********** ProgEntryVpp PIC32 ************/ 
.................... /***           Address = 0x60C5          ***/ 
.................... /***    Length = MISSING COMMANDS        ***/ 
.................... //#rom int8 0x60C5 = {VPP_OFF, MCLR_TGT_GND_ON, VPP_PWM_ON, SET_ICSP_PINS_CMD, 0x00, LONG_DELAY, 0x14, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0x17, VPP_OFF, MCLR_TGT_GND_ON, SHORT_DELAY, 0x2F, SHIFT_BYTE_OUT, 0xB2, SHIFT_BYTE_OUT, 0xC2, SHIFT_BYTE_OUT, 0x12, SHIFT_BYTE_OUT, 0x0A, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0xEB, SET_ICSP_PINS_CMD, 0x02}    
....................  
....................  
.................... /**********       CHIP_ERASE     ***********/ 
.................... /***           Address = 0x61F9          ***/ 
.................... /***              Length = 12            ***/ 
.................... #rom int8 0x61F9 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 00,  SHIFT_BYTE_OUT, 00, SHIFT_BITS_OUT_CMD, 0x06, 0x1F, LONG_DELAY, 0x02} 
....................  
.................... /**********   PROG_MEM_ADDR_SET  ***********/ 
.................... /***           Address = 0x6205          ***/ 
.................... /***              Length = 16            ***/ 
.................... #rom int8 0x6205 = {VPP_OFF, MCLR_TGT_GND_ON, SHORT_DELAY, 0x5E, MCLR_TGT_GND_OFF, VPP_ON_CMD, SHORT_DELAY, 0x2F, GOTO_IDX, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP_BUFFER, 0x03, POP_DOWNLOAD_BUFFER} 
....................  
.................... /**********     PROG_MEM_READ    ***********/ 
.................... /***           Address = 0x6220          ***/ 
.................... /***              Length = 11            ***/ 
.................... #rom int8 0x6220 = {SHIFT_BITS_OUT_CMD, 0x06, 0x04, SHIFT_BYTE_IN_BUFFER, SHIFT_BYTE_IN_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 8, 0x1F} 
....................  
....................  
.................... /**********         EE_RD        ***********/ 
.................... /***           Address = 0x622E          ***/ 
.................... /***              Length = 11            ***/ 
.................... #rom int8 0x622E = {SHIFT_BITS_OUT_CMD, 0x06, 0x05, SHIFT_BYTE_IN_BUFFER, SHIFT_BYTE_IN_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 8, 0x1F} 
....................  
....................  
.................... /**********       USER_ID_RD     ***********/ 
.................... /***           Address = 0x6239          ***/ 
.................... /***              Length = 18            ***/ 
.................... #rom int8 0x6239 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BITS_OUT_CMD, 0x06, 0x04, SHIFT_BYTE_IN_BUFFER, SHIFT_BYTE_IN_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x08, 0x03} 
....................  
.................... /**********       CONFIG_RD      ***********/ 
.................... /***           Address = 0x624B          ***/ 
.................... /***              Length = 18            ***/ 
.................... #rom int8 0x624B = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BYTE_OUT, 0x00, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x03, 0x06, SHIFT_BITS_OUT_CMD, 0x06, 0x04, SHIFT_BYTE_IN_BUFFER, SHIFT_BYTE_IN_BUFFER} 
....................  
....................  
.................... /**********       PROG_MEM_WR    ***********/ 
.................... /***           Address = 0x6260          ***/ 
.................... /***              Length = 29            ***/ 
.................... #rom int8 0x6260 = {SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x08, 0x06, SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x2F, SHIFT_BITS_OUT_CMD, 0x06, 0x17, SHORT_DELAY, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x06} 
....................  
....................  
.................... /**********       EE_MEM_WR      ***********/ 
.................... /***           Address = 0x6280          ***/ 
.................... /***              Length = 24            ***/ 
.................... #rom int8 0x6280 = {SHIFT_BITS_OUT_CMD, 0x06, 0x03, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x08, SHORT_DELAY, 0xBC, SHIFT_BITS_OUT_CMD, 0x06, 0x17, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x5E, SHIFT_BITS_OUT_CMD, 0x06, 0x17, SHIFT_BITS_OUT_CMD, 0x06, 0x06} 
....................  
....................  
.................... /**********       USER_ID_WR     ***********/ 
.................... /***           Address = 0x6298          ***/ 
.................... /***              Length = 28            ***/ 
.................... #rom int8 0x6298 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x5E, SHIFT_BITS_OUT_CMD, 0x06, 0x17, SHORT_DELAY, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x12, 0x03} 
....................  
....................  
.................... /**********       CONFIG_WR      ***********/ 
.................... /***           Address = 0x62B4          ***/ 
.................... /***              Length = 23            ***/ 
.................... #rom int8 0x62B4 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 3, 6, SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x08, SHORT_DELAY, 0x8D}  
....................  
....................  
.................... /**********    PROG_MEM_ERASE    ***********/ 
.................... /***           Address = 0x62CB          ***/ 
.................... /***              Length = 18            ***/ 
.................... #rom int8 0x62CB = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x09, SHIFT_BITS_OUT_CMD, 0x06, 0x08, SHORT_DELAY, 0x5E, SHIFT_BITS_OUT_CMD, 0x06, 0x17} 
....................  
....................  
.................... /**********     EE_MEM_ERASE     ***********/ 
.................... /***           Address = 0x62E0          ***/ 
.................... /***              Length = 11            ***/ 
.................... #rom int8 0x62E0 = {SHIFT_BITS_OUT_CMD, 0x06, 0x0B, SHIFT_BITS_OUT_CMD, 0x06, 0x08, SHORT_DELAY, 0x5E, SHIFT_BITS_OUT_CMD, 0x06, 0x17} 
....................  
....................  
.................... /**********      CHIP_ERASE      ***********/ 
.................... /***           Address = 0x62EB          ***/ 
.................... /***              Length = 12            ***/ 
.................... #rom int8 0x62EB = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x09, LONG_DELAY, 0x02} 
....................  
....................  
.................... /**********      PROG_MEM_WR     ***********/ 
.................... /***           Address = 0x62F7          ***/ 
.................... /***              Length = 18            ***/ 
.................... #rom int8 0x62F7 = {SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x76, SHIFT_BITS_OUT_CMD, 0x06, 0x0A, SHORT_DELAY, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x06}  
....................  
....................  
.................... /**********       USER_ID_WR     ***********/ 
.................... /***           Address = 0x6309          ***/ 
.................... /***              Length = 28            ***/ 
.................... #rom int8 0x6309 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x76, SHIFT_BITS_OUT_CMD, 0x06, 0x0A, SHORT_DELAY, 0x05, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x12, 0x03} 
....................  
....................  
.................... /**********       CONFIG_WR      ***********/ 
.................... /***           Address = 0x6326          ***/ 
.................... /***              Length = 21            ***/ 
.................... #rom int8 0x6326 = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x03, 0x06, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x76, SHIFT_BITS_OUT_CMD, 0x06, 0x0A, SHORT_DELAY, 0x05} 
....................  
....................  
.................... /**********       OSCCAL_WR      ***********/ 
.................... /***           Address = 0x633C          ***/ 
.................... /***              Length = 33            ***/ 
.................... #rom int8 0x633C = {SHIFT_BITS_OUT_CMD, 0x06, 0x00, SHIFT_BYTE_OUT, 0, SHIFT_BYTE_OUT, 0, SHIFT_BITS_OUT_CMD, 0x06, 0x06, LOOP, 0x03, 0x07, SHIFT_BITS_OUT_CMD, 0x06, 0x09, LONG_DELAY, 0x02, SHIFT_BITS_OUT_CMD, 0x06, 0x02, SHIFT_BYTE_OUT_BUFFER, SHIFT_BYTE_OUT_BUFFER, SHIFT_BITS_OUT_CMD, 0x06, 0x18, SHORT_DELAY, 0x76, SHIFT_BITS_OUT_CMD, 0x06, 0x0A, SHORT_DELAY, 0x05} 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #ENDIF 
....................  
....................  
....................  
.................... #include "isr.c" 
.................... #INT_TIMER1 
.................... void timer1_overflow (void) 
.................... { 
....................    //Reset Timer1 
....................    TMR1H = 0xFA; 
*
0FD6:  MOVLW  FA
0FD8:  MOVWF  FCF
....................    TMR1L = 0x38; 
0FDA:  MOVLW  38
0FDC:  MOVWF  FCE
....................    //Check if Vdd values is less than threshold  
....................    if ((!Vdd_TGT_P_pin) && (ADRESH < VddVppLevels.VddThreshold)) 
0FDE:  MOVF   F81,F
0FE0:  BZ    0FE6
0FE2:  MOVLW  00
0FE4:  BRA    0FE8
0FE6:  MOVLW  01
0FE8:  MOVLB  2
0FEA:  MOVF   x31,W
0FEC:  SUBWF  FC4,W
0FEE:  BC    1000
....................    { 
....................       if (VddVppLevels.VddErrCount == 12) 
0FF0:  MOVF   x33,W
0FF2:  SUBLW  0C
0FF4:  BNZ   0FFC
....................       { 
....................          Vpp_ON = 0;      // shut off VPP  
0FF6:  BCF    F8A.2
....................          Vdd_TGT_P = 1;   // shut off VDD 
0FF8:  BSF    F8A.4
....................       } 
0FFA:  BRA    0FFE
....................       else 
....................       { 
....................          VddVppLevels.VddErrCount++;         // Increment on error. 
0FFC:  INCF   x33,F
....................       }  
....................    } 
0FFE:  BRA    1002
....................    else 
....................    { 
....................       VddVppLevels.VddErrCount = 0;            // Reset on good voltage 
1000:  CLRF   x33
....................    } 
....................     
....................    ADIF = 0; // clear ADC interrupt 
1002:  BCF    F9E.6
....................    ADCON0 = 0x01; //  set ADC channel for VPP_TGT_FB and turn on ADC (ADCON0) 
1004:  MOVLW  01
1006:  MOVWF  FC2
....................    ADIE = 1;      // enable ADC interrupt 
1008:  BSF    F9D.6
....................    GO = 1;  // start Conversion; 
100A:  BSF    FC2.1
.................... } 
....................  
100C:  BCF    F9E.0
100E:  MOVLB  0
1010:  GOTO   006C
.................... #INT_AD 
.................... void adc_complete (void)  
.................... { 
....................    if (CCP2CON == 0x0C) // check if PWM mode is ON 
1014:  MOVF   FBA,W
1016:  SUBLW  0C
1018:  BNZ   1032
....................    { 
....................       if (ADRESH > Vpp_PWM.UppperLimit) 
101A:  MOVF   FC4,W
101C:  MOVLB  2
101E:  SUBWF  x38,W
1020:  BC    1024
....................       { 
....................          CCPR2L = 0x00; 
1022:  CLRF   FBB
....................       } 
....................       if (ADRESH < Vpp_PWM.LowerLimit) 
1024:  MOVF   x39,W
1026:  SUBWF  FC4,W
1028:  BC    102E
....................       { 
....................          CCPR2L = Vpp_PWM.CCPRSetPoint; 
102A:  MOVFF  237,FBB
....................       } 
....................       if ((Vpp_ON_pin == 1) && (ADRESH < VddVppLevels.VppThreshold))  // Don't check for short if not on 
....................       { 
....................          if (VddVppLevels.VppErrCount == 12) 
....................          { 
....................             Vpp_ON = 0;      // shut off VPP  
....................             Vdd_TGT_P = 1; 
....................          } 
....................          else 
....................          { 
....................             VddVppLevels.VppErrCount++;         // Increment on error. 
....................          }  
....................       } 
....................       else 
....................       { 
....................          VddVppLevels.VppErrCount = 0;            // Reset on good voltage 
102E:  CLRF   x34
1030:  MOVLB  0
....................       } 
....................        
....................    } 
....................    ADCON0 = 0x05; //set ADC channel for VDD_TGT_FB and turn on ADC (ADCON0) 
1032:  MOVLW  05
1034:  MOVWF  FC2
....................    ADIE = 0;      // disable ADC interrupt 
1036:  BCF    F9D.6
....................    GO = 1; 
1038:  BSF    FC2.1
103A:  BCF    F9E.6
103C:  GOTO   006C
.................... } 
....................  
....................  
.................... void main() 
*
286C:  CLRF   FF8
286E:  BCF    FD0.7
2870:  BSF    07.7
2872:  MOVF   FC1,W
2874:  ANDLW  C0
2876:  IORLW  0F
2878:  MOVWF  FC1
287A:  MOVLW  07
287C:  MOVWF  FB4
287E:  MOVLW  02
2880:  MOVWF  28
2882:  MOVLW  70
2884:  MOVWF  27
2886:  MOVLW  01
2888:  MOVLB  2
288A:  MOVWF  x71
288C:  MOVLW  8C
288E:  MOVWF  x70
2890:  MOVLW  05
2892:  MOVWF  x73
2894:  MOVLW  10
2896:  MOVWF  x72
2898:  MOVLW  02
289A:  MOVLB  5
289C:  MOVWF  x11
289E:  MOVLW  EC
28A0:  MOVWF  x10
28A2:  CLRF   x13
28A4:  CLRF   x12
28A6:  MOVLB  0
28A8:  CLRF   1B
28AA:  MOVLW  04
28AC:  MOVWF  1C
28AE:  MOVLW  0C
28B0:  MOVWF  1D
.................... { 
....................    pgm_init(); 
28B2:  GOTO   107A
....................    usb_init_cs();  
28B6:  GOTO   1146
....................     
....................    while(TRUE) 
....................    { 
....................       usb_task(); 
28BA:  GOTO   116E
....................       if(usb_enumerated()){// If the device has been enumerated by the PC 
28BE:  GOTO   1192
28C2:  MOVF   01,F
28C4:  BZ    28D8
....................          if(usb_kbhit(1)) 
28C6:  MOVLW  01
28C8:  MOVLB  2
28CA:  MOVWF  x3E
28CC:  MOVLB  0
28CE:  GOTO   119A
28D2:  MOVF   01,F
28D4:  BZ    28D8
....................          {                  // If endpoint1 has data in its receive buffer 
....................             Process_Input (); 
28D6:  BRA    2482
....................          } 
....................        } 
28D8:  BRA    28BA
....................    } 
.................... } 
....................  
28DA:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CE2C   PLL5 CPUDIV2 USBDIV HSPLL FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
006000: F5 F1 F3 EF 00 E5 14 F0 F4 E4 17 F5 F1 E4 2F EE 
006010: B2 EE C2 EE 12 EE 8A F0 F4 E5 09 EA 05 00 

00603C: F5 F1 F2 EF 03 E5 0A 

00604A: D9 00 02 04 D9 00 02 04 D8 D8 D8 D9 00 02 04 D8 
00605A: D9 F0 0F 20 D9 90 01 88 D9 06 00 20 D8 D8 D9 07 
00606A: 00 20 D9 B6 0B BA D8 D8 D9 20 3C 88 D8 D7 D8 E6 
00607A: 0D 01 

0060AE: F5 F1 F3 EF 00 E5 14 F0 F4 E4 17 F5 F1 E4 2F EE 
0060BE: B2 EE C2 EE 12 EE 0A F0 F4 E4 EB 

0060E4: DA 2A 0E DA 15 09 DA 00 00 DA F8 6E DA AA 0E DA 
0060F4: 55 0A DA F7 6E DA AA 0E DA 54 0A DA 00 00 DA F6 
006104: 6E EA 04 09 EE 00 EC DA FF FF E6 09 01 

00613E: F5 F1 F3 EF 00 E5 14 F0 F4 E4 7F F1 F5 F4 F0 E5 
00614E: 13 

006160: F5 F1 F9 F6 F3 EF 00 E5 14 F0 F4 F7 F8 E4 7F F1 
006170: F5 F4 F0 E5 13 

00618A: EA 06 00 EE 00 EE 00 EA 06 06 E6 03 05 EA 06 04 
00619A: EC EC 

0061AE: F5 F1 F5 F1 F3 EF 00 E5 14 F0 F0 F4 F4 E4 2F EE 
0061BE: B2 EE C2 EE 12 EE 0A F0 F4 E4 EB 

0061E4: F5 F1 F9 F6 F3 EF 00 E5 3C F7 F8 F0 F4 E4 7F F1 
0061F4: F5 F4 F0 E5 13 EA 06 00 EE 00 EE 00 EA 06 1F E5 
006204: 02 F5 F1 E4 5E F0 F4 E4 2F E1 05 EA 06 06 DD 03 
006214: DB 

006220: EA 06 04 EC EC EA 06 06 E6 08 1F 

00622E: EA 06 05 EC EC EA 06 06 E6 08 1F EA 06 00 EE 00 
00623E: EE 00 EA 06 04 EC EC EA 06 06 E6 08 03 EA 06 00 
00624E: EE 00 EE 00 EA 06 06 E6 03 06 EA 06 04 EC EC 

006260: EA 06 02 ED ED EA 06 06 E6 08 06 EA 06 02 ED ED 
006270: EA 06 18 E4 2F EA 06 17 E4 05 EA 06 06 

006280: EA 06 03 ED ED EA 06 08 E4 BC EA 06 17 EA 06 18 
006290: E4 5E EA 06 17 EA 06 06 EA 06 00 EE 00 EE 00 EA 
0062A0: 06 02 ED ED EA 06 18 E4 5E EA 06 17 E4 05 EA 06 
0062B0: 06 E6 12 03 EA 06 00 EE 00 EE 00 EA 06 06 E6 03 
0062C0: 06 EA 06 02 ED ED EA 06 08 E4 8D EA 06 00 EE 00 
0062D0: EE 00 EA 06 09 EA 06 08 E4 5E EA 06 17 

0062E0: EA 06 0B EA 06 08 E4 5E EA 06 17 EA 06 00 EE 00 
0062F0: EE 00 EA 06 09 E5 02 EA 06 02 ED ED EA 06 18 E4 
006300: 76 EA 06 0A E4 05 EA 06 06 EA 06 00 EE 00 EE 00 
006310: EA 06 02 ED ED EA 06 18 E4 76 EA 06 0A E4 05 EA 
006320: 06 06 E6 12 03 

006326: EA 06 00 ED ED EA 06 06 E6 03 06 EA 06 18 E4 76 
006336: EA 06 0A E4 05 

00633C: EA 06 00 EE 00 EE 00 EA 06 06 E6 03 07 EA 06 09 
00634C: E5 02 EA 06 02 ED ED EA 06 18 E4 76 EA 06 0A E4 
00635C: 05 
