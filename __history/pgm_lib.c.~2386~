/* This file contains all programmer functions */
#include "pgm_lib.h"  
#include <stdlibm.h> // Necessary for malloc 

volatile unsigned int8 data_in[64];  // USB packet is copied here when received 
unsigned int8 i;     // Used to iterate through data_in in Process_Input()

unsigned int8 data_out[64]; // Data is read from here by USB

//unsigned int8 icsp_rate; // Period in multiples of 1uS 
unsigned int8 icsp_pins_states; 

unsigned int8 DATA_Out_Buffer[128]; // Data is stored here by scripts and will be copied to data_out to be read by USB
struct 
{
   unsigned int8 rd_idx;
   unsigned int8 wr_idx;
   unsigned int8 nbr_bytes; // Number of bytes in DATA_On_Buffer
} DOB_mngnt;   // DATA_Out_Buffer Management

unsigned int8 DATA_In_Buffer[256];
/*
struct 
{
   unsigned int8 rd_idx;
   unsigned int8 wr_idx;
   unsigned int8 nbr_bytes; // Number of bytes in DATA_In_Buffer
} DIB_mngnt;   // DATA_In_Buffer Management 
*/
unsigned int8 dib_wr_idx = 0;
unsigned int8 dib_rd_idx = 0;
unsigned int8 dib_nbr_bytes = 0;

struct {
   unsigned int8   VddThreshold;   // error detect threshold
   unsigned int8   VppThreshold;   // error detect threshold
    unsigned int8   VddErrCount;
    unsigned int8   VppErrCount;
    unsigned int16    BlinkClount;    // counter for blinking Busy on VDD/VPP error
} VddVppLevels;

struct {
   unsigned int8 CCPRSetPoint;
   unsigned int8 UppperLimit;
   unsigned int8 LowerLimit;   
} Vpp_PWM;

struct {
    unsigned int16    adc_calfactor;      // CalibratedResult = (ADRES * adc_calfactor) >> 8
    signed int8       vdd_offset;
    unsigned int8   vdd_calfactor;      // Calibrated CCP value = (((CCP >> 6) + vdd_offset) * vdd_calfactor) >> 7
} VoltageCalibration; 


void pgm_init()
{
   // Configure HIGH/LOW-VOLTAGE DETECT CONTROL REGISTER, See datasheet page 281
   HLVDCON = 0x13;
   
   // Clear High/Low-Voltage Detect Interrupt Flag bit, Datasheet page 105
   HLVDIF  = 0;
   
   // Enable High/Low-Voltage Detect Interrupt, datasheet page 107
   HLVDIE = 0;
   
   // Set pin A0 as input, datasheet page 113
   TRISA0 = 1;
   
   // Set pin A1 as input
   TRISA1 = 1;
   
   // Only AN0 and AN1 analog inputs, DS page 262
   ADCON1 = 0b00001101; 
   
   // A/D Conversion Clock Select bits, clock derived from A/D RC oscillator, DS page 263
   ADCON2 = 0x03;
   
   // Pin A2 set as input and initialized to 0
   tris_ICSPDAT = 1;
   ICSPDAT_in = 0;
   ICSPDAT_out = 0;
   
   // Pin A3 set as input and initialized to 0
   tris_ICSPCLK = 1;
   ICSPCLK_in = 0;
   ICSPCLK_out = 0;
   
   // Pin A4 set as input and initialized to 0
   tris_AUX = 1;
   AUX = 0;
   
   // Pin A5 Set as output and initialized to 0
   MCLR_TGT = 0;
   tris_MCLR_TGT = 0;
   
   // Initialize half-bridge N-gate off
   Vdd_TGT_N = 0;
   tris_Vdd_TGT_N =0;
   
   // Initialize half-bridge P-gate off
   Vdd_TGT_P = 1;
   tris_Vdd_TGT_P = 0;
   
   // Pin B5 set as input, initialize to 1
   tris_PROG_SWITCH = 1;
   PROG_SWITCH_pin = 1;
   
   // PORTB pull-ups are enabled by individual port latch value, DS page 102
   RBPU = 0;
   
   // Initialize Vpp to off, set pin B2 set as output
   Vpp_ON = 0;
   tris_Vpp_ON = 0;
   
   // Initialize BUSY_LED pin to 0, and set it as output
   BUSY_LED = 0;
   tris_BUSY_LED = 0;
   
   // Initialize C1 (CCP2) to 0 and set it as output 
   Vpp_PUMP = 0;
   tris_Vpp_PUMP = 0;
   
   // Initialize C2 (CCP1) to 0 and set it as output 
   Vdd_TGT_ADJ = 0;
   tris_Vdd_TGT_ADJ = 0;
   
   // Timer0 off, 16-bit timer, internal clock, prescaler not assigned
   T0CON = 0x08;
   
   //Timer1 is used by VddVpp voltage monitoring interrupt or UART RX.
   
   // Configure Timer2 (used by CCP1 and CCP2)
   // 1:1 Postscale, 1:1 Prescale, Timer2 on
   T2CON = 0x04;
   
   // Set PWM freq to 150kHz
   PR2 = PWM_150kHz;
   
   // Select PWM mode, datasheet page 151
   CCP1CON = 0x0C;
   
   // Set VDD Duty cycle
   CCPR1L = Vdd_3V3;
   
   // Initialize CCP2 for VPP 
   Vpp_PWM.CCPRSetPoint = 64;
   Vpp_PWM.UppperLimit = 62;  
   Vpp_PWM.LowerLimit = 60;
   VddVppLevels.VddThreshold = 126;   
   VddVppLevels.VppThreshold = 45;
   
   // Comparators off, DS page 271
   CMCON = 0x07;
   
   // Voltage Reference off, DS page 277
   CVRCON = 0;
   
   // Set up Interrupts
   // Enable Peripheral Interrupt Enable
   PEIE = 1;
   
   // Enable global interrupts
   GIE = 1;
   
   // Start VDD and VPP voltage monitoring
   adc_vpp_vdd_control (1);
   
   // Initialize buffers
   DOB_mngnt.nbr_bytes = 0; 
   DOB_mngnt.wr_idx    = 0;
   DOB_mngnt.rd_idx    = 0;
   dib_nbr_bytes = 0; 
   dib_wr_idx    = 0;
   dib_rd_idx    = 0;
   
   // Set default values for ADC voltage calibration
   VoltageCalibration.adc_calfactor = 0x0100;  
   VoltageCalibration.vdd_offset = 0x00;
   VoltageCalibration.vdd_calfactor = 0x80;
}

void Process_Input ()
{  
   //BUSY_LED = 1;
   i = 1;   // Initialize index
   usb_get_packet(1, data_in, 64);
   //usb_flush_out(1, USB_DTS_TOGGLE);
   unsigned int8 packet_length = data_in[0];
   unsigned int8 offset;
   unsigned int8 *script_buffer;
   unsigned int16 address;
   
   while (i <= packet_length)
   {
      offset = data_in[i];
      if (offset < 0x01) break; //unknown instruction
      
      offset -= 0x01;
      offset *= 2;
      offset += 8;
      
      #ASM
         MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU 
         ADDWF    offset, W
         BTFSC    C
         INCF     PCLATH
         MOVWF    PCL
         BRA      GET_VERSION_LBL 
         BRA      TOGGLE_LED_LBL
         BRA      SET_VDD_LBL
         BRA      SET_VPP_LBL
         BRA      READ_VOLTAGES_LBL
         BRA      RUN_ROM_SCRIPT_LBL
         BRA      CLEAR_DOWN_BUFF_LBL
         BRA      WRITE_DOWN_BUFF_LBL
         BRA      CLEAR_UP_BUFF_LBL
         BRA      UPLOAD_LBL
         BRA      RUN_USB_SCRIPT_LBL
         BRA      RUN_ROM_SCRIIPT_ITR_LBL
      #ENDASM 
      
GET_VERSION_LBL:
      get_version_number();
      break;
      
TOGGLE_LED_LBL:
      BUSY_LED ^= 1;
      break;
      
SET_VDD_LBL:
      /*
       * data_in[i+1] = CCPL
       * data_in[i+2] = CCPH
       * data_in[i+3] = VDDLim
      */
      // CCPH:CCPL = ((Vdd * 32) + 10.5) << 6, << 6 because CCP1 (holds the duty cycle, resolution is 10 bits) and is left justified, the 2 LSB bits are located in CCP1CON.
      // Duty_cycle = vdd * 32+ 10.5
      cal_and_set_ccp (data_in[i+2], data_in[i+1]);
      VddVppLevels.VddThreshold = cal_threshold_byte (data_in[i+3]);
      i += 4;
      continue;
      
SET_VPP_LBL:
      /*
       * data_in[i+1] = CCPR2L, this is the duty cycle, generally = 0x40;
       * data_in[i+2] = VPPADC = Vpp * 18.61          Vpp is the desired voltage.
       * data_in[i+3] = VPPlim = Vfault * 18.61 
      */
      Vpp_PWM.CCPRSetPoint = data_in[i+1];
      Vpp_PWM.UppperLimit = cal_threshold_byte(data_in[i+2])+1; //VPP upper limit = VPP + 1
      Vpp_PWM.LowerLimit = Vpp_PWM.UppperLimit - 2;        //VPP lower limit = VPP - 1
      VddVppLevels.VppThreshold = cal_threshold_byte(data_in[i+3]); //calibrate VPPLim 
      i += 4;
      continue;
      
READ_VOLTAGES_LBL:
      send_voltages ();
      i++;
      continue;
      
RUN_ROM_SCRIPT_LBL:
      /*
       * data_in[i+1] = Script's length
       * data_in[i+2] = Least significant byte of the script's address
       * data_in[i+3] = Most significant byte of the script's address
      */
      script_buffer = malloc (data_in[i+1]);
      address =  ((data_in[i+3] * 0x100) + data_in[i+2]);
      read_program_memory(address, script_buffer, data_in[i+1]); 
      execute_script(data_in[i+1], script_buffer);
      free(script_buffer);
      i += 4;
      continue;

CLEAR_DOWN_BUFF_LBL: 
      dib_rd_idx = 0;
      dib_wr_idx = 0;
      dib_nbr_bytes = 0;
      i++;
      continue;

WRITE_DOWN_BUFF_LBL:
      i++;
      write_down_buff();
      continue;

CLEAR_UP_BUFF_LBL:
      DOB_mngnt.rd_idx = 0;
      DOB_mngnt.wr_idx = 0;
      DOB_mngnt.nbr_bytes = 0;
      i++;
      continue;
      
UPLOAD_LBL:
      send_data_usb();
      i++;
      continue;
      
RUN_USB_SCRIPT_LBL:
      // data_in[i+1] = number of commands
      // data_in[i+2] = start of commands 
      execute_script(data_in[i+1],&data_in[i+2]);
      i += data_in[i+1] + 2;
      continue;

RUN_ROM_SCRIIPT_ITR_LBL:
      /*
       * data_in[i+1] = Script's length
       * data_in[i+2] = Least significant byte of the script's address
       * data_in[i+3] = Most significant byte of the script's address
       * data_in[i+4] = number of iterations
      */
      script_buffer = malloc (data_in[i+1]);
      address =  ((data_in[i+3] * 0x100) + data_in[i+2]);
      unsigned int8 iterations = data_in[i+4];
      read_program_memory(address, script_buffer, data_in[i+1]); 
      do 
      {
         execute_script(data_in[i+1], script_buffer);
         iterations--;
      } while (iterations > 0);
      free(script_buffer);
      i += 5;
      continue;
   }
   //BUSY_LED = 0;
}

void get_version_number (void)
{
   data_out [0] = 3;  // Length of data to be sent, this byte not included
   data_out [1] = 0;
   data_out [2] = 2;    
   data_out [3] = 22;
   usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE);
}

// Used in setVDD
void cal_and_set_ccp (unsigned int8 ccph, unsigned int8 ccpl)
{
   signed int16 ccp1 = (ccph * 0x100) + ccpl; //ccp1 = ccph:ccpl
   unsigned int8 tempCal;
   ccp1 >>= 6; //
   ccp1 += VoltageCalibration.vdd_offset;
   ccp1 *= VoltageCalibration.vdd_calfactor;     //default is 0x80 = 0b10000000
   ccp1 >>= 1;                                   //shift by one to get the original >> 6 after multiplying by 0x80
   tempCal = (unsigned int8) (ccp1 >> 8);
   CCPR1L = tempCal;
   //The following is to place the lower 2 bits of the duty cycle resolution in bits 4 and 5 of CCP1CON
   CCP1 &= 0xFF;
   tempCal = (unsigned int8) (CCP1 >> 2);

   CCP1CON = (CCP1CON & 0xCF) | tempCal;
   /*
   #ASM 
   MOVLW 0xCF
   ANDWF CCP1CON,W
   IORLW tempCal
   MOVWF CCP1CON
   #ENDASM
   */
}

unsigned int8 cal_threshold_byte(unsigned int8 voltageVal)
{
    unsigned int8 inverse_cal = (0x0200 - VoltageCalibration.adc_calfactor); //adc_calfactor by default is 0x0100 so, 0x0200 - adc_calfactor is the same as 1 / adc_calfactor 
    inverse_cal *= voltageVal;
    inverse_cal >>= 8;

    return (unsigned int8) inverse_cal;
} // See cal_adc_word(unsigned int rawValue)

// TODO: create a function to store cal and offset values in eeprom and a function to read them

// Read VDD and VPP voltages, used to detect self-powered targets 
void send_voltages (void)
{
   unsigned int16 adc_result;
   data_out [0] = 5;   //Length of data to be sent
   adc_vpp_vdd_control (0); //Stop ADC, VPP and VDD
   get_adc (0x04); //CH1_VDD
   adc_result = (ADRESH * 0x100) + ADRESL;
   adc_result = cal_adc_word(adc_result);
   data_out [1] = (unsigned int8) adc_result;
   data_out [2] = (unsigned int8) (adc_result >> 8);
   
   get_adc (0x00); //CH0_VPP
   adc_result = (ADRESH * 0x100) + ADRESL;
   adc_result = cal_adc_word(adc_result);
   data_out [3] = (unsigned int8) adc_result;
   data_out [4] = (unsigned int8) (adc_result >> 8);
   
   usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE);
   adc_vpp_vdd_control (1); // Start ADC, VPP and VDD
}

void adc_vpp_vdd_control (int1 state)
{
   if (state)
   {//Activate modules
      VddVppLevels.VddErrCount = 0;
      VddVppLevels.VppErrCount = 0;
      #ASM
         MOVLW 0x80
         MOVWF T1CON            // Rd16 1:1 prescale off Fosc/4
         MOVLW 0xFA
         MOVWF TMR1H            //// 65536-1480 = about 125us
         MOVLW 0x38
         MOVWF TMR1L
         
         BCF   TMR1IF           // Clear int flag
         BSF   TMR1IE           // Enable int
         BSF   TMR1ON           // Start timer
         
         BCF   ADIF  // Clear A/D Converter Interrupt Flag
         BCF   ADIE  // Disable ADC int
         MOVLW 0x26
         MOVWF ADCON2           //ADCON2 setting for voltage monitoring
         MOVLW 0x05
         MOVWF ADCON0           // Set ADC channel for VDD_TGT_FB and turn on ADC (ADCON0)
         BSF   GO                // Start conversion.
      #ENDASM
   }
   else 
   { //Deactivate modules
      #ASM
         BCF   TMR1IE   // Disable Timer1 interrupt
         BCF   TMR1ON   // Stop Timer1
         
         CLRF  ADCON0   // Shut off ADC conversion in progress
         
         BCF   ADIF  // Clear A/D Converter Interrupt Flag
         BCF   ADIE  // Disable ADC int
      #ENDASM
   }
}

void get_adc (unsigned int8 channel)
{
   ADCON0 = (channel + 1);     // Set channel. ADD 1 to enable A/D Converter (bit 0) page 261
   GO = 1;                    // Begin conversion  
   while (ADCON0 & 0x02);       // Wait while GO is still set
}

unsigned int16 cal_adc_word(unsigned int16 Val)
{

    unsigned int32 cal_value = Val;
    cal_value *= VoltageCalibration.adc_calfactor;
    cal_value >>= 8;
    if (cal_value > 0xFFFF)
        cal_value = 0xFFFF;

    return (unsigned int16) cal_value;
}

void write_down_buff()
{
   unsigned int8 len = data_in[i++]; // Get length of data
   if (((unsigned int16)(len + dib_nbr_bytes)) > 255) {return; } 
   
   for (unsigned int8 k = 0; k < len; k++)
   {
      DATA_In_Buffer[dib_wr_idx++] = data_in[i++];
      
      //if (dib_wr_idx > 255)       // Just let dib_wr_idx overflow 
      //   dib_wr_idx = 0;
   }
   dib_nbr_bytes = dib_nbr_bytes + len;
   
   for (int8 s = 0; s < 20; s++)
   {
   
      if (DATA_In_Buffer[s] == 0x3F)
      {
         
      }
   }
}


void send_data_usb()
{
   unsigned int8 len = DOB_mngnt.nbr_bytes; // Get number of bytes in DATA_Out_Buffer
   
   len = len < 63 ? len : 63; // First byte in usb report will be used to store length, the other 63 used for data
   data_out[0] = len;
   for (int8 m = 1; m <= len; m++)
   {
      data_out[m] = data_out_buffer[DOB_mngnt.rd_idx++];
      if (DOB_mngnt.rd_idx > 127)
            DOB_mngnt.rd_idx = 0;
   }
   
   DOB_mngnt.nbr_bytes -= len;
   usb_put_packet(1, data_out, 64, USB_DTS_TOGGLE);
}


void execute_script(unsigned int8 scrpt_len, unsigned int8 *script_location)
{
   unsigned int8 si = 0; // Initialize script index to 0
   unsigned int8 offset, loop_buff_idx, temp;
   int1 first_iteration_LB = 1; // Used by LOOPBUFFER cmd
   int1 first_iteration_L = 1; // Used by LOOP cmd
   unsigned int16 nbr_iterations, loop_count, loop_idx;
   unsigned int8 *SFR_ptr; // Used by the WRITE_SFR and READ_SFR commands
   
   #ASM
      BCF INT0IE // Disable Timer0 interrupt
      MOVLW 0x07
      MOVWF T0CON // 16-bit timer, 1:256 prescale
   #ENDASM
   
   if (scrpt_len == 0) return; 
   while (si < scrpt_len)
   {
      offset = *(script_location + si); 
      offset -= 0xD5;  // Consider 0xD5 to be the minimum for now
      offset *= 2;     
      offset += 8;     
      #ASM
         MOVF     PCL, W  //Save current PCL value in Wreg, by reading PCL, PCH and PCU will be loaded into PCLATH and PCLATU 
         ADDWF    offset, W
         BTFSC    C
         INCF     PCLATH
         MOVWF    PCL
         BRA      READ_N_BITS_LBL  //Read N bits from target and store them in DATA_Out_Buffer, (May not be used)
         BRA      READ_BYTE_LBL
         BRA      VISI24_LBL
         BRA      NOP24_LBL
         BRA      COREINST24_LBL
         BRA      COREINST18_LBL
         BRA      POP_DOWNLOAD_BUFFER_LBL
         BRA      READ_ICSP_STATES_LBL
         BRA      LOOP_BUFFER_LBL
         BRA      WRITE_SFR_LBL
         BRA      READ_SFR_LBL
         BRA      EXIT_SCRIPT_LBL
         BRA      GOTO_IDX_LBL
         BRA      IF_GT_GOTO_LBL
         BRA      IF_EQ_GOTO_LBL
         BRA      SHORT_DELAY_LBL
         BRA      LONG_DELAY_LBL
         BRA      LOOP_LBL
         //BRA      SET_ICSP_RATELbl      //Used for HCS encoders, not MCUs
         BRA      SHIFT_BITS_IN_LBL
         BRA      SHIFT_BITS_IN_BUFFER_LBL
         BRA      SHIFT_BITS_OUT_BUFFER_LBL
         BRA      SHIFT_BITS_OUT_LBL
         BRA      SHIFT_BYTE_IN_LBL
         BRA      SHIFT_BYTE_IN_BUFFER_LBL
         BRA      SHIFT_BYTE_OUT_BUFFER_LBL
         BRA      SHIFT_BYTE_OUT_LBL
         BRA      SET_ICSP_PINS_LBL
         BRA      MCLR_TGT_GND_OFF_LBL
         BRA      MCLR_TGT_GND_ON_LBL
         BRA      VPP_PWM_OFF_LBL
         BRA      VPP_PWM_ON_LBL
         BRA      VPP_ON_LBL
         BRA      VPP_OFF_LBL
         BRA      VDD_GND_ON_LBL
         BRA      VDD_GND_OFF_LBL
         BRA      VDD_ON_LBL
         BRA      VDD_OFF_LBL
      #ENDASM 
READ_N_BITS_LBL:
      write_upload_buff(read_n_bits_24(*(script_location + ++si)));//WriteUploadBuffer(readN_Bits(*(script_location + si + 1)));
      si++;
      continue;
   
READ_BYTE_LBL:
      write_upload_buff(read_n_bits_24(8));
      si++;
      continue;

VISI24_LBL:
      shift_bits_out_ICSP(1, 4);
      shift_bits_out_ICSP(0, 8);
      write_upload_buff(read_n_bits_24(8));
      write_upload_buff(read_n_bits_24(8));
      si++;
      continue;
   
NOP24_LBL:
      shift_bits_out_ICSP(0, 8);
      shift_bits_out_ICSP(0, 8);
      shift_bits_out_ICSP(0, 8);
      shift_bits_out_ICSP(0, 8);
      si++;
      continue;
   
COREINST24_LBL:
      shift_bits_out_ICSP(0, 4);
      shift_bits_out_ICSP(*(script_location + ++si), 8);
      shift_bits_out_ICSP(*(script_location + ++si), 8);
      shift_bits_out_ICSP(*(script_location + ++si), 8);
      si++;
      continue;

COREINST18_LBL:
      shift_bits_out_ICSP(0, 4);
      shift_bits_out_ICSP(*(script_location + ++si), 8);
      shift_bits_out_ICSP(*(script_location + ++si), 8);
      si++;
      continue;
   
POP_DOWNLOAD_BUFFER_LBL:
      pop_down_buff ();
      si++;
      continue;
   
READ_ICSP_STATES_LBL:
      write_upload_buff(getICSP_States());
      si++;
      continue;
   
LOOP_BUFFER_LBL:  // Will loop through a number of script commands, argument is the number if bytes to loop through 
      if (!first_iteration_LB)
      {
         nbr_iterations--;
         if (nbr_iterations == 0)   // No iterations 
         {
            first_iteration_LB = 1; // Number of iterations endded for the current run 
            si ++;
            continue;
         }
         si = first_iteration_LB;   // Still iterating
         continue;
      }
      loop_buff_idx = si - *(script_location + ++si); // Always loops to the instruction before it, except in the script n 255 in the original Firmware
      //scrpt_rd_idx -= 2;      // The instruction before LOOPBUFFER has 2 args
      nbr_iterations = (unsigned int16) pop_down_buff ();   // Low byte
      nbr_iterations += (256  *  pop_down_buff ());         // Upper byte
      if (nbr_iterations == 0)   // No iterations 
      {
         si++; // Advance to next command 
         continue;
      }
      first_iteration_LB = 0;
      si = loop_buff_idx;  
      continue;
      
WRITE_SFR_LBL:
      SFR_ptr = (unsigned int8 *) 0x0F00 + *(script_location + ++si);
      *SFR_ptr = *(script_location + ++si);
      si++;
      continue;

READ_SFR_LBL:
      SFR_ptr = (unsigned int8 *) 0x0F00 + *(script_location + ++si);
      write_upload_buff(*SFR_ptr);
      si++;
      continue;
      
EXIT_SCRIPT_LBL:
      si = scrpt_len;
      continue;
      
GOTO_IDX_LBL:
      si = *(script_location + ++si);
      continue;
      
IF_GT_GOTO_LBL: //if last loaded byte in DATA_Out_Buffer is greater than arg[1], execution will branch to offset specified by arg[2] 
      temp = DATA_Out_Buffer[DOB_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written
      if (temp > *(script_location + ++si))
      {
         si += (signed int8) *(script_location + ++si);
      }
      else 
      {
         si++;
      }
      continue;
      
IF_EQ_GOTO_LBL: //if last loaded byte in DATA_Out_Buffer is equal than arg[1], execution will branch to offset specified by arg[2] 
      temp = DATA_Out_Buffer[DOB_mngnt.wr_idx - 1]; //get last byte written to DATA_Out_Buffer, - 1 because DOM_mngnt.wr_idx is always post-incremented, and points to the next location to be written
      if (temp == *(script_location + ++si))
      {
         si += (signed int8) *(script_location + ++si);
      }
      else 
      {
         si++;
      }
      continue;
      
SHORT_DELAY_LBL:      //causes a delay of : duration * 21.3us, NOTE : 0 = 255
      delay_short (*(script_location + ++si));
      si++;
      continue;
      
LONG_DELAY_LBL:
      delay_long (*(script_location + ++si));
      si++;
      continue;
      
LOOP_LBL:
      if (!first_iteration_L)
      {
         loop_count--;
         if (loop_count == 0)
         {
            first_iteration_L = 1;
            si += 3; // LOOP command + 2 args
            continue;
         }
         si = loop_idx;
         continue;
      }
      first_iteration_L = 0;
      loop_idx = si - *(script_location + si + 1);
      loop_count = *(script_location + si + 2);
      si = loop_idx;
      continue;
 
//SET_ICSP_RATELbl:
//      icsp_rate = *(script_location + ++si);
//      si++;
//      continue;

SHIFT_BITS_IN_LBL:
      shift_bits_in(*(script_location + ++si));
      si++;
      continue;
      
SHIFT_BITS_IN_BUFFER_LBL:
      write_upload_buff(shift_bits_in(*(script_location + ++si)));
      si++;
      continue;
      
SHIFT_BITS_OUT_BUFFER_LBL: // Shift bits located in DATA_In_Buffer out 
      shift_bits_out (pop_down_buff(), *(script_location + ++si));
      si++;
      continue;
      
SHIFT_BITS_OUT_LBL:
      shift_bits_out (*(script_location + si + 2), *(script_location + si + 1));
      si += 3;
      continue;
      
SHIFT_BYTE_IN_LBL:
      shift_bits_in(8);
      si++;
      continue;
      
SHIFT_BYTE_IN_BUFFER_LBL:
      write_upload_buff (shift_bits_in(8));
      si++;
      continue;
      
SHIFT_BYTE_OUT_BUFFER_LBL:
      shift_bits_out (pop_down_buff(), 8);
      si++;
      continue;
      
SHIFT_BYTE_OUT_LBL:
      shift_bits_out (*(script_location + ++si), 8);
      si++;
      continue;
      
SET_ICSP_PINS_LBL:
      icsp_pins_states = *(script_location + si + 1);
      set_icsp_pins(*(script_location + ++si));
      si += 1;
      continue;
      
MCLR_TGT_GND_OFF_LBL:
      #ASM
         BCF   MCLR_TGT
      #ENDASM
      si++;
      continue;

MCLR_TGT_GND_ON_LBL:
      #ASM
         BSF   MCLR_TGT
      #ENDASM
      si++;
      continue;
      
VPP_PWM_OFF_LBL:
      CCP2CON = 0x00; // Turn off PWM, DS page 143
      Vpp_PUMP = 0;
      si++;
      continue;
      
VPP_PWM_ON_LBL:
      CCP2CON = 0x0C; // PWM mode, DS page 143
      si++;
      continue;
      
VPP_ON_LBL:
      #ASM
         BSF   Vpp_ON
      #ENDASM
      si++; 
      continue;
 
 VPP_OFF_LBL:
      #ASM
         BCF   Vpp_ON
      #ENDASM
      si++; 
      continue;
      
VDD_GND_ON_LBL:
      #ASM
         BSF   Vdd_TGT_N
      #ENDASM
      si++; 
      continue;
      
VDD_GND_OFF_LBL:
      #ASM
         BCF   Vdd_TGT_N
      #ENDASM
      si++; 
      continue;
 
VDD_ON_LBL:
      #ASM
         BCF   Vdd_TGT_P
      #ENDASM
      si++; 
      continue;
      
VDD_OFF_LBL:
      #ASM
         BSF   Vdd_TGT_P
      #ENDASM
      si++; 
      continue;
      
   } //end of while loop
}


/* 
 * FOR PIC24F
 * Reads N bits and copy them in the upload buffer 
 * **read_n_bits_24(n)**
*/
unsigned int8 read_n_bits_24(unsigned int8 numberOfBits)
{
   unsigned int8 bitsBuff = 0; //Bits are shifted in here 
   //unsigned int8 iteration = numberOfBits;
   #ASM
      BSF      tris_ICSPDAT  //Set PGD pin as input
      //MOVLW 0x01        //this will be used to set the bits 
   READBITSLOOP:
      BTFSC    ICSPDAT_in  //read PGD pin
      BSF      bitsBuff,0      //If PGD was high, set the corresponding bit starting from LSB
      BSF      ICSPCLK_out       //Clock rising edge
      //RLNCF    W,W               //Rotate W left, (no carry)
      NOP
      NOP
      NOP
      BCF      ICSPCLK_out    //Clock falling edge 
      NOP
      RRNCF    bitsBuff, f    //Rotate right (no carry)
      DECFSZ   numberOfBits, f
      BRA      READBITSLOOP
   #ENDASM
   return bitsBuff;
}


void write_upload_buff(unsigned int8 wr_byte)
{
   if (DOB_mngnt.nbr_bytes > 127) 
   {
      return;
   }
   
   DATA_Out_Buffer[DOB_mngnt.wr_idx] = wr_byte;
   
   DOB_mngnt.wr_idx++;
   if (DOB_mngnt.wr_idx > 127)
      DOB_mngnt.wr_idx = 0;
   DOB_mngnt.nbr_bytes++;
}

/*
 * Note: ICSP pins must be set to outputs
 * PIC24F
 *
*/
void shift_bits_out_ICSP (unsigned int8 char_to_be_shifted, unsigned int8 number_of_bits)
{
   char temp_char = char_to_be_shifted;
   char num_bits = number_of_bits;
   
   #ASM
      BITS_OUT_LOOP:
         BTFSS    temp_char,0
         BCF      ICSPDAT_out    //If LSB of char_to_be_shifted is 0, clear PGD pin
         BTFSC    temp_char,0
         BCF      ICSPDAT_out
         NOP
         BSF      ICSPCLK_out    //Clock rising edge 
         NOP
         BCF      ICSPCLK_out
         RRNCF    temp_char,f
         DECFSZ   num_bits
         BRA      BITS_OUT_LOOP
   #ENDASM
}

unsigned int8 getICSP_States()
{
   unsigned int8 state = 0;
   if (ICSPDAT_in == 1)    // ICSPDAT_in = PORTA.2
      state |= 0x02;
   if (ICSPCLK_in == 1)    // ICSPCLK_in = PORTA.3
      state |= 0x01;
      
   return state;
}

// Return a byte from the DATA_In_Buffer
unsigned int8 pop_down_buff ()
{
   unsigned int8 popped; 
   /*
   if (dib_nbr_bytes == 0) 
   {
      return 0;
   }
   */
   
   popped = DATA_In_Buffer[dib_rd_idx];
   dib_rd_idx++;
   dib_nbr_bytes--;
   
   if (popped == 0x3F)
   {
      BUSY_LED = 1;
   }
   
   return popped;
}

// Each Timer0's lower byte increment is 21.3 uS, there's a delay of 12 uS between script commands, it is ignored here
void delay_short (unsigned int8 duration)
{
   #ASM
      BCF   TMR0IF   // Clear timer0 interrupt flag
      MOVLW    0xFF     // So that the timer will overflow when TMR0L does
      MOVWF    TMR0H
   #ENDASM
   TMR0L = 0 - (duration + 1);
   TMR0ON = 1; // Start Timer0, DS page 127
   while (TMR0IF == 0); //Wait for overflow flag to be set
   TMR0ON = 0; // Stop Timer0
   
}

// Each Timer0's upper byte increment is 5.46mS ((1 / 48M) *256 * 256)
void delay_long (unsigned int8 duration)
{
   TMR0IF = 0;
   TMR0H = 0 - duration;
   TMR0L = 0;
   TMR0ON = 1; //Start Timer0
   while (TMR0IF == 0); //Wait for overflow flag to be set
   TMR0IF = 0; // Clear interrupt flag, page 101
   TMR0ON = 0; //Stop Timer0
}

unsigned int8 shift_bits_in (unsigned int8 number_of_bits)
{
   unsigned int8 num_bits = number_of_bits;
   unsigned int8 bits_buff = 0; // Bits are shifted in here 
   tris_ICSPDAT = 1;             // Set PGD pin as input
   #ASM
   READ_BITS_LOOP:
      BSF      LATA, 3  // ICSPCLK_out       // Clock rising edge
      NOP
      NOP
      NOP
      BTFSC    PORTA, 2        // Read PGD pin
      BSF      bits_buff,0       // If PGD was high, set the corresponding bit starting from LSB
      BCF      LATA, 3       // Clock falling edge 
      NOP
      RRNCF    bits_buff, 1      // Rotate right (no carry)
      DECFSZ   num_bits, 1
      BRA      READ_BITS_LOOP 
   #ENDASM
   tris_ICSPDAT = 0; // PGD set as output
   //bits_buff >>= (8 - num_bits); // Right justified
   return bits_buff;
}

void shift_bits_out (unsigned int8  outb, unsigned int8 number_of_bits)
{
   unsigned int8 out_char = outb;
   unsigned int8  num_bits = number_of_bits;
   #ASM
      WRITE_BITS_LOOP:
         BTFSS    out_char,0
         BCF      ICSPDAT_out
         BTFSC    out_char,0
         BSF      ICSPDAT_out
         NOP
         BSF      ICSPCLK_out // Clock rising edge
         NOP
         BCF      ICSPCLK_out  //Clock falling edge 
         RRNCF    out_char, 1
         DECFSZ   num_bits, 1
         BRA      WRITE_BITS_LOOP
   #ENDASM
}

void set_icsp_pins(int8 state)
{
   /*
   BUSY_LED = 0; 
   if (state & 0x04)
      ICSPCLK_out = 1;   
   else
      ICSPCLK_out = 0;
   // set ISCDAT latch
   if (state & 0x08)
   {
      ICSPDAT_out = 1;  
   }
   else
      ICSPDAT_out = 0;

   // set ISCPCLK direction
   if (state & 0x01)
      tris_ICSPCLK = 1;   
   else
      tris_ICSPCLK = 0;
   // set ISCDAT direction
   if (state & 0x02)
      tris_ICSPDAT = 1;   
   else
      tris_ICSPDAT = 0;
   */
   ICSPCLK_out  = (state & 0x04) ? 1 : 0; //state[3] = Clock state
   ICSPDAT_out  = (state & 0x08) ? 1 : 0; //state[4] = Data state
   tris_ICSPCLK = (state & 0x01) ? 1 : 0; //state[0] = Clock direction
   tris_ICSPDAT = (state & 0x02) ? 1 : 0; //state[1] = Data direction

}









