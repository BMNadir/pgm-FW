#IFNDEF PGM_LIB_H
#DEFINE PGM_LIB_H

//SFR Addresses 
#BYTE HLVDCON  = 0xFD2
#BYTE PIR2     = 0xFA1
#BYTE PIE2     = 0xFA0
#BYTE TRISA    = 0xF92
#BYTE ADCON1   = 0xFC1
#BYTE ADCON2   = 0xFC0
#BYTE PORTA    = 0xF80
#BYTE LATA     = 0xF89
#BYTE TRISB    = 0xF93
#BYTE LATB     = 0xF8A
#BYTE TRISC    = 0xF94
#BYTE LATC     = 0xF8B
#BYTE CCPR1L   = 0xFBE
#BYTE T0CON    = 0xFD5
#BYTE T2CON    = 0xFCA
#BYTE PR2      = 0xFCB
#BYTE CCP1CON  = 0xFBD
#BYTE CMCON    = 0xFB4
#BYTE CVRCON   = 0xFB5
#BYTE INTCON   = 0xFF2
#BYTE INTCON2  = 0xFF1
#BYTE PORTB    = 0xF81
#BYTE PCL      = 0xFF9
#BYTE PCLATH   = 0xFFA
//#BYTE WREG     = 0xFE8
#BYTE STATUS   = 0xFD8
#BYTE PIE1     = 0xF9D
#BYTE PIR1     = 0xF9E
#BYTE T1CON    = 0xFCD
#BYTE ADCON0   = 0xFC2
#BYTE TMR1H    = 0xFCF
#BYTE TMR1L    = 0xFCE
#BYTE ADRESH   = 0xFC4
#BYTE ADRESL   = 0xFC3
#BYTE TMR0H    = 0xFD7
#BYTE TMR0L    = 0xFD6
#BYTE CCP2CON  = 0xFBA


//STATUS Reg Bits //
#BIT C      = STATUS.0
#BIT DC     = STATUS.1
#BIT Z      = STATUS.2
#BIT OV     = STATUS.3
#BIT N      = STATUS.4


//  PORT A  //
#BIT tris_ICSPDAT   =  TRISA.2
#BIT ICSPDAT_in     =  PORTA.2
#BIT ICSPDAT_out    =  LATA.2
#BIT tris_ICSPCLK   =  TRISA.3   
#BIT ICSPCLK_in     =  PORTA.3
#BIT ICSPCLK_out    =  LATA.3
#BIT tris_AUX       =  TRISA.4    
//#define AUX_in              PORTA, 4, 1
#BIT AUX            =  LATA.4

#BIT tris_MCLR_TGT  =  TRISA.5   
#BIT MCLR_TGT       =  LATA.5
//#define MCLR_TGT_pin        PORTA, 5   

//  PORT B  //
#BIT tris_Vpp_ON      =   TRISB.2
#BIT Vpp_ON           =   LATB.2
//#define Vpp_ON_pin    PORTB, 2 

#BIT tris_Vdd_TGT_N =  TRISB.3    // RB3 Output
#BIT Vdd_TGT_N      =  LATB.3
//#define Vdd_TGT_N_pin      PORTB, 3 

#BIT tris_Vdd_TGT_P =  TRISB.4  // RB4 Output
#BIT Vdd_TGT_P      =  LATB.4
//#define Vdd_TGT_P_pin      PORTB, 4

#BIT tris_PROG_SWITCH =   TRISB.5   
#BIT PROG_SWITCH_pin  =   PORTB.5

//  PORT C  //
#BIT tris_BUSY_LED    =   TRISC.0
#BIT BUSY_LED         =   LATC.0
#BIT tris_Vpp_PUMP    =   TRISC.1   
#BIT Vpp_PUMP         =   LATC.1
#BIT tris_Vdd_TGT_ADJ =   TRISC.2
#BIT Vdd_TGT_ADJ      =   LATC.2
#BIT tris_WP          =  TRISC.6
#BIT WP               =  LATC.6


#BIT HLVDIF = PIR2.2
#BIT HLVDIE = PIE2.2
#BIT TRISA0 = TRISA.0
#BIT TRISA1 = TRISA.1

#BIT RBPU   = INTCON2.7

#BIT TMR0IF = INTCON.2
#BIT INT0IE = INTCON.4
#BIT TMR0IE = INTCON.5
#BIT PEIE   = INTCON.6
#BIT GIE    = INTCON.7


#BIT TMR0ON = T0CON.7


//PIE1 Bits
#BIT TMR1IE = PIE1.0
#BIT TMR2IE = PIE1.1
#BIT CCP1IE = PIE1.2
#BIT SSPIE  = PIE1.3
#BIT TXIE   = PIE1.4
#BIT RCIE   = PIE1.5
#BIT ADIE   = PIE1.6
#BIT SPPIE  = PIE1.7

//PIR1 Bits
#BIT TMR1IF = PIR1.0
#BIT TMR2IF = PIR1.1
#BIT CCP1IF = PIR1.2
#BIT SSPIF  = PIR1.3
#BIT TXIF   = PIR1.4
#BIT RCIF   = PIR1.5
#BIT ADIF   = PIR1.6
#BIT SPPIF  = PIR1.7

//T1CON Bits
#BIT TMR1ON = T1CON.0
#BIT TMR1CS = T1CON.1
#BIT T1SYNC = T1CON.2
#BIT T1OSCEN= T1CON.3
#BIT T1CKPS0= T1CON.4
#BIT T1CKPS1= T1CON.5
#BIT T1RUN  = T1CON.6
#BIT RD16   = T1CON.7

//ADCON0 Bits
#BIT GO     = ADCON0.1


//DEFINITIONS 
#define PWM_150kHz  79  

// PWM duty cycle for (CCPR1L register value)
#define Vdd_5V0     (192/4)         //  5.0V Vdd
#define Vdd_3V3     (116/4)         //  3.3V Vdd
#define Vdd_2V5     ( 88/4)         //  2.5V Vdd
#define Vdd_1V8     ( 64/4)         //  1.8V Vdd


//PGM Commands
#define GET_VERSION 0x01
#define SET_VDD 0x03
#define SET_VPP 0x04
#define READ_VOLTAGES 0x05
#define RUN_ROM_SCRIPT 0x06
#define DOWNLOAD_SCRIPT_ARGS 0x07

//Prototypes
void getVersionNumber (void);
void calAndSetCCP (unsigned int8 ccph, unsigned int8 ccpl);
unsigned int8 CalThresholdByte(unsigned int8 voltageVal);
void send_voltages (void);
void adc_vpp_vdd_control (int1 state);
void getADC (unsigned int8 channel);
unsigned int16 calADCWord(unsigned int16 Val);
void executeScript(unsigned int8 scrpt_len, unsigned int16 *scriptLocation);
unsigned int8 read_n_bits_24(unsigned int8 numberOfBits);
void write_upload_buff(unsigned int8 wrByte);
void shiftBitsOutICSP (unsigned int8 charToBeShifted, unsigned int8 numberOfBits);
//void downloadScriptArgs (void);
unsigned int8 getICSP_States(void);
unsigned int8 pop_down_buff (void);
void delay_short (unsigned int8 duration);
void delay_long (unsigned int8 duration);
unsigned int8 shift_bits_in (unsigned int8 number_of_bits);
void shift_bits_out (unsigned int8  outb, unsigned int8 number_of_bits);
void set_icsp_pins(unsigned int8 state); 
#ENDIF









