D G "__PCH__" 0 0 ""5.008""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""18-oct.-18""
D G "__TIME__" 0 0 ""19:34:43"" "Standard Header file for the PIC18F2550 device ////////////////"
c L "set_tris_a" 2 5 21 "FUNCTION"
v L "value" 2 36 "int8" `54 
f B "set_tris_a" 2 36 "void(int8 value)" `53 
v L "value" 2 37 "int8" `56 
f B "set_tris_b" 2 37 "void(int8 value)" `55 
v L "value" 2 38 "int8" `58 
f B "set_tris_c" 2 38 "void(int8 value)" `57 
v L "value" 2 39 "int8" `60 
f B "set_tris_e" 2 39 "void(int8 value)" `59 
f B "get_tris_a" 2 40 "int8()" `61 
f B "get_tris_b" 2 41 "int8()" `62 
f B "get_tris_c" 2 42 "int8()" `63 
f B "get_tris_e" 2 43 "int8()" `64 
v L "value" 2 44 "int8" `66 
f B "output_a" 2 44 "void(int8 value)" `65 
v L "value" 2 45 "int8" `68 
f B "output_b" 2 45 "void(int8 value)" `67 
v L "value" 2 46 "int8" `70 
f B "output_c" 2 46 "void(int8 value)" `69 
v L "value" 2 47 "int8" `72 
f B "output_e" 2 47 "void(int8 value)" `71 
f B "input_a" 2 48 "int8()" `73 
f B "input_b" 2 49 "int8()" `74 
f B "input_c" 2 50 "int8()" `75 
f B "input_e" 2 51 "int8()" `76 
f B "input_change_a" 2 52 "int8()" `77 
f B "input_change_b" 2 53 "int8()" `78 
f B "input_change_c" 2 54 "int8()" `79 
f B "input_change_e" 2 55 "int8()" `80 
v L "pin" 2 56 "int16" `82 
f B "input" 2 56 "int8(int16 pin)" `81 
v L "pin" 2 57 "int16" `84 
f B "input_state" 2 57 "int8(int16 pin)" `83 
v L "pin" 2 58 "int16" `86 
f B "output_low" 2 58 "void(int16 pin)" `85 
v L "pin" 2 59 "int16" `88 
f B "output_high" 2 59 "void(int16 pin)" `87 
v L "pin" 2 60 "int16" `90 
f B "output_toggle" 2 60 "void(int16 pin)" `89 
v L "pin" 2 61 "int16" `92 
v L "level" 2 61 "int8" `93 
f B "output_bit" 2 61 "void(int16 pin,int8 level)" `91 
v L "pin" 2 62 "int16" `95 
f B "output_float" 2 62 "void(int16 pin)" `94 
v L "pin" 2 63 "int16" `97 
f B "output_drive" 2 63 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 67 "31744"
d G "PIN_A1" 2 68 "31745"
d G "PIN_A2" 2 69 "31746"
d G "PIN_A3" 2 70 "31747"
d G "PIN_A4" 2 71 "31748"
d G "PIN_A5" 2 72 "31749"
d G "PIN_A6" 2 73 "31750"
d G "PIN_B0" 2 75 "31752"
d G "PIN_B1" 2 76 "31753"
d G "PIN_B2" 2 77 "31754"
d G "PIN_B3" 2 78 "31755"
d G "PIN_B4" 2 79 "31756"
d G "PIN_B5" 2 80 "31757"
d G "PIN_B6" 2 81 "31758"
d G "PIN_B7" 2 82 "31759"
d G "PIN_C0" 2 84 "31760"
d G "PIN_C1" 2 85 "31761"
d G "PIN_C2" 2 86 "31762"
d G "PIN_C4" 2 87 "31764"
d G "PIN_C5" 2 88 "31765"
d G "PIN_C6" 2 89 "31766"
d G "PIN_C7" 2 90 "31767"
d G "PIN_E3" 2 92 "31779"
d G "FALSE" 2 95 "0"
d G "TRUE" 2 96 "1"
d G "BYTE" 2 98 "int8"
d G "BOOLEAN" 2 99 "int1"
d G "getc" 2 101 "getch"
d G "fgetc" 2 102 "getch"
d G "getchar" 2 103 "getch"
d G "putc" 2 104 "putchar"
d G "fputc" 2 105 "putchar"
d G "fgets" 2 106 "gets"
d G "fputs" 2 107 "puts"
c L "output_drive" 2 5 3 "FUNCTION"
f B "restart_cause" 2 112 "int8()" `98 
f B "reset_cpu" 2 113 "void()" `99 
f B "sleep" 2 114 "void()" `100  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 116 "7"
d G "MCLR_FROM_SLEEP" 2 117 "11"
d G "MCLR_FROM_RUN" 2 118 "15"
d G "NORMAL_POWER_UP" 2 119 "12"
d G "BROWNOUT_RESTART" 2 120 "14"
d G "WDT_FROM_SLEEP" 2 121 "3"
d G "RESET_INSTRUCTION" 2 122 "0"
d G "SLEEP_FULL" 2 125 "0" "Default"
d G "SLEEP_IDLE" 2 126 "1" "Clock and peripherals don't stop"
c L "sleep" 2 5 5 "FUNCTION"
v L "mode" 2 133 "int8" `102 
f B "setup_timer_0" 2 133 "void(int8 mode)" `101 
v L "value" 2 134 "int16" `104 
f B "set_timer0" 2 134 "void(int16 value)" `103 
f B "get_timer0" 2 135 "int16()" `105 
v L "mode" 2 136 "int8" `107 
v L "prescaler" 2 136 "int8" `108 
f B "setup_counters" 2 136 "void(int8 mode,int8 prescaler)" `106 
v L "value" 2 137 "int16" `110 
f B "set_rtcc" 2 137 "void(int16 value)" `109 
f B "get_rtcc" 2 138 "int16()" `111  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 140 "0"
d G "T0_EXT_L_TO_H" 2 141 "32"
d G "T0_EXT_H_TO_L" 2 142 "48"
d G "T0_DIV_1" 2 144 "8"
d G "T0_DIV_2" 2 145 "0"
d G "T0_DIV_4" 2 146 "1"
d G "T0_DIV_8" 2 147 "2"
d G "T0_DIV_16" 2 148 "3"
d G "T0_DIV_32" 2 149 "4"
d G "T0_DIV_64" 2 150 "5"
d G "T0_DIV_128" 2 151 "6"
d G "T0_DIV_256" 2 152 "7"
d G "T0_OFF" 2 154 "0x80"
d G "T0_8_BIT" 2 156 "0x40"
d G "RTCC_INTERNAL" 2 158 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 159 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 160 "48"
d G "RTCC_DIV_1" 2 161 "8"
d G "RTCC_DIV_2" 2 162 "0"
d G "RTCC_DIV_4" 2 163 "1"
d G "RTCC_DIV_8" 2 164 "2"
d G "RTCC_DIV_16" 2 165 "3"
d G "RTCC_DIV_32" 2 166 "4"
d G "RTCC_DIV_64" 2 167 "5"
d G "RTCC_DIV_128" 2 168 "6"
d G "RTCC_DIV_256" 2 169 "7"
d G "RTCC_OFF" 2 170 "0x80"
d G "RTCC_8_BIT" 2 171 "0x40"
c L "get_rtcc" 2 5 8 "FUNCTION"
v L "mode" 2 182 "int16" `113 
f B "setup_wdt" 2 182 "void(int16 mode)" `112 
f B "restart_wdt" 2 183 "void()" `114  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 185 "0x100"
d G "WDT_OFF" 2 186 "0"
d G "WDT_4MS" 2 188 "0x300"
d G "WDT_8MS" 2 189 "0x500"
d G "WDT_16MS" 2 190 "0x700"
d G "WDT_32MS" 2 191 "0x900"
d G "WDT_64MS" 2 192 "0xB00"
d G "WDT_128MS" 2 193 "0xD00"
d G "WDT_256MS" 2 194 "0xF00"
d G "WDT_512MS" 2 195 "0x1100"
d G "WDT_1S" 2 196 "0x1300"
d G "WDT_2S" 2 197 "0x1500"
d G "WDT_4S" 2 198 "0x1700"
d G "WDT_8S" 2 199 "0x1900"
d G "WDT_16" 2 200 "0x1B00"
d G "WDT_32S" 2 201 "0x1D00"
d G "WDT_64S" 2 202 "0x1F00"
d G "WDT_128S" 2 203 "0x2100"
c L "restart_wdt" 2 5 3 "FUNCTION"
v L "mode" 2 209 "int16" `116 
f B "setup_timer_1" 2 209 "void(int16 mode)" `115 
f B "get_timer1" 2 210 "int16()" `117 
v L "value" 2 211 "int16" `119 
f B "set_timer1" 2 211 "void(int16 value)" `118  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 214 "0"
d G "T1_INTERNAL" 2 215 "0x85"
d G "T1_EXTERNAL" 2 216 "0x87"
d G "T1_EXTERNAL_SYNC" 2 217 "0x83"
d G "T1_CLK_OUT" 2 219 "8"
d G "T1_DIV_BY_1" 2 221 "0"
d G "T1_DIV_BY_2" 2 222 "0x10"
d G "T1_DIV_BY_4" 2 223 "0x20"
d G "T1_DIV_BY_8" 2 224 "0x30"
c L "set_timer1" 2 5 3 "FUNCTION"
v L "mode" 2 229 "int8" `121 
v L "period" 2 229 "int8" `122 
v L "postscale" 2 229 "int8" `123 
f B "setup_timer_2" 2 229 "void(int8 mode,int8 period,int8 postscale)" `120 
f B "get_timer2" 2 230 "int8()" `124 
v L "value" 2 231 "int8" `126 
f B "set_timer2" 2 231 "void(int8 value)" `125  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 233 "0"
d G "T2_DIV_BY_1" 2 234 "4"
d G "T2_DIV_BY_4" 2 235 "5"
d G "T2_DIV_BY_16" 2 236 "6"
c L "set_timer2" 2 5 3 "FUNCTION"
v L "mode" 2 241 "int16" `128 
f B "setup_timer_3" 2 241 "void(int16 mode)" `127 
f B "get_timer3" 2 242 "int16()" `129 
v L "value" 2 243 "int16" `131 
f B "set_timer3" 2 243 "void(int16 value)" `130  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 246 "0"
d G "T3_INTERNAL" 2 247 "0x85"
d G "T3_EXTERNAL" 2 248 "0x87"
d G "T3_EXTERNAL_SYNC" 2 249 "0x83"
d G "T3_DIV_BY_1" 2 251 "0"
d G "T3_DIV_BY_2" 2 252 "0x10"
d G "T3_DIV_BY_4" 2 253 "0x20"
d G "T3_DIV_BY_8" 2 254 "0x30"
c L "set_timer3" 2 5 4 "FUNCTION"
v L "mode" 2 260 "int32" `133 
f B "setup_ccp1" 2 260 "void(int32 mode)" `132 
v L "mode" 2 261 "int32" `135 
v L "pwm" 2 261 "int8" `136 
f G "setup_ccp1" 2 261 "void(int32 mode,int8 pwm)" `134 
v L "value" 2 262 "int16" `138 
f B "set_pwm1_duty" 2 262 "void(int16 value)" `137  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 264 "0"
d G "CCP_CAPTURE_FE" 2 265 "4"
d G "CCP_CAPTURE_RE" 2 266 "5"
d G "CCP_CAPTURE_DIV_4" 2 267 "6"
d G "CCP_CAPTURE_DIV_16" 2 268 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 269 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 270 "9"
d G "CCP_COMPARE_INT" 2 271 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 272 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 273 "0xB"
d G "CCP_PWM" 2 274 "0xC"
d G "CCP_PWM_PLUS_1" 2 275 "0x1c"
d G "CCP_PWM_PLUS_2" 2 276 "0x2c"
d G "CCP_PWM_PLUS_3" 2 277 "0x3c"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 283 "0x48"
d G "T3_CCP2" 2 284 "0x8"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
v L "mode" 2 288 "int32" `143 
f B "setup_ccp2" 2 288 "void(int32 mode)" `142 
v L "mode" 2 289 "int32" `145 
v L "pwm" 2 289 "int8" `146 
f G "setup_ccp2" 2 289 "void(int32 mode,int8 pwm)" `144 
v L "value" 2 290 "int16" `148 
f B "set_pwm2_duty" 2 290 "void(int16 value)" `147 
c L "set_pwm2_duty" 2 5 3 "FUNCTION"
v L "mode" 2 297 "int32" `153 
f B "setup_spi" 2 297 "void(int32 mode)" `152 
v L "value" 2 298 "int8" `155 
f B "spi_write" 2 298 "void(int8 value)" `154 
f B "spi_read" 2 299 "int8()" `156 
v L "value" 2 300 "int8" `158 
f G "spi_read" 2 300 "int8(int8 value)" `157 
f B "spi_data_in" 2 301 "int8()" `159  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 303 "0x00"
d G "SPI_MASTER" 2 304 "0x20"
d G "SPI_SLAVE" 2 305 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 306 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 307 "0x00"
d G "SPI_CLK_DIV_4" 2 308 "0x00"
d G "SPI_CLK_DIV_16" 2 309 "0x01"
d G "SPI_CLK_DIV_64" 2 310 "0x02"
d G "SPI_CLK_T2" 2 311 "0x03"
d G "SPI_SS_DISABLED" 2 312 "0x01"
d G "SPI_XMIT_L_TO_H" 2 314 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 315 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 317 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 318 "0x8000"
d G "SPI_L_TO_H" 2 321 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 322 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 5 2 "FUNCTION"
v L "baud" 2 326 "int32" `161 
f B "setup_uart" 2 326 "void(int32 baud)" `160 
v L "baud" 2 327 "int32" `163 
v L "stream" 2 327 "int8" `164 
f G "setup_uart" 2 327 "void(int32 baud,int8 stream)" `162 
v L "baud" 2 328 "int32" `166 
v L "stream" 2 328 "int8" `167 
v L "clock" 2 328 "int32" `168 
f G "setup_uart" 2 328 "void(int32 baud,int8 stream,int32 clock)" `165 
v L "baud" 2 329 "int32" `170 
f B "set_uart_speed" 2 329 "void(int32 baud)" `169 
v L "baud" 2 330 "int32" `172 
v L "stream" 2 330 "int8" `173 
f G "set_uart_speed" 2 330 "void(int32 baud,int8 stream)" `171 
v L "baud" 2 331 "int32" `175 
v L "stream" 2 331 "int8" `176 
v L "clock" 2 331 "int32" `177 
f G "set_uart_speed" 2 331 "void(int32 baud,int8 stream,int32 clock)" `174  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 335 "2"
d G "UART_DATA" 2 336 "4"
d G "UART_AUTODETECT" 2 337 "8"
d G "UART_AUTODETECT_NOWAIT" 2 338 "9"
d G "UART_WAKEUP_ON_RDA" 2 339 "10"
d G "UART_SEND_BREAK" 2 340 "13"
c L "set_uart_speed" 2 5 3 "FUNCTION"
v L "mode" 2 344 "int32" `179 
f B "setup_comparator" 2 344 "void(int32 mode)" `178  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 346 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 347 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 348 "0xbcf05"
d G "NC_NC_NC_NC" 2 349 "0x0ff07"
d G "A0_A3_A1_A2" 2 350 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 351 "0x9ef01"
d G "A0_VR_A1_VR" 2 352 "0x3ff06"
d G "A3_VR_A2_VR" 2 353 "0xcff0e"
d G "CP1_INVERT" 2 354 "0x0000010"
d G "CP2_INVERT" 2 355 "0x0000020"
c L "setup_comparator" 2 5 2 "FUNCTION"
v L "mode" 2 362 "int8" `183 
f B "setup_vref" 2 362 "void(int8 mode)" `182  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 364 "0xa0"
d G "VREF_HIGH" 2 365 "0x80"
d G "VREF_F5" 2 367 "0x40"
d G "VREF_COMP" 2 368 "0x10"
c L "setup_vref" 2 5 2 "FUNCTION"
v L "mode" 2 372 "int8" `185 
f B "setup_low_volt_detect" 2 372 "void(int8 mode)" `184  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 374 "0x1F"
d G "LVD_45" 2 375 "0x1E"
d G "LVD_42" 2 376 "0x1D"
d G "LVD_40" 2 377 "0x1C"
d G "LVD_38" 2 378 "0x1B"
d G "LVD_36" 2 379 "0x1A"
d G "LVD_35" 2 380 "0x19"
d G "LVD_33" 2 381 "0x18"
d G "LVD_30" 2 382 "0x17"
d G "LVD_28" 2 383 "0x16"
d G "LVD_27" 2 384 "0x15"
d G "LVD_25" 2 385 "0x14"
d G "LVD_24" 2 386 "0x13"
d G "LVD_23" 2 387 "0x12"
d G "LVD_22" 2 388 "0x11"
d G "LVD_21" 2 389 "0x10"
d G "LVD_TRIGGER_BELOW" 2 391 "0"
d G "LVD_TRIGGER_ABOVE" 2 392 "0x80"
c L "setup_low_volt_detect" 2 5 2 "FUNCTION"
v L "mode" 2 397 "int16" `187 
f B "setup_oscillator" 2 397 "int8(int16 mode)" `186 
v L "mode" 2 398 "int16" `189 
v L "tune" 2 398 "sint8" `190 
f G "setup_oscillator" 2 398 "int8(int16 mode,sint8 tune)" `188  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 401 "0"
d G "OSC_125KHZ" 2 402 "0x10"
d G "OSC_250KHZ" 2 403 "0x20"
d G "OSC_500KHZ" 2 404 "0x30"
d G "OSC_1MHZ" 2 405 "0x40"
d G "OSC_2MHZ" 2 406 "0x50"
d G "OSC_4MHZ" 2 407 "0x60"
d G "OSC_8MHZ" 2 408 "0x70"
d G "OSC_TIMER1" 2 410 "1"
d G "OSC_INTRC" 2 411 "2"
d G "OSC_NORMAL" 2 412 "0"
d G "OSC_IDLE_MODE" 2 414 "0x80"
d G "OSC_31250" 2 415 "0x8000"
d G "OSC_STATE_STABLE" 2 419 "4"
d G "OSC_STATE_EXT_RUNNING" 2 420 "8"
c L "setup_oscillator" 2 5 4 "FUNCTION"
v L "mode" 2 427 "int16" `192 
f B "setup_adc" 2 427 "void(int16 mode)" `191 
f B "read_adc" 2 428 "int8()" `193 
v L "mode" 2 429 "int8" `195 
f G "read_adc" 2 429 "int8(int8 mode)" `194 
f G "read_adc" 2 430 "int16()" `196 
v L "mode" 2 431 "int8" `198 
f G "read_adc" 2 431 "int16(int8 mode)" `197 
f B "adc_done" 2 432 "int8()" `199  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 434 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 435 "0x100"
d G "ADC_CLOCK_DIV_4" 2 436 "0x04"
d G "ADC_CLOCK_DIV_8" 2 437 "0x01"
d G "ADC_CLOCK_DIV_16" 2 438 "0x05"
d G "ADC_CLOCK_DIV_32" 2 439 "0x02"
d G "ADC_CLOCK_DIV_64" 2 440 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 441 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 443 "0x00"
d G "ADC_TAD_MUL_2" 2 444 "0x08"
d G "ADC_TAD_MUL_4" 2 445 "0x10"
d G "ADC_TAD_MUL_6" 2 446 "0x18"
d G "ADC_TAD_MUL_8" 2 447 "0x20"
d G "ADC_TAD_MUL_12" 2 448 "0x28"
d G "ADC_TAD_MUL_16" 2 449 "0x30"
d G "ADC_TAD_MUL_20" 2 450 "0x38"
c L "adc_done" 2 5 1 "FUNCTION"
v L "pins" 2 453 "int8" `201 
f B "setup_adc_ports" 2 453 "void(int8 pins)" `200 
v L "pins" 2 454 "int8" `203 
v L "reference" 2 454 "int8" `204 
f G "setup_adc_ports" 2 454 "void(int8 pins,int8 reference)" `202 
v L "channel" 2 455 "int8" `206 
f B "set_adc_channel" 2 455 "void(int8 channel)" `205  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 458 "0x0F" "None"
d G "ALL_ANALOG" 2 459 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 460 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 461 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 462 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 463 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 464 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 465 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 466 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 467 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 468 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 469 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 470 "0x0D" "A0 A1"
d G "AN0" 2 471 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 472 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 473 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 474 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 475 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 476 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 477 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 478 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 479 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 480 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 481 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 482 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 483 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 486 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 487 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 488 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 489 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 492 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 493 "1"
d G "ADC_READ_ONLY" 2 494 "6"
c L "set_adc_channel" 2 5 3 "FUNCTION"
v L "x" 2 500 "sint8" `208 
f B "abs" 2 500 "sint8(sint8 x)" `207 
v L "x" 2 501 "sint16" `210 
f G "abs" 2 501 "sint16(sint16 x)" `209 
v L "x" 2 502 "sint32" `212 
f G "abs" 2 502 "sint32(sint32 x)" `211 
v L "x" 2 503 "float" `214 
f G "abs" 2 503 "float(float x)" `213 
v L "??65535" 2 504 "int8" `216 
v L "??65535" 2 504 "int8" `217 
f B "_mul" 2 504 "int16(int8 ,int8 )" `215 
v L "??65535" 2 505 "sint8" `216 
v L "??65535" 2 505 "sint8" `220 
f G "_mul" 2 505 "sint16(sint8 ,sint8 )" `218 
v L "??65535" 2 506 "int16" `216 
v L "??65535" 2 506 "int16" `223 
f G "_mul" 2 506 "int32(int16 ,int16 )" `221 
v L "??65535" 2 507 "sint16" `216 
v L "??65535" 2 507 "sint16" `226 
f G "_mul" 2 507 "sint32(sint16 ,sint16 )" `224  "Memory Manipulation Prototypes:"
v L "bank" 2 510 "int8" `228 
v L "offset" 2 510 "int8" `229 
f B "read_bank" 2 510 "int8(int8 bank,int8 offset)" `227 
v L "bank" 2 511 "int8" `231 
v L "offset" 2 511 "int8" `232 
v L "value" 2 511 "int8" `233 
f B "write_bank" 2 511 "void(int8 bank,int8 offset,int8 value)" `230 
v L "dest" 2 512 "*int8" `235 
v L "src" 2 512 "*int8" `236 
f B "strcpy" 2 512 "void(*int8 dest,*int8 src)" `234 
v L "dest" 2 513 "*int8" `238 
v L "src" 2 513 "*int8" `239 
f B "strcopy" 2 513 "void(*int8 dest,*int8 src)" `237 
v L "destination" 2 514 "*int8" `241 
v L "value" 2 514 "int8" `242 
v L "num" 2 514 "int16" `243 
f B "memset" 2 514 "void(*int8 destination,int8 value,int16 num)" `240 
v L "destination" 2 515 "*int8" `245 
v L "source" 2 515 "*int8" `246 
v L "num" 2 515 "int16" `247 
f B "memcpy" 2 515 "void(*int8 destination,*int8 source,int16 num)" `244  "String Prototypes:"
v L "cvalue" 2 518 "int8" `249 
f B "toupper" 2 518 "int8(int8 cvalue)" `248 
v L "cvalue" 2 519 "int8" `251 
f B "tolower" 2 519 "int8(int8 cvalue)" `250 
v L "string" 2 520 "*int8" `253 
v L "cstring" 2 520 "*int8" `254 
f B "sprintf" 2 520 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `252  "Data Manipulators Prototypes:"
v L "address" 2 523 "*int8" `257 
v L "bytes" 2 523 "int8" `258 
v L "value" 2 523 "int8" `259 
f B "shift_left" 2 523 "int8(*int8 address,int8 bytes,int8 value)" `256 
v L "address" 2 524 "*int8" `261 
v L "bytes" 2 524 "int8" `262 
v L "value" 2 524 "int8" `263 
f B "shift_right" 2 524 "int8(*int8 address,int8 bytes,int8 value)" `260 
v L "address" 2 525 "*int8" `265 
v L "bytes" 2 525 "int8" `266 
f B "rotate_left" 2 525 "void(*int8 address,int8 bytes)" `264 
v L "address" 2 526 "*int8" `268 
v L "bytes" 2 526 "int8" `269 
f B "rotate_right" 2 526 "void(*int8 address,int8 bytes)" `267 
v L "value" 2 527 "int8" `271 
f B "swap" 2 527 "void(int8 value)" `270 
v L "var" 2 528 "int16" `273 
v L "offset" 2 528 "int8" `274 
f B "make8" 2 528 "int8(int16 var,int8 offset)" `272 
v L "var" 2 529 "int32" `273 
v L "offset" 2 529 "int8" `277 
f G "make8" 2 529 "int8(int32 var,int8 offset)" `275 
v L "varhigh" 2 530 "int8" `279 
v L "varlow" 2 530 "int8" `280 
f B "make16" 2 530 "int16(int8 varhigh,int8 varlow)" `278 
v L "var1" 2 531 "int16" `282 
f B "make32" 2 531 "int32(int16 var1)" `281 
v L "var1" 2 532 "int16" `284 
v L "var2" 2 532 "int16" `285 
f G "make32" 2 532 "int32(int16 var1,int16 var2)" `283 
v L "var1" 2 533 "int16" `284 
v L "var2" 2 533 "int8" `288 
f G "make32" 2 533 "int32(int16 var1,int8 var2)" `286 
v L "var1" 2 534 "int16" `290 
v L "var2" 2 534 "int8" `291 
v L "var3" 2 534 "int8" `292 
f G "make32" 2 534 "int32(int16 var1,int8 var2,int8 var3)" `289 
v L "var1" 2 535 "int8" `294 
f G "make32" 2 535 "int32(int8 var1)" `293 
v L "var1" 2 536 "int8" `284 
v L "var2" 2 536 "int8" `297 
f G "make32" 2 536 "int32(int8 var1,int8 var2)" `295 
v L "var1" 2 537 "int8" `290 
v L "var2" 2 537 "int8" `291 
v L "var3" 2 537 "int8" `301 
f G "make32" 2 537 "int32(int8 var1,int8 var2,int8 var3)" `298 
v L "var1" 2 538 "int8" `303 
v L "var2" 2 538 "int8" `304 
v L "var3" 2 538 "int8" `305 
v L "var4" 2 538 "int8" `306 
f G "make32" 2 538 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `302 
v L "var1" 2 539 "int8" `284 
v L "var2" 2 539 "int16" `309 
f G "make32" 2 539 "int32(int8 var1,int16 var2)" `307 
v L "var1" 2 540 "int8" `290 
v L "var2" 2 540 "int16" `291 
v L "var3" 2 540 "int8" `313 
f G "make32" 2 540 "int32(int8 var1,int16 var2,int8 var3)" `310 
v L "var1" 2 541 "int8" `290 
v L "var2" 2 541 "int8" `291 
v L "var3" 2 541 "int16" `317 
f G "make32" 2 541 "int32(int8 var1,int8 var2,int16 var3)" `314 
v L "var" 2 542 "int8" `319 
v L "bit" 2 542 "int8" `320 
f B "bit_set" 2 542 "void(int8 var,int8 bit)" `318 
v L "var" 2 543 "int16" `319 
v L "bit" 2 543 "int8" `323 
f G "bit_set" 2 543 "void(int16 var,int8 bit)" `321 
v L "var" 2 544 "int32" `319 
v L "bit" 2 544 "int8" `326 
f G "bit_set" 2 544 "void(int32 var,int8 bit)" `324 
v L "var" 2 545 "int8" `328 
v L "bit" 2 545 "int8" `329 
f B "bit_clear" 2 545 "void(int8 var,int8 bit)" `327 
v L "var" 2 546 "int16" `328 
v L "bit" 2 546 "int8" `332 
f G "bit_clear" 2 546 "void(int16 var,int8 bit)" `330 
v L "var" 2 547 "int32" `328 
v L "bit" 2 547 "int8" `335 
f G "bit_clear" 2 547 "void(int32 var,int8 bit)" `333 
v L "var" 2 548 "int8" `337 
v L "bit" 2 548 "int8" `338 
f B "bit_test" 2 548 "int8(int8 var,int8 bit)" `336 
v L "var" 2 549 "int16" `337 
v L "bit" 2 549 "int8" `341 
f G "bit_test" 2 549 "int8(int16 var,int8 bit)" `339 
v L "var" 2 550 "int32" `337 
v L "bit" 2 550 "int8" `344 
f G "bit_test" 2 550 "int8(int32 var,int8 bit)" `342  "#use delay() Prototypes:"
v L "count" 2 553 "int8" `346 
f B "delay_cycles" 2 553 "void(int8 count)" `345 
v L "time" 2 554 "int16" `348 
f B "delay_ms" 2 554 "void(int16 time)" `347 
v L "time" 2 555 "int16" `350 
f B "delay_us" 2 555 "void(int16 time)" `349  "#use rs232() Prototypes:"
v L "cdata" 2 558 "int8" `352 
f B "putchar" 2 558 "void(int8 cdata)" `351 
v L "cdata" 2 559 "int8" `354 
v L "stream" 2 559 "int8" `355 
f G "putchar" 2 559 "void(int8 cdata,int8 stream)" `353 
v L "string" 2 560 "*int8" `357 
f B "puts" 2 560 "void(*int8 string)" `356 
v L "string" 2 561 "*int8" `359 
v L "stream" 2 561 "int8" `360 
f G "puts" 2 561 "void(*int8 string,int8 stream)" `358 
f B "getch" 2 562 "int8()" `361 
v L "stream" 2 563 "int8" `363 
f G "getch" 2 563 "int8(int8 stream)" `362 
v L "string" 2 564 "*int8" `365 
f B "gets" 2 564 "void(*int8 string)" `364 
v L "string" 2 565 "*int8" `367 
v L "stream" 2 565 "int8" `368 
f G "gets" 2 565 "void(*int8 string,int8 stream)" `366 
f B "kbhit" 2 566 "int8()" `369 
v L "stream" 2 567 "int8" `371 
f G "kbhit" 2 567 "int8(int8 stream)" `370 
v L "string" 2 568 "*int8" `373 
f B "printf" 2 568 "void(*int8 string,*int8 _VA_LIST)" `372 
v L "stream" 2 569 "int8" `376 
v L "string" 2 569 "*int8" `377 
f B "fprintf" 2 569 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `375 
f B "putc_send" 2 570 "void()" `379 
v L "stream" 2 571 "int8" `381 
f B "fputc_send" 2 571 "void(int8 stream)" `380 
f B "rcv_buffer_full" 2 572 "int8()" `382 
v L "stream" 2 573 "int8" `384 
f G "rcv_buffer_full" 2 573 "int8(int8 stream)" `383 
f B "rcv_buffer_bytes" 2 574 "int16()" `385 
v L "stream" 2 575 "int8" `387 
f G "rcv_buffer_bytes" 2 575 "int16(int8 stream)" `386 
f B "tx_buffer_full" 2 576 "int8()" `388 
v L "stream" 2 577 "int8" `390 
f G "tx_buffer_full" 2 577 "int8(int8 stream)" `389 
f B "tx_buffer_bytes" 2 578 "int16()" `391 
v L "stream" 2 579 "int8" `393 
f G "tx_buffer_bytes" 2 579 "int16(int8 stream)" `392  "#use i2c() Prototypes:"
f B "i2c_read" 2 582 "int8()" `394 
v L "stream" 2 583 "int8" `396 
f G "i2c_read" 2 583 "int8(int8 stream)" `395 
v L "stream" 2 584 "int8" `398 
v L "ack" 2 584 "int8" `399 
f G "i2c_read" 2 584 "int8(int8 stream,int8 ack)" `397 
v L "data" 2 585 "int8" `401 
f B "i2c_write" 2 585 "int8(int8 data)" `400 
v L "stream" 2 586 "int8" `403 
v L "data" 2 586 "int8" `404 
f G "i2c_write" 2 586 "int8(int8 stream,int8 data)" `402 
f B "i2c_start" 2 587 "void()" `405 
v L "stream" 2 588 "int8" `407 
f G "i2c_start" 2 588 "void(int8 stream)" `406 
v L "stream" 2 589 "int8" `409 
v L "restart" 2 589 "int8" `410 
f G "i2c_start" 2 589 "void(int8 stream,int8 restart)" `408 
f B "i2c_stop" 2 590 "void()" `411 
v L "stream" 2 591 "int8" `413 
f G "i2c_stop" 2 591 "void(int8 stream)" `412 
f B "i2c_isr_state" 2 592 "int8()" `414 
v L "addr" 2 593 "int8" `416 
f B "i2c_slaveaddr" 2 593 "void(int8 addr)" `415 
v L "stream" 2 594 "int8" `418 
v L "addr" 2 594 "int8" `419 
f G "i2c_slaveaddr" 2 594 "void(int8 stream,int8 addr)" `417 
f B "i2c_poll" 2 595 "int8()" `420 
v L "stream" 2 596 "int8" `422 
f G "i2c_poll" 2 596 "int8(int8 stream)" `421 
v L "baud" 2 597 "int32" `424 
f B "i2c_init" 2 597 "void(int32 baud)" `423 
v L "stream" 2 598 "int8" `426 
v L "baud" 2 598 "int32" `427 
f G "i2c_init" 2 598 "void(int8 stream,int32 baud)" `425  "#use spi() Prototypes:"
f B "spi_xfer" 2 601 "int8()" `428 
f G "spi_xfer" 2 602 "int16()" `429 
f G "spi_xfer" 2 603 "int32()" `430 
v L "data" 2 604 "int8" `432 
f G "spi_xfer" 2 604 "int8(int8 data)" `431 
v L "data" 2 605 "int16" `434 
f G "spi_xfer" 2 605 "int16(int16 data)" `433 
v L "data" 2 606 "int32" `436 
f G "spi_xfer" 2 606 "int32(int32 data)" `435 
v L "stream" 2 607 "int8" `438 
v L "data" 2 607 "int8" `439 
f G "spi_xfer" 2 607 "int8(int8 stream,int8 data)" `437 
v L "stream" 2 608 "int8" `438 
v L "data" 2 608 "int16" `442 
f G "spi_xfer" 2 608 "int16(int8 stream,int16 data)" `440 
v L "stream" 2 609 "int8" `438 
v L "data" 2 609 "int32" `445 
f G "spi_xfer" 2 609 "int32(int8 stream,int32 data)" `443 
v L "stream" 2 610 "int8" `447 
v L "data" 2 610 "int8" `448 
v L "bits" 2 610 "int8" `449 
f G "spi_xfer" 2 610 "int8(int8 stream,int8 data,int8 bits)" `446 
v L "stream" 2 611 "int8" `447 
v L "data" 2 611 "int16" `448 
v L "bits" 2 611 "int8" `453 
f G "spi_xfer" 2 611 "int16(int8 stream,int16 data,int8 bits)" `450 
v L "stream" 2 612 "int8" `447 
v L "data" 2 612 "int32" `448 
v L "bits" 2 612 "int8" `457 
f G "spi_xfer" 2 612 "int32(int8 stream,int32 data,int8 bits)" `454 
v L "baud" 2 613 "int32" `459 
f B "spi_init" 2 613 "void(int32 baud)" `458 
v L "stream" 2 614 "int8" `461 
v L "baud" 2 614 "int32" `462 
f G "spi_init" 2 614 "void(int8 stream,int32 baud)" `460 
v L "baud" 2 615 "int32" `464 
f B "spi_speed" 2 615 "void(int32 baud)" `463 
v L "stream" 2 616 "int8" `466 
v L "baud" 2 616 "int32" `467 
f G "spi_speed" 2 616 "void(int8 stream,int32 baud)" `465 
v L "stream" 2 617 "int8" `469 
v L "baud" 2 617 "int32" `470 
v L "clock" 2 617 "int32" `471 
f G "spi_speed" 2 617 "void(int8 stream,int32 baud,int32 clock)" `468 
v L "data" 2 618 "int8" `473 
f B "spi_prewrite" 2 618 "void(int8 data)" `472 
v L "data" 2 619 "int16" `475 
f G "spi_prewrite" 2 619 "void(int16 data)" `474 
v L "data" 2 620 "int32" `477 
f G "spi_prewrite" 2 620 "void(int32 data)" `476 
v L "??65535" 2 621 "int8" `479 
v L "data" 2 621 "int8" `480 
f G "spi_prewrite" 2 621 "void(int8 ,int8 data)" `478 
v L "??65535" 2 622 "int8" `479 
v L "data" 2 622 "int16" `483 
f G "spi_prewrite" 2 622 "void(int8 ,int16 data)" `481 
v L "??65535" 2 623 "int8" `479 
v L "data" 2 623 "int32" `486 
f G "spi_prewrite" 2 623 "void(int8 ,int32 data)" `484 
f B "spi_xfer_in" 2 624 "int8()" `487 
f G "spi_xfer_in" 2 625 "int16()" `488 
f G "spi_xfer_in" 2 626 "int32()" `489 
v L "bits" 2 627 "int8" `491 
f G "spi_xfer_in" 2 627 "int8(int8 bits)" `490 
v L "bits" 2 628 "int8" `493 
f G "spi_xfer_in" 2 628 "int16(int8 bits)" `492 
v L "bits" 2 629 "int8" `495 
f G "spi_xfer_in" 2 629 "int32(int8 bits)" `494 
v L "stream" 2 630 "int8" `497 
v L "bits" 2 630 "int8" `498 
f G "spi_xfer_in" 2 630 "int8(int8 stream,int8 bits)" `496 
v L "stream" 2 631 "int8" `497 
v L "bits" 2 631 "int8" `501 
f G "spi_xfer_in" 2 631 "int16(int8 stream,int8 bits)" `499 
v L "stream" 2 632 "int8" `497 
v L "bits" 2 632 "int8" `504 
f G "spi_xfer_in" 2 632 "int32(int8 stream,int8 bits)" `502  "#use rtos() Prototypes:"
f B "rtos_run" 2 635 "void()" `505 
f B "rtos_yield" 2 636 "void()" `506 
v L "task" 2 637 "int8" `508 
f B "rtos_enable" 2 637 "void(int8 task)" `507 
v L "task" 2 638 "int8" `510 
f B "rtos_disable" 2 638 "void(int8 task)" `509 
f B "rtos_terminate" 2 639 "void()" `511 
v L "flag" 2 640 "int8" `513 
f B "rtos_await" 2 640 "void(int8 flag)" `512 
v L "sem" 2 641 "int8" `515 
f B "rtos_wait" 2 641 "void(int8 sem)" `514 
v L "sem" 2 642 "int8" `517 
f B "rtos_signal" 2 642 "void(int8 sem)" `516 
v L "task" 2 643 "int8" `519 
v L "msg" 2 643 "int8" `520 
f B "rtos_msg_send" 2 643 "void(int8 task,int8 msg)" `518 
f B "rtos_msg_read" 2 644 "int8()" `521 
f B "rtos_msg_poll" 2 645 "int8()" `522 
v L "task" 2 646 "int8" `524 
f B "rtos_overrun" 2 646 "int8(int8 task)" `523 
v L "task" 2 647 "int8" `526 
v L "stat" 2 647 "*int8" `527 
f B "rtos_stats" 2 647 "void(int8 task,*int8 stat)" `525  "#use timer() Prototypes:"
f B "get_ticks" 2 650 "int8()" `528 
f G "get_ticks" 2 651 "int16()" `529 
f G "get_ticks" 2 652 "int32()" `530 
v L "stream" 2 653 "int8" `532 
f G "get_ticks" 2 653 "int8(int8 stream)" `531 
v L "stream" 2 654 "int8" `534 
f G "get_ticks" 2 654 "int16(int8 stream)" `533 
v L "stream" 2 655 "int8" `536 
f G "get_ticks" 2 655 "int32(int8 stream)" `535 
v L "value" 2 656 "int8" `538 
f B "set_ticks" 2 656 "void(int8 value)" `537 
v L "value" 2 657 "int16" `540 
f G "set_ticks" 2 657 "void(int16 value)" `539 
v L "value" 2 658 "int32" `542 
f G "set_ticks" 2 658 "void(int32 value)" `541 
v L "stream" 2 659 "int8" `544 
v L "value" 2 659 "int8" `545 
f G "set_ticks" 2 659 "void(int8 stream,int8 value)" `543 
v L "stream" 2 660 "int8" `544 
v L "value" 2 660 "int16" `548 
f G "set_ticks" 2 660 "void(int8 stream,int16 value)" `546 
v L "stream" 2 661 "int8" `544 
v L "value" 2 661 "int32" `551 
f G "set_ticks" 2 661 "void(int8 stream,int32 value)" `549  "#use pwm() Prototypes:"
f B "pwm_on" 2 664 "void()" `552 
v L "stream" 2 665 "int8" `554 
f G "pwm_on" 2 665 "void(int8 stream)" `553 
f B "pwm_off" 2 666 "void()" `555 
v L "stream" 2 667 "int8" `557 
f G "pwm_off" 2 667 "void(int8 stream)" `556 
v L "duty" 2 668 "int16" `559 
f B "pwm_set_duty" 2 668 "void(int16 duty)" `558 
v L "stream" 2 669 "int8" `561 
v L "duty" 2 669 "int16" `562 
f G "pwm_set_duty" 2 669 "void(int8 stream,int16 duty)" `560 
v L "percent" 2 670 "int16" `564 
f B "pwm_set_duty_percent" 2 670 "void(int16 percent)" `563 
v L "stream" 2 671 "int8" `566 
v L "percent" 2 671 "int16" `567 
f G "pwm_set_duty_percent" 2 671 "void(int8 stream,int16 percent)" `565 
v L "frequency" 2 672 "int32" `569 
f B "pwm_set_frequency" 2 672 "void(int32 frequency)" `568 
v L "stream" 2 673 "int8" `571 
v L "frequency" 2 673 "int32" `572 
f G "pwm_set_frequency" 2 673 "void(int8 stream,int32 frequency)" `570  "#use capture() Prototypes:"
f B "get_capture_time" 2 676 "int16()" `573 
v L "stream" 2 677 "int8" `575 
f G "get_capture_time" 2 677 "int16(int8 stream)" `574 
f B "get_capture_event" 2 678 "int8()" `576 
v L "stream" 2 679 "int8" `578 
f G "get_capture_event" 2 679 "int8(int8 stream)" `577  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
v L "address" 2 692 "int16" `580 
f B "goto_address" 2 692 "void(int16 address)" `579 
v L "label" 2 693 "int16" `582 
f B "label_address" 2 693 "int16(int16 label)" `581  "Program Memory Prototypes:"
v L "address" 2 696 "int16" `584 
v L "dataptr" 2 696 "*int8" `585 
v L "count" 2 696 "int16" `586 
f B "read_program_memory" 2 696 "void(int16 address,*int8 dataptr,int16 count)" `583 
v L "address" 2 697 "int16" `588 
f B "read_program_eeprom" 2 697 "int16(int16 address)" `587 
v L "address" 2 698 "int16" `590 
f B "erase_program_eeprom" 2 698 "void(int16 address)" `589 
v L "address" 2 699 "int16" `592 
v L "dataptr" 2 699 "*int8" `593 
v L "count" 2 699 "int16" `594 
f B "write_program_memory" 2 699 "void(int16 address,*int8 dataptr,int16 count)" `591 
v L "address" 2 700 "int16" `596 
v L "data" 2 700 "int16" `597 
f B "write_program_eeprom" 2 700 "void(int16 address,int16 data)" `595  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 705 "int16" `598 
v L "address" 2 710 "__EEADDRESS__" `600 
f B "read_eeprom" 2 710 "int8(__EEADDRESS__ address)" `599 
v L "address" 2 711 "__EEADDRESS__" `602 
v L "value" 2 711 "int8" `603 
f B "write_eeprom" 2 711 "void(__EEADDRESS__ address,int8 value)" `601  "INT"
c L "write_eeprom" 2 5 4 "FUNCTION"
v L "interrupt" 2 718 "int32" `605 
f B "enable_interrupts" 2 718 "void(int32 interrupt)" `604 
v L "interrupt" 2 719 "int32" `607 
f B "disable_interrupts" 2 719 "void(int32 interrupt)" `606 
v L "interrupt" 2 720 "int32" `609 
f B "clear_interrupt" 2 720 "void(int32 interrupt)" `608 
v L "interrupt" 2 721 "int32" `611 
f B "interrupt_active" 2 721 "int8(int32 interrupt)" `610 
v L "source" 2 722 "int8" `613 
v L "edge" 2 722 "int8" `614 
f B "ext_int_edge" 2 722 "void(int8 source,int8 edge)" `612 
v L "address" 2 723 "int16" `616 
f B "jump_to_irs" 2 723 "void(int16 address)" `615  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 725 "0x40"
d G "H_TO_L" 2 726 "0"
d G "GLOBAL" 2 728 "0xF2C0"
d G "PERIPH" 2 729 "0xF240"
d G "INT_RTCC" 2 730 "0x00F220"
d G "INT_TIMER0" 2 731 "0x00F220"
d G "INT_TIMER1" 2 732 "0x009D01"
d G "INT_TIMER2" 2 733 "0x009D02"
d G "INT_TIMER3" 2 734 "0x00A002"
d G "INT_EXT_L2H" 2 735 "0x5000F210"
d G "INT_EXT_H2L" 2 736 "0x6000F210"
d G "INT_EXT" 2 737 "0x00F210"
d G "INT_EXT1_L2H" 2 738 "0x5001F008"
d G "INT_EXT1_H2L" 2 739 "0x6001F008"
d G "INT_EXT1" 2 740 "0x00F008"
d G "INT_EXT2_L2H" 2 741 "0x5002F010"
d G "INT_EXT2_H2L" 2 742 "0x6002F010"
d G "INT_EXT2" 2 743 "0x00F010"
d G "INT_RB" 2 744 "0x00FFF208"
d G "INT_AD" 2 745 "0x009D40"
d G "INT_RDA" 2 746 "0x009D20"
d G "INT_TBE" 2 747 "0x009D10"
d G "INT_SSP" 2 748 "0x009D08"
d G "INT_CCP1" 2 749 "0x009D04"
d G "INT_CCP2" 2 750 "0x00A001"
d G "INT_BUSCOL" 2 751 "0x00A008"
d G "INT_LOWVOLT" 2 752 "0x00A004"
d G "INT_COMP" 2 753 "0x00A040"
d G "INT_EEPROM" 2 754 "0x00A010"
d G "INT_OSCF" 2 755 "0x00A080"
d G "INT_USB" 2 756 "0x00A020"
D G "USB_CONFIG_HID_TX_SIZE" 1 12 "64" "Transmit packet size (bytes)"
D G "USB_CONFIG_HID_RX_SIZE" 1 13 "64" "Receive packet size (bytes)"
D G "USB_CONFIG_PID" 1 14 "0x01FF" "Chnage Product Id"
D G "USB_CONFIG_VID" 1 15 "0x04D8" "Chnage Vendor Id"
D G "__PIC18_USB_H__" 3 136 ""
D G "__USB_HARDWARE__" 3 138 ""
D G "__PIC__" 3 141 "1"
D G "USB_USE_FULL_SPEED" 3 144 "1"
D G "USB_MAX_EP0_PACKET_LENGTH" 3 157 "64"
D G "__USB_HW_LAYER_H__" 4 34 ""
E G "USB_DTS_DATA1" 4 36 "1" `634 
E G "USB_DTS_TOGGLE" 4 36 "2" `635 
E G "USB_DTS_DATA0" 4 37 "0" `636 
E G "USB_DTS_STALL" 4 37 "3" `637 
E G "USB_DTS_USERX" 4 37 "4" `638  "USER LEVEL FUNCTIONS:"
C L "jump_to_irs" 4 2 5 "FUNCTION"
F G "usb_init" 4 48 "void()" `639  "/* usb_init_cs()"
C L "usb_init" 4 2 4 "FUNCTION"
F G "usb_init_cs" 4 56 "void()" `640  "/* usb_task()"
C L "usb_init_cs" 4 2 4 "FUNCTION"
F G "usb_task" 4 64 "void()" `641  "/* usb_attach()"
C L "usb_task" 4 2 11 "FUNCTION"
F G "usb_attach" 4 79 "void()" `642  "/* usb_detach()"
C L "usb_attach" 4 2 14 "FUNCTION"
F G "usb_detach" 4 97 "void()" `643  "/* usb_put_packet()"
C L "usb_detach" 4 2 27 "FUNCTION"
V L "endpoint" 4 128 "int8" `645 
V L "ptr" 4 128 "*int8" `646 
V L "len" 4 128 "int16" `647 
V L "tgl" 4 128 "USB_DTS_BIT" `648 
F G "usb_put_packet" 4 128 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `644  "/* usb_get_packet(endpoint, *ptr, max)"
C L "usb_put_packet" 4 2 22 "FUNCTION"
V L "endpoint" 4 154 "int8" `650 
V L "ptr" 4 154 "*int8" `651 
V L "max" 4 154 "int16" `652 
F G "usb_get_packet" 4 154 "int16(int8 endpoint,*int8 ptr,int16 max)" `649  "/* usb_kbhit(endpoint)"
C L "usb_get_packet" 4 2 12 "FUNCTION"
V L "en" 4 170 "int8" `654 
F G "usb_kbhit" 4 170 "int8(int8 en)" `653  "/* usb_tbe(endpoint)"
C L "usb_kbhit" 4 2 13 "FUNCTION"
V L "en" 4 187 "int8" `656 
F G "usb_tbe" 4 187 "int8(int8 en)" `655  "END USER LEVEL FUNCTIONS /////////////////////////////////////"
C L "usb_tbe" 4 2 16 "FUNCTION"
V L "endpoint" 4 212 "int8" `658 
F G "usb_stall_ep" 4 212 "void(int8 endpoint)" `657  "/* usb_unstall_ep(endpoint, direction)"
C L "usb_stall_ep" 4 2 10 "FUNCTION"
V L "endpoint" 4 227 "int8" `660 
F G "usb_unstall_ep" 4 227 "void(int8 endpoint)" `659  "/* usb_endpoint_stalled()"
C L "usb_unstall_ep" 4 2 15 "FUNCTION"
V L "endpoint" 4 246 "int8" `662 
F G "usb_endpoint_stalled" 4 246 "int8(int8 endpoint)" `661  "/* usb_set_address(address)"
C L "usb_endpoint_stalled" 4 2 7 "FUNCTION"
V L "address" 4 257 "int8" `664 
F G "usb_set_address" 4 257 "void(int8 address)" `663  "/* usb_set_configured()"
C L "usb_set_address" 4 2 10 "FUNCTION"
V L "config" 4 271 "int8" `666 
F G "usb_set_configured" 4 271 "void(int8 config)" `665  "/* usb_disable_endpoints()"
C L "usb_set_configured" 4 2 4 "FUNCTION"
F G "usb_disable_endpoints" 4 279 "void()" `667  "/* usb_disable_endpoint()"
C L "usb_disable_endpoints" 4 2 6 "FUNCTION"
V L "en" 4 290 "int8" `669 
F G "usb_disable_endpoint" 4 290 "void(int8 en)" `668  "/* usb_request_send_response(len)"
C L "usb_disable_endpoint" 4 2 28 "FUNCTION"
V L "len" 4 322 "int8" `671 
F G "usb_request_send_response" 4 322 "void(int8 len)" `670 
F G "usb_request_get_data" 4 323 "void()" `672 
F G "usb_request_stall" 4 324 "void()" `673  "EXTRA USER FUNCTIONS /////////////////////////////////"
C L "usb_request_stall" 3 178 15 "FUNCTION"
V L "endpoint" 3 194 "int8" `675 
V L "len" 3 194 "int16" `676 
V L "tgl" 3 194 "USB_DTS_BIT" `677 
F G "usb_flush_in" 3 194 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `674  "/* usb_flush_out()"
C L "usb_flush_in" 3 178 13 "FUNCTION"
V L "endpoint" 3 211 "int8" `679 
V L "tgl" 3 211 "USB_DTS_BIT" `680 
F G "usb_flush_out" 3 211 "void(int8 endpoint,USB_DTS_BIT tgl)" `678  "/* usb_rx_packet_size()"
C L "usb_flush_out" 3 178 10 "FUNCTION"
V L "endpoint" 3 225 "int8" `682 
F G "usb_rx_packet_size" 3 225 "int16(int8 endpoint)" `681  "/                          usb_desc_hid.h                            ////"
D G "__USB_DESCRIPTORS__" 5 49 ""
D G "USB_CONFIG_BUS_POWER" 5 61 "100" "100mA"
D G "USB_CONFIG_VERSION" 5 67 "0x0100" "01.00"
D G "USB_CONFIG_HID_TX_POLL" 5 83 "10"
D G "USB_CONFIG_HID_RX_POLL" 5 89 "10"
D G "USB_HID_DEVICE" 5 97 "TRUE"
D G "USB_EP1_TX_ENABLE" 5 104 "USB_ENABLE_INTERRUPT" "turn on EP1 for IN bulk/interrupt transfers"
D G "USB_EP1_TX_SIZE" 5 109 "64"
D G "USB_EP1_RX_ENABLE" 5 119 "USB_ENABLE_INTERRUPT" "turn on EP1 for OUT bulk/interrupt transfers"
D G "USB_EP1_RX_SIZE" 5 124 "64"
D G "__USB_PROTOTYPES__" 6 301 ""
D G "USB_HID_BOOT_PROTOCOL" 6 311 "FALSE"
D G "USB_HID_IDLE" 6 315 "FALSE"
D G "USB_CDC_DEVICE" 6 324 "FALSE"
D G "USB_OPT_FOR_ROM" 6 329 "TRUE"
C L "usb_rx_packet_size" 6 2 9 "FUNCTION"
F G "usb_enumerated" 6 348 "int8()" `683  "/* usb_wait_for_enumeration()"
C L "usb_enumerated" 6 2 6 "FUNCTION"
F G "usb_wait_for_enumeration" 6 358 "void()" `684  "/* usb_gets(endpoint, ptr, max, timeout)"
C L "usb_wait_for_enumeration" 6 2 14 "FUNCTION"
V L "endpoint" 6 376 "int8" `686 
V L "ptr" 6 376 "*int8" `687 
V L "max" 6 376 "int16" `688 
V L "timeout" 6 376 "int16" `689 
F G "usb_gets" 6 376 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `685  "/* usb_puts()"
C L "usb_gets" 6 2 16 "FUNCTION"
V L "endpoint" 6 396 "int8" `691 
V L "ptr" 6 396 "*int8" `692 
V L "len" 6 396 "int16" `693 
V L "timeout" 6 396 "int8" `694 
F G "usb_puts" 6 396 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `690  "/* usb_attached()"
D G "usb_attached" 6 408 "() TRUE"
C L "usb_puts" 6 2 10 "FUNCTION"
V L "endpoint" 6 422 "int8" `696 
F G "usb_endpoint_is_valid" 6 422 "int8(int8 endpoint)" `695  "END USER-LEVEL API /////////////////////////////////////////////////////"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
E G "GET_DESCRIPTOR" 6 430 "1" `698 
E G "SET_ADDRESS" 6 430 "2" `699 
E G "NONE" 6 430 "0" `700 
E G "USB_GETDESC_CONFIG_TYPE" 6 432 "0" `702 
E G "USB_GETDESC_HIDREPORT_TYPE" 6 432 "1" `703 
E G "USB_GETDESC_STRING_TYPE" 6 432 "2" `704 
E G "USB_GETDESC_DEVICE_TYPE" 6 432 "3" `705 
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
C L "usb_endpoint_is_valid" 6 2 1 "FUNCTION"
T G "TYPE_USB_STACK_STATUS" 6 440 "{USB_STATES dev_req,int8 curr_config,int8 status_device,USB_GETDESC_TYPES getdesc_type}" `711 
V G "USB_stack_status" 6 450 "TYPE_USB_STACK_STATUS" `712  "/* usb_token_reset()"
C L "usb_endpoint_is_valid" 6 2 5 "FUNCTION"
F G "usb_token_reset" 6 459 "void()" `713  "/* usb_isr_tok_setup_dne()"
C L "usb_token_reset" 6 2 31 "FUNCTION"
F G "usb_isr_tok_setup_dne" 6 494 "void()" `714  "/* usb_isr_tok_out_dne()"
C L "usb_isr_tok_setup_dne" 6 2 10 "FUNCTION"
V L "endpoint" 6 508 "int8" `716 
F G "usb_isr_tok_out_dne" 6 508 "void(int8 endpoint)" `715  "/* usb_isr_tok_in_dne(endpoint)"
C L "usb_isr_tok_out_dne" 6 2 10 "FUNCTION"
V L "endpoint" 6 522 "int8" `718 
F G "usb_isr_tok_in_dne" 6 522 "void(int8 endpoint)" `717  "END STACK-LEVEL API USED BY HW DRIVERS /////////////////////////////////"
D G "USB_NUM_CONFIGURATIONS" 6 528 "1" "DO NOT CHANGE"
D G "PID_IN" 6 531 "0x09" "device to host transactions"
D G "PID_OUT" 6 532 "0x01" "host to device transactions"
D G "PID_SETUP" 6 533 "0x0D" "host to device setup transaction"
D G "PID_ACK" 6 534 "0x02" "receiver accepts error-free data packet"
D G "PID_DATA0" 6 535 "0x03" "data packet with even sync bit"
D G "PID_SOF" 6 536 "0x05" "start of framer marker and frame number"
D G "PID_NAK" 6 537 "0x0A" "receiver can't accept data or sender cant send data or has no data to transmit"
D G "PID_DATA1" 6 538 "0x0B" "data packet with odd sync bit"
D G "PID_PRE" 6 539 "0x0C" "preamble issued by host.  enables downstream traffic to low-speed device"
D G "PID_STALL" 6 540 "0x0E" "a control request isnt supported or the endpoint is halted"
D G "USB_DESC_DEVICE_TYPE" 6 543 "0x01" "#DEFINE USB_DEVICE_DESC_KEY      0x01"
D G "USB_DESC_CONFIG_TYPE" 6 544 "0x02" "#DEFINE USB_CONFIG_DESC_KEY      0x02"
D G "USB_DESC_STRING_TYPE" 6 545 "0x03" "#DEFINE USB_STRING_DESC_KEY      0x03"
D G "USB_DESC_INTERFACE_TYPE" 6 546 "0x04" "#DEFINE USB_INTERFACE_DESC_KEY   0x04"
D G "USB_DESC_ENDPOINT_TYPE" 6 547 "0x05" "#DEFINE USB_ENDPOINT_DESC_KEY    0x05"
D G "USB_DESC_CLASS_TYPE" 6 548 "0x21" "#DEFINE USB_CLASS_DESC_KEY       0x21"
D G "USB_DESC_HIDREPORT_TYPE" 6 549 "0x22"
D G "USB_DESC_IAD_TYPE" 6 550 "0x0b"
D G "USB_DESC_DEVICE_LEN" 6 553 "18" "#DEFINE USB_DEVICE_DESC_LEN      18"
D G "USB_DESC_CONFIG_LEN" 6 554 "9" "#DEFINE USB_CONFIG_DESC_LEN      9"
D G "USB_DESC_INTERFACE_LEN" 6 555 "9" "#DEFINE USB_INTERFACE_DESC_LEN   9"
D G "USB_DESC_CLASS_LEN" 6 556 "9" "#DEFINE USB_CLASS_DESC_LEN       9"
D G "USB_DESC_ENDPOINT_LEN" 6 557 "7" "#DEFINE USB_ENDPOINT_DESC_LEN    7"
D G "USB_DESC_IAD_LEN" 6 558 "8"
D G "USB_STANDARD_REQUEST_GET_STATUS" 6 561 "0x00"
D G "USB_STANDARD_REQUEST_CLEAR_FEATURE" 6 562 "0x01"
D G "USB_STANDARD_REQUEST_SET_FEATURE" 6 563 "0x03"
D G "USB_STANDARD_REQUEST_SET_ADDRESS" 6 564 "0x05"
D G "USB_STANDARD_REQUEST_GET_DESCRIPTOR" 6 565 "0x06"
D G "USB_STANDARD_REQUEST_SET_DESCRIPTOR" 6 566 "0x07"
D G "USB_STANDARD_REQUEST_GET_CONFIGURATION" 6 567 "0x08"
D G "USB_STANDARD_REQUEST_SET_CONFIGURATION" 6 568 "0x09"
D G "USB_STANDARD_REQUEST_GET_INTERFACE" 6 569 "0x0A"
D G "USB_STANDARD_REQUEST_SET_INTERFACE" 6 570 "0x0B"
D G "USB_STANDARD_REQUEST_SYNCH_FRAME" 6 571 "0x0C"
D G "USB_HID_REQUEST_GET_REPORT" 6 574 "0x01"
D G "USB_HID_REQUEST_GET_IDLE" 6 575 "0x02"
D G "USB_HID_REQUEST_GET_PROTOCOL" 6 576 "0x03"
D G "USB_HID_REQUEST_SET_REPORT" 6 577 "0x09"
D G "USB_HID_REQUEST_SET_IDLE" 6 578 "0x0A"
D G "USB_HID_REQUEST_SET_PROTOCOL" 6 579 "0x0B"
D G "USB_ENDPOINT_TYPE_CONTROL" 6 582 "0x00"
D G "USB_ENDPOINT_TYPE_ISOCHRONOUS" 6 583 "0x01"
D G "USB_ENDPOINT_TYPE_BULK" 6 584 "0x02"
D G "USB_ENDPOINT_TYPE_INTERRUPT" 6 585 "0x03"
D G "USB_ENABLE_DISABLED" 6 588 "-1"
D G "USB_ENABLE_BULK" 6 589 "USB_ENDPOINT_TYPE_BULK"
D G "USB_ENABLE_ISOCHRONOUS" 6 590 "USB_ENDPOINT_TYPE_ISOCHRONOUS"
D G "USB_ENABLE_INTERRUPT" 6 591 "USB_ENDPOINT_TYPE_INTERRUPT"
D G "USB_ENABLE_CONTROL" 6 592 "USB_ENDPOINT_TYPE_CONTROL"
D G "USB_EP0_TX_ENABLE" 6 597 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_ENABLE" 6 598 "USB_ENABLE_CONTROL"
D G "USB_EP0_RX_SIZE" 6 599 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP0_TX_SIZE" 6 600 "USB_MAX_EP0_PACKET_LENGTH" "endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8"
D G "USB_EP2_TX_ENABLE" 6 635 "USB_ENABLE_DISABLED"
D G "USB_EP2_RX_ENABLE" 6 638 "USB_ENABLE_DISABLED"
D G "USB_EP2_RX_SIZE" 6 645 "0"
D G "USB_EP2_TX_SIZE" 6 656 "0"
D G "USB_EP3_TX_ENABLE" 6 666 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_ENABLE" 6 669 "USB_ENABLE_DISABLED"
D G "USB_EP3_RX_SIZE" 6 676 "0"
D G "USB_EP3_TX_SIZE" 6 687 "0"
D G "USB_EP4_TX_ENABLE" 6 697 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_ENABLE" 6 700 "USB_ENABLE_DISABLED"
D G "USB_EP4_RX_SIZE" 6 707 "0"
D G "USB_EP4_TX_SIZE" 6 718 "0"
D G "USB_EP5_TX_ENABLE" 6 728 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_ENABLE" 6 731 "USB_ENABLE_DISABLED"
D G "USB_EP5_RX_SIZE" 6 738 "0"
D G "USB_EP5_TX_SIZE" 6 749 "0"
D G "USB_EP6_TX_ENABLE" 6 759 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_ENABLE" 6 762 "USB_ENABLE_DISABLED"
D G "USB_EP6_RX_SIZE" 6 769 "0"
D G "USB_EP6_TX_SIZE" 6 780 "0"
D G "USB_EP7_TX_ENABLE" 6 790 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_ENABLE" 6 793 "USB_ENABLE_DISABLED"
D G "USB_EP7_RX_SIZE" 6 800 "0"
D G "USB_EP7_TX_SIZE" 6 811 "0"
D G "USB_EP8_TX_ENABLE" 6 821 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_ENABLE" 6 824 "USB_ENABLE_DISABLED"
D G "USB_EP8_RX_SIZE" 6 831 "0"
D G "USB_EP8_TX_SIZE" 6 842 "0"
D G "USB_EP9_TX_ENABLE" 6 852 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_ENABLE" 6 855 "USB_ENABLE_DISABLED"
D G "USB_EP9_RX_SIZE" 6 862 "0"
D G "USB_EP9_TX_SIZE" 6 873 "0"
D G "USB_EP10_TX_ENABLE" 6 883 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_ENABLE" 6 886 "USB_ENABLE_DISABLED"
D G "USB_EP10_RX_SIZE" 6 893 "0"
D G "USB_EP10_TX_SIZE" 6 904 "0"
D G "USB_EP11_TX_ENABLE" 6 914 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_ENABLE" 6 917 "USB_ENABLE_DISABLED"
D G "USB_EP11_RX_SIZE" 6 924 "0"
D G "USB_EP11_TX_SIZE" 6 935 "0"
D G "USB_EP12_TX_ENABLE" 6 945 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_ENABLE" 6 948 "USB_ENABLE_DISABLED"
D G "USB_EP12_RX_SIZE" 6 955 "0"
D G "USB_EP12_TX_SIZE" 6 966 "0"
D G "USB_EP13_TX_ENABLE" 6 976 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_ENABLE" 6 979 "USB_ENABLE_DISABLED"
D G "USB_EP13_RX_SIZE" 6 986 "0"
D G "USB_EP13_TX_SIZE" 6 997 "0"
D G "USB_EP14_TX_ENABLE" 6 1007 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_ENABLE" 6 1010 "USB_ENABLE_DISABLED"
D G "USB_EP14_RX_SIZE" 6 1017 "0"
D G "USB_EP14_TX_SIZE" 6 1028 "0"
D G "USB_EP15_TX_ENABLE" 6 1038 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_ENABLE" 6 1041 "USB_ENABLE_DISABLED"
D G "USB_EP15_RX_SIZE" 6 1048 "0"
D G "USB_EP15_TX_SIZE" 6 1059 "0"
V G "usb_ep_tx_type" 6 1066 "[16]" `719 
V G "usb_ep_rx_type" 6 1075 "[16]" `722 
V G "usb_ep_tx_size" 6 1084 "[16]" `725 
V G "usb_ep_rx_size" 6 1093 "[16]" `728 
C L "usb_isr_tok_in_dne" 5 135 5 "FUNCTION"
V G "USB_CLASS_SPECIFIC_DESC" 5 144 "[1]" `731 
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 6 "FUNCTION"
V G "USB_CLASS_SPECIFIC_DESC_LOOKUP" 5 172 "[1][1]" `734  "config 1"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 5 "FUNCTION"
V G "USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE" 5 184 "[1][1]" `738  "config 1"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
D G "USB_TOTAL_CONFIG_LEN" 5 200 "41" "config+interface+class+endpoint+endpoint (2 endpoints)"
V G "USB_CONFIG_DESC" 5 202 "[1]" `742  "IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE:"
C L "usb_isr_tok_in_dne" 5 135 5 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 135 1 "FUNCTION"
D G "USB_NUM_HID_INTERFACES" 5 266 "1"
D G "USB_MAX_NUM_INTERFACES" 5 270 "1"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
V G "USB_NUM_INTERFACES" 5 273 "[1]" `745 
C L "usb_isr_tok_in_dne" 5 260 5 "FUNCTION"
V G "USB_CLASS_DESCRIPTORS" 5 280 "[1][1][1]" `748  "config 1"
C L "usb_isr_tok_in_dne" 5 260 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
V G "USB_DEVICE_DESC" 5 299 "[18]" `753  "starts of with device configuration. only one possible"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 5 "FUNCTION"
V G "USB_STRING_DESC_OFFSET" 5 329 "int8[1]" `756 
C L "usb_isr_tok_in_dne" 5 260 5 "FUNCTION"
V G "USB_STRING_DESC" 5 336 "[1]" `757  "string 0"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 2 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 5 260 1 "FUNCTION"
D G "__USB_DRIVER__" 7 162 ""
D G "debug_usb" 7 181 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "debug_putc" 7 182 "(c)"
D G "debug_display_ram" 7 183 "(x,y)"
C L "usb_isr_tok_in_dne" 6 2 294 "FUNCTION"
D G "__PIC18_USB_C__" 8 114 ""
C L "usb_isr_tok_in_dne" 6 2 294 "FUNCTION"
D G "USB_IGNORE_RX_DTS" 8 124 "FALSE"
D G "USB_IGNORE_TX_DTS" 8 128 "FALSE"
D G "__USB_4550__" 8 178 ""
D G "USB_TOTAL_RAM_SPACE" 8 179 " ((unsigned int16)0x400)"
D G "USB_RAM_START" 8 180 "0x400"
D G "USB_NUM_UEP" 8 181 "16"
D G "USB_LAST_ALLOWED_ENDPOINT" 8 182 "16"
D G "USB_BDT_START" 8 196 "USB_RAM_START"
D G "USB_LAST_DEFINED_ENDPOINT" 8 228 "1"
D G "USB_CONTROL_REGISTER_SIZE" 8 233 " ((USB_LAST_DEFINED_ENDPOINT+1)*8)"
D G "USB_DATA_BUFFER_NEEDED" 8 235 " (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE)"
D G "USB_DATA_BUFFER_LOCATION" 8 262 " ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE)"
T G "STRUCT_BD" 8 272 "{int8 stat,int8 cnt,int16 addr}" `827 
C L "usb_isr_tok_in_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 8 120 1 "FUNCTION"
V G "g_USBRAM" 8 305 "{}" `841 
D G "g_USBBDT" 8 307 "g_USBRAM.bd"
D G "usb_ep0_rx_buffer" 8 343 "g_USBRAM.buffer.ep0_rx_buffer"
D G "usb_ep0_tx_buffer" 8 344 "g_USBRAM.buffer.ep0_tx_buffer"
D G "usb_ep1_rx_buffer" 8 347 "g_USBRAM.buffer.ep1_rx_buffer"
D G "usb_ep1_tx_buffer" 8 348 "g_USBRAM.buffer.ep1_tx_buffer"
D G "usb_ep2_rx_buffer" 8 349 "g_USBRAM.buffer.ep2_rx_buffer"
D G "usb_ep2_tx_buffer" 8 350 "g_USBRAM.buffer.ep2_tx_buffer"
D G "USB_USE_ERROR_COUNTER" 8 355 "FALSE"
D G "USB_PING_PONG_MODE_OFF" 8 358 "0" "no ping pong"
D G "USB_PING_PONG_MODE_E0" 8 359 "1" "ping pong endpoint 0 only"
D G "USB_PING_PONG_MODE_ON" 8 360 "2" "ping pong all endpoints"
D G "USB_PING_PONG_MODE" 8 364 "USB_PING_PONG_MODE_OFF"
C L "usb_isr_tok_in_dne" 8 120 1 "FUNCTION"
D G "UEP0_LOC" 8 383 "0xF70"
V G "USTATCopy" 8 433 "int8" `852 
V G "g_UEP" 8 435 "int8[16]" `853 
D G "UEP" 8 441 "(x) g_UEP[x]"
D G "BIT_SOF" 8 443 "6"
D G "BIT_STALL" 8 444 "5"
D G "BIT_IDLE" 8 445 "4"
D G "BIT_TRN" 8 446 "3"
D G "BIT_ACTV" 8 447 "2"
D G "BIT_UERR" 8 448 "1"
D G "BIT_URST" 8 449 "0"
D G "EP_BDxST_O" 8 475 "(x)    g_USBBDT[x].out.stat"
D G "EP_BDxCNT_O" 8 476 "(x)   g_USBBDT[x].out.cnt"
D G "EP_BDxADR_O" 8 477 "(x)   g_USBBDT[x].out.addr"
D G "EP_BDxST_I" 8 478 "(x)    g_USBBDT[x].in.stat"
D G "EP_BDxCNT_I" 8 479 "(x)   g_USBBDT[x].in.cnt"
D G "EP_BDxADR_I" 8 480 "(x)   g_USBBDT[x].in.addr"
D G "ENDPT_DISABLED" 8 486 "0x00" "endpoint not used"
D G "ENDPT_IN_ONLY" 8 487 "0x02" "endpoint supports IN transactions only"
D G "ENDPT_OUT_ONLY" 8 488 "0x04" "endpoint supports OUT transactions only"
D G "ENDPT_CONTROL" 8 489 "0x06" "Supports IN, OUT and CONTROL transactions - Only use with EP0"
D G "ENDPT_NON_CONTROL" 8 490 "0x0E" "Supports both IN and OUT transactions"
C L "usb_isr_tok_in_dne" 8 120 1 "FUNCTION"
E G "USB_STATE_DETACHED" 8 493 "0" `875 
E G "USB_STATE_ATTACHED" 8 493 "1" `876 
E G "USB_STATE_POWERED" 8 493 "2" `877 
E G "USB_STATE_DEFAULT" 8 494 "3" `878 
E G "USB_STATE_ADDRESS" 8 494 "4" `879 
E G "USB_STATE_CONFIGURED" 8 494 "5" `880 
V G "usb_state" 8 494 "" `881  "--BDendST has their PIDs upshifed 2"
D G "USB_PIC_PID_IN" 8 497 "0x24" "device to host transactions"
D G "USB_PIC_PID_OUT" 8 498 "0x04" "host to device transactions"
D G "USB_PIC_PID_SETUP" 8 499 "0x34" "host to device setup transaction"
D G "USTAT_IN_E0" 8 501 "4"
D G "USTAT_OUT_SETUP_E0" 8 502 "0"
D G "__USB_UIF_RESET" 8 504 "0x01"
D G "__USB_UIF_ERROR" 8 505 "0x02"
D G "__USB_UIF_ACTIVE" 8 506 "0x04"
D G "__USB_UIF_TOKEN" 8 507 "0x08"
D G "__USB_UIF_IDLE" 8 508 "0x10"
D G "__USB_UIF_STALL" 8 509 "0x20"
D G "__USB_UIF_SOF" 8 510 "0x40"
D G "STANDARD_INTS" 8 515 "__USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET"
D G "__USB_UCFG_UTEYE" 8 518 "0x80"
D G "__USB_UCFG_UOEMON" 8 520 "0x40"
D G "__USB_UCFG_UPUEN" 8 522 "0x10"
D G "__USB_UCFG_UTRDIS" 8 524 "0x08"
D G "__USB_UCFG_FSEN" 8 526 "0x04"
D G "__USB_UCFG_MY_UPUEN" 8 537 "__USB_UCFG_UPUEN"
D G "__UCFG_VAL_ENABLED__" 8 541 " (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE)"
D G "__UCFG_VAL_DISABLED__" 8 547 "__USB_UCFG_UTRDIS"
V G "__setup_0_tx_size" 8 553 "int8" `882  "interrupt handler, specific to PIC18Fxx5x peripheral only"
F G "usb_handle_interrupt" 8 556 "void()" `883 
F G "usb_isr_rst" 8 557 "void()" `884 
F G "usb_isr_uerr" 8 558 "void()" `885 
F G "usb_isr_sof" 8 559 "void()" `886 
F G "usb_isr_activity" 8 560 "void()" `887 
F G "usb_isr_uidle" 8 561 "void()" `888 
F G "usb_isr_tok_dne" 8 562 "void()" `889 
F G "usb_isr_stall" 8 563 "void()" `890 
F G "usb_init_ep0_setup" 8 564 "void()" `891  "BEGIN User Functions:"
C L "usb_init_ep0_setup" 8 120 1 "FUNCTION"
V L "en" 8 573 "int8" `893 
F G "usb_kbhit" 8 574 "int8(int8 en)" `653 
C L "usb_tbe" 8 120 1 "FUNCTION"
V L "en" 8 579 "int8" `896 
F G "usb_tbe" 8 580 "int8(int8 en)" `655 
C L "usb_detach" 8 120 1 "FUNCTION"
F G "usb_detach" 8 586 "void()" `643 
C L "usb_detach" 8 120 1 "FUNCTION"
C L "usb_detach" 8 120 1 "FUNCTION"
C L "usb_detach" 8 120 1 "FUNCTION"
C L "usb_detach" 8 120 1 "FUNCTION"
C L "usb_detach" 8 120 2 "FUNCTION"
C L "usb_attach" 8 120 1 "FUNCTION"
F G "usb_attach" 8 608 "void()" `642 
C L "usb_attach" 8 120 1 "FUNCTION"
C L "usb_attach" 8 120 1 "FUNCTION"
C L "usb_attach" 8 120 1 "FUNCTION"
C L "usb_init_cs" 8 120 1 "FUNCTION"
F G "usb_init_cs" 8 619 "void()" `640 
C L "usb_task" 8 120 1 "FUNCTION"
F G "usb_task" 8 625 "void()" `641 
C L "usb_task" 8 120 1 "FUNCTION"
C L "usb_init" 8 120 1 "FUNCTION"
F G "usb_init" 8 673 "void()" `639 
C L "usb_flush_in" 8 120 1 "FUNCTION"
V L "endpoint" 8 684 "int8" `675 
V L "len" 8 684 "int16" `676 
V L "tgl" 8 684 "USB_DTS_BIT" `898 
F G "usb_flush_in" 8 685 "int8(int8 endpoint,int16 len,USB_DTS_BIT tgl)" `674 
V L "i" 8 686 "int8" `895 
C L "usb_flush_in" 8 120 1 "FUNCTION"
C L "usb_flush_in" 8 120 1 "FUNCTION"
C L "usb_flush_in" 8 120 1 "FUNCTION"
C L "usb_flush_in" 8 120 1 "FUNCTION"
C L "usb_flush_in" 8 120 2 "FUNCTION"
C L "usb_flush_in" 8 120 2 "FUNCTION"
C L "usb_flush_in" 8 120 1 "FUNCTION"
C L "usb_put_packet" 8 120 1 "FUNCTION"
V L "endpoint" 8 742 "int8" `645 
V L "ptr" 8 742 "*int8" `646 
V L "len" 8 742 "int16" `647 
V L "tgl" 8 742 "USB_DTS_BIT" `900 
F G "usb_put_packet" 8 743 "int8(int8 endpoint,*int8 ptr,int16 len,USB_DTS_BIT tgl)" `644 
V L "buff_add" 8 744 "*int8" `896 
C L "usb_put_packet" 8 120 2 "FUNCTION"
C L "usb_flush_out" 8 120 1 "FUNCTION"
V L "endpoint" 8 764 "int8" `679 
V L "tgl" 8 764 "USB_DTS_BIT" `899 
F G "usb_flush_out" 8 765 "void(int8 endpoint,USB_DTS_BIT tgl)" `678 
V L "i" 8 766 "int8" `897 
V L "len" 8 767 "int16" `898 
C L "usb_flush_out" 8 120 1 "FUNCTION"
C L "usb_flush_out" 8 120 1 "FUNCTION"
C L "usb_flush_out" 8 120 1 "FUNCTION"
C L "usb_flush_out" 8 120 1 "FUNCTION"
C L "usb_flush_out" 8 120 1 "FUNCTION"
C L "usb_flush_out" 8 120 2 "FUNCTION"
C L "usb_rx_packet_size" 8 120 1 "FUNCTION"
V L "endpoint" 8 810 "int8" `900 
F G "usb_rx_packet_size" 8 811 "int16(int8 endpoint)" `681 
C L "usb_get_packet_buffer" 8 120 17 "FUNCTION"
V L "endpoint" 8 836 "int8" `900 
V L "ptr" 8 836 "*int8" `901 
V L "max" 8 836 "int16" `902 
F G "usb_get_packet_buffer" 8 837 "int16(int8 endpoint,*int8 ptr,int16 max)" `899 
V L "al" 8 838 "*int8" `903 
V L "st" 8 839 "int8" `904 
V L "i" 8 840 "int16" `905 
C L "usb_get_packet_buffer" 8 120 1 "FUNCTION"
C L "usb_get_packet" 8 120 1 "FUNCTION"
V L "endpoint" 8 858 "int8" `650 
V L "ptr" 8 858 "*int8" `651 
V L "max" 8 858 "int16" `909 
F G "usb_get_packet" 8 859 "int16(int8 endpoint,*int8 ptr,int16 max)" `649 
C L "usb_stall_ep" 8 120 1 "FUNCTION"
V L "endpoint" 8 867 "int8" `907 
F G "usb_stall_ep" 8 868 "void(int8 endpoint)" `657 
V L "direction" 8 869 "int1" `906 
C L "usb_unstall_ep" 8 120 1 "FUNCTION"
V L "endpoint" 8 885 "int8" `908 
F G "usb_unstall_ep" 8 886 "void(int8 endpoint)" `659 
V L "direction" 8 887 "int1" `907 
C L "usb_endpoint_stalled" 8 120 1 "FUNCTION"
V L "endpoint" 8 907 "int8" `909 
F G "usb_endpoint_stalled" 8 908 "int8(int8 endpoint)" `661 
V L "direction" 8 909 "int1" `908 
V L "st" 8 910 "int8" `909 
C L "usb_set_address" 8 120 1 "FUNCTION"
V L "address" 8 928 "int8" `911 
F G "usb_set_address" 8 929 "void(int8 address)" `663 
C L "usb_set_configured" 8 120 1 "FUNCTION"
V L "config" 8 943 "int8" `911 
F G "usb_set_configured" 8 944 "void(int8 config)" `665 
V L "en" 8 945 "int8" `910 
V L "addy" 8 946 "int16" `911 
V L "new_uep" 8 947 "int8" `912 
V L "len" 8 948 "int16" `913 
V L "i" 8 949 "int8" `914 
C L "usb_set_configured" 8 120 1 "FUNCTION"
C L "usb_set_configured" 8 120 1 "FUNCTION"
C L "usb_set_configured" 8 120 1 "FUNCTION"
C L "usb_disable_endpoint" 8 120 1 "FUNCTION"
V L "en" 8 999 "int8" `916 
F G "usb_disable_endpoint" 8 1000 "void(int8 en)" `668 
C L "usb_disable_endpoint" 8 120 1 "FUNCTION"
C L "usb_disable_endpoint" 8 120 1 "FUNCTION"
C L "usb_disable_endpoints" 8 120 1 "FUNCTION"
F G "usb_disable_endpoints" 8 1012 "void()" `667 
V L "i" 8 1013 "int8" `915 
C L "usb_disable_endpoints" 8 120 1 "FUNCTION"
C L "usb_clear_trn" 8 120 2 "FUNCTION"
F G "usb_clear_trn" 8 1027 "void()" `916  "UIR_TRN = 0;"
C L "usb_clear_trn" 8 120 1 "FUNCTION"
F G "usb_isr" 8 1051 "void()" `917 
V L "TRNAttempts" 8 1052 "int8" `918 
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr" 8 120 1 "FUNCTION"
C L "usb_isr_sof" 8 120 1 "FUNCTION"
F G "usb_isr_sof" 8 1101 "void()" `886  "UIR_SOF = 0;"
C L "usb_isr_rst" 8 120 6 "FUNCTION"
F G "usb_isr_rst" 8 1116 "void()" `884 
C L "usb_isr_rst" 8 120 1 "FUNCTION"
C L "usb_isr_rst" 8 120 1 "FUNCTION"
C L "usb_init_ep0_setup" 8 120 5 "FUNCTION"
F G "usb_init_ep0_setup" 8 1151 "void()" `891 
C L "usb_init_ep0_setup" 8 120 1 "FUNCTION"
C L "usb_isr_uerr" 8 120 7 "FUNCTION"
F G "usb_isr_uerr" 8 1173 "void()" `885 
C L "usb_isr_uerr" 8 120 1 "FUNCTION"
C L "usb_isr_uidle" 8 120 5 "FUNCTION"
F G "usb_isr_uidle" 8 1239 "void()" `888 
C L "usb_isr_uidle" 8 120 2 "FUNCTION"
C L "usb_isr_uidle" 8 120 1 "FUNCTION"
C L "usb_isr_activity" 8 120 6 "FUNCTION"
F G "usb_isr_activity" 8 1259 "void()" `887 
C L "usb_isr_activity" 8 120 1 "FUNCTION"
C L "usb_isr_activity" 8 120 1 "FUNCTION"
C L "usb_isr_activity" 8 120 1 "FUNCTION"
C L "usb_isr_stall" 8 120 5 "FUNCTION"
F G "usb_isr_stall" 8 1279 "void()" `890 
C L "usb_isr_stall" 8 120 1 "FUNCTION"
C L "usb_request_send_response" 8 120 1 "FUNCTION"
V L "len" 8 1294 "int8" `920 
F G "usb_request_send_response" 8 1294 "void(int8 len)" `670 
F G "usb_request_get_data" 8 1295 "void()" `672 
F G "usb_request_stall" 8 1296 "void()" `673 
C L "usb_isr_tok_dne" 8 120 13 "FUNCTION"
F G "usb_isr_tok_dne" 8 1313 "void()" `889 
V L "en" 8 1314 "int8" `919 
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
V L "pidKey" 8 1324 "int8" `920 
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 4 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 2 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 2 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
C L "usb_isr_tok_dne" 8 120 1 "FUNCTION"
D G "USB_ISO_PACKET_MAX_SIZE" 7 214 "1023"
D G "USB_NONISO_PACKET_MAX_SIZE" 7 215 "64"
V G "USB_stack_status" 7 520 "TYPE_USB_STACK_STATUS" `712 
V G "USB_address_pending" 7 522 "int8" `921  "save previous state because packets can take several isrs"
V G "usb_getdesc_ptr" 7 523 "int16" `922 
V G "usb_getdesc_len" 7 523 "int16" `923  "for reading string and config descriptors"
F G "usb_put_0len_0" 7 529 "void()" `924 
V L "endpoint" 7 530 "int8" `926 
V L "status" 7 530 "*int16" `927 
V L "buffer" 7 530 "*int16" `928 
V L "size" 7 530 "*int8" `929 
F G "usb_match_registers" 7 530 "void(int8 endpoint,*int16 status,*int16 buffer,*int8 size)" `925 
F G "usb_isr_tkn_setup_StandardEndpoint" 7 532 "void()" `930 
F G "usb_isr_tkn_setup_StandardDevice" 7 533 "void()" `931 
F G "usb_isr_tkn_setup_StandardInterface" 7 534 "void()" `932 
F G "usb_isr_tkn_setup_ClassInterface" 7 536 "void()" `933 
F G "usb_Get_Descriptor" 7 538 "void()" `934 
F G "usb_copy_desc_seg_to_ep" 7 539 "void()" `935 
F G "usb_finish_set_address" 7 540 "void()" `936 
V G "USB_Interface" 7 542 "int8[1]" `937  "config state for all of our interfaces, NUM_INTERFACES defined with descriptors"
C L "usb_finish_set_address" 7 221 2 "FUNCTION"
F G "usb_enumerated" 7 548 "int8()" `683 
C L "usb_wait_for_enumeration" 7 221 1 "FUNCTION"
F G "usb_wait_for_enumeration" 7 554 "void()" `684 
C L "usb_puts" 7 221 1 "FUNCTION"
V L "endpoint" 7 559 "int8" `691 
V L "ptr" 7 559 "*int8" `692 
V L "len" 7 559 "int16" `693 
V L "timeout" 7 559 "int8" `942 
F G "usb_puts" 7 559 "int8(int8 endpoint,*int8 ptr,int16 len,int8 timeout)" `690 
V L "i" 7 560 "int16" `938 
V L "res" 7 561 "int1" `939 
V L "this_packet_len" 7 562 "int16" `940 
V L "packet_size" 7 563 "int16" `941 
V L "timeout_1us" 7 564 "int32" `942 
C L "usb_puts" 7 221 2 "FUNCTION"
C L "usb_puts" 7 221 1 "FUNCTION"
C L "usb_puts" 7 221 2 "FUNCTION"
C L "usb_puts" 7 221 1 "FUNCTION"
C L "usb_puts" 7 221 1 "FUNCTION"
C L "usb_puts" 7 221 1 "FUNCTION"
C L "usb_gets" 7 221 1 "FUNCTION"
V L "endpoint" 7 608 "int8" `686 
V L "ptr" 7 608 "*int8" `687 
V L "max" 7 608 "int16" `688 
V L "timeout" 7 608 "int16" `950 
F G "usb_gets" 7 608 "int16(int8 endpoint,*int8 ptr,int16 max,int16 timeout)" `685 
V L "ret" 7 609 "int16" `946 
V L "to" 7 610 "int16" `947 
V L "len" 7 611 "int16" `948 
V L "packet_size" 7 612 "int16" `949 
V L "this_packet_max" 7 613 "int16" `950 
C L "usb_token_reset" 7 221 3 "FUNCTION"
F G "usb_token_reset" 7 645 "void()" `713 
V L "i" 7 646 "int8" `951 
C L "usb_token_reset" 7 221 1 "FUNCTION"
C L "usb_token_reset" 7 221 1 "FUNCTION"
C L "usb_token_reset" 7 221 1 "FUNCTION"
C L "usb_token_reset" 7 221 1 "FUNCTION"
D G "usb_put_0len_0" 7 670 "() usb_request_send_response(0)"
C L "usb_endpoint_is_valid" 7 221 10 "FUNCTION"
V L "endpoint" 7 683 "int8" `953 
F G "usb_endpoint_is_valid" 7 684 "int8(int8 endpoint)" `695 
V L "direction" 7 685 "int1" `952 
C L "usb_endpoint_is_valid" 7 221 1 "FUNCTION"
C L "usb_endpoint_is_valid" 7 221 1 "FUNCTION"
C L "usb_isr_tok_in_dne" 7 221 1 "FUNCTION"
V L "endpoint" 7 703 "int8" `954 
F G "usb_isr_tok_in_dne" 7 703 "void(int8 endpoint)" `717 
C L "usb_isr_tok_in_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_out_dne" 7 221 1 "FUNCTION"
V L "endpoint" 7 716 "int8" `954 
F G "usb_isr_tok_out_dne" 7 717 "void(int8 endpoint)" `715  "TODO:"
C L "usb_isr_tok_out_dne" 7 221 2 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 2 "FUNCTION"
F G "usb_isr_tok_setup_dne" 7 742 "void()" `714 
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tok_setup_dne" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardDevice" 7 802 "void()" `931 
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardDevice" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardInterface" 7 881 "void()" `932 
V L "curr_config" 7 882 "int8" `953 
C L "usb_isr_tkn_setup_StandardInterface" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 221 1 "FUNCTION"
C L "usb_isr_tkn_setup_StandardInterface" 7 221 3 "FUNCTION"
C L "usb_isr_tkn_setup_StandardEndpoint" 7 221 10 "FUNCTION"
F G "usb_isr_tkn_setup_StandardEndpoint" 7 941 "void()" `930 
C L "usb_isr_tkn_setup_ClassInterface" 7 221 11 "FUNCTION"
F G "usb_isr_tkn_setup_ClassInterface" 7 987 "void()" `933 
C L "usb_Get_Descriptor" 7 221 15 "FUNCTION"
F G "usb_Get_Descriptor" 7 1039 "void()" `934 
C L "usb_Get_Descriptor" 7 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 1 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 5 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 3 "FUNCTION"
C L "usb_Get_Descriptor" 7 221 1 "FUNCTION"
C L "usb_finish_set_address" 7 221 11 "FUNCTION"
F G "usb_finish_set_address" 7 1119 "void()" `936 
C L "usb_finish_set_address" 7 221 1 "FUNCTION"
C L "usb_finish_set_address" 7 221 1 "FUNCTION"
C L "usb_copy_desc_seg_to_ep" 7 221 3 "FUNCTION"
F G "usb_copy_desc_seg_to_ep" 7 1136 "void()" `935 
V L "i" 7 1137 "int8" `954 
V L "c" 7 1138 "int8" `955  "debug_usb(debug_putc, "!%LX! ", &usb_ep0_tx_buffer[0]);"
C L "usb_copy_desc_seg_to_ep" 7 221 1 "FUNCTION"
F G "MAIN" 0 4 "void()" `957 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
